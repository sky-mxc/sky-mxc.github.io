<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android Room 持久化库]]></title>
      <url>http://blog.skymxc.com/2018/04/15/Room/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一篇自己从Android开发文档中翻译来的关于<code>Room</code> 的文档。哪里不对，欢迎纠错</p>
</blockquote>
<h2 id="Room-持久化库"><a href="#Room-持久化库" class="headerlink" title="Room 持久化库"></a>Room 持久化库</h2><p>Room持久性库提供了SQLite的抽象层，以便在充分利用SQLite的同时允许流畅的数据库访问。<br>该库可帮助你在设备上创建应用程序的缓存数据，这样不管设备是否联网都能看到数据。</p>
<blockquote>
<p>摘自 <a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="external">Room Persistence Library</a></p>
</blockquote>
<h2 id="使用-Room-在本地保存数据"><a href="#使用-Room-在本地保存数据" class="headerlink" title="使用 Room 在本地保存数据"></a>使用 <code>Room</code> 在本地保存数据</h2><blockquote>
<p>原文地址 <a href="https://developer.android.com/training/data-storage/room/index.html" target="_blank" rel="external">https://developer.android.com/training/data-storage/room/index.html</a></p>
</blockquote>
<p>对于不重要的数据可以存储在本地，最常见的就是缓存相关的数据。这样，在设备没有网络的时候就可以浏览离线数据。当设备联网后，将用户改动的数据同步至服务端。</p>
<p><code>Room</code> 有三个重要组件</p>
<ul>
<li>Database</li>
<li>Entity</li>
<li>DAO</li>
</ul>
<h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><p>包含数据库持有者，并作为与应用持久关联数据的底层连接的主要接入点。</p>
<p>使用<code>@Database</code>注解，并满足以下条件</p>
<ul>
<li>是抽象类，并且继承自<code>RoomDatabase</code></li>
<li>在注解中包含与数据库关联的实体列表。</li>
<li>包含一个具有0个参数的抽象方法，并返回用@Dao注解的类。<br>在运行时，可以通过调用Room.databaseBuilder（）或Room.inMemoryDatabaseBuilder（）来获取数据库实例。</li>
</ul>
<h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><p>表示数据库中的表格</p>
<h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><p>包含用户访问数据库的方法</p>
<p>这些组件以及组件与APP其他部分的关系 如图所示<br><img src="https://developer.android.google.cn/images/training/data-storage/room_architecture.png" alt="Room结构图"></p>
<p>下面的代码片段是一个数据库实例配置包含了一个<code>Entity</code>和一个<code>DAO</code>:</p>
<p><strong><code>User.java</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line">    @PrimaryKey</div><div class="line">    private int uid;</div><div class="line"></div><div class="line">    @ColumnInfo(name = &quot;first_name&quot;)</div><div class="line">    private String firstName;</div><div class="line"></div><div class="line">    @ColumnInfo(name = &quot;last_name&quot;)</div><div class="line">    private String lastName;</div><div class="line"></div><div class="line">    // Getters and setters are ignored for brevity,</div><div class="line">    // but they&apos;re required for Room to work.</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><code>UserDao.java</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Dao</div><div class="line">public interface UserDao &#123;</div><div class="line">    @Query(&quot;SELECT * FROM user&quot;)</div><div class="line">    List&lt;User&gt; getAll();</div><div class="line"></div><div class="line">    @Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)</div><div class="line">    List&lt;User&gt; loadAllByIds(int[] userIds);</div><div class="line"></div><div class="line">    @Query(&quot;SELECT[^] * FROM user WHERE first_name LIKE :first AND &quot;</div><div class="line">           + &quot;last_name LIKE :last LIMIT 1&quot;)</div><div class="line">    User findByName(String first, String last);</div><div class="line"></div><div class="line">    @Insert</div><div class="line">    void insertAll(User... users);</div><div class="line"></div><div class="line">    @Delete</div><div class="line">    void delete(User user);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><code>AppDatabase.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Database(entities = &#123;User.class&#125;, version = 1)</div><div class="line">public abstract class AppDatabase extends RoomDatabase &#123;</div><div class="line">    public abstract UserDao userDao();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建完完成后使用以下代码获取数据库实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AppDatabase db = Room.databaseBuilder(getApplicationContext(),</div><div class="line">        AppDatabase.class, &quot;database-name&quot;).build();</div></pre></td></tr></table></figure>
<blockquote>
<p>数据库实例最好是单例以节省内存开销</p>
</blockquote>
<h2 id="使用-Room-实体定义数据"><a href="#使用-Room-实体定义数据" class="headerlink" title="使用 Room 实体定义数据"></a>使用 <code>Room</code> 实体定义数据</h2><blockquote>
<p>原文地址 <a href="https://developer.android.com/training/data-storage/room/defining-data.html" target="_blank" rel="external">https://developer.android.com/training/data-storage/room/defining-data.html</a></p>
</blockquote>
<p>我们定义的每一个实体，<code>Room</code> 都会对应的在数据库中创建一个表。<br>默认 Room 会为 每个字段在表中创建对应的字段;如果其中一些属性不想被创建在表中怎么办，那就是使用 <code>@Ignore</code> 注解此属性。完成实体的创建之后必须在 <code>Database</code> 引用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类中的每个字段都必须让Room能够访问到。否则Room无法管理。<br> [^] 注意 ：要遵循 JavaBean 规约；否则 管杀不管埋；[^]</p>
<h3 id="定义主键"><a href="#定义主键" class="headerlink" title="定义主键"></a>定义主键</h3><p>每个实体必须定义最少一个主键，就算类中只有一个字段，也要保证使用 <code>@PrimaryKey</code>；<br>如果想让Room自动分配ID，可以设置 <code>autoGenerate</code> 为true；<br>如果是联合主键，可以在<code>@Entity</code>中设置 <code>primaryKeys</code> 属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(primaryKeys = &#123;<span class="string">"firstName"</span>, <span class="string">"lastName"</span>&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认Room会使用类名当作数据库表名，如果你想设置其他名字，可以设置 <code>tableName</code> 属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(tableName = <span class="string">"users"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>[^]Sqlite中表名不区分大小写[^]</p>
<p>就像表名一样，字段的名字默认的也是类中属性的名字如果想设置其他名字，可使用 <code>@ColumnInfo</code> 的 <code>name</code>属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(tableName = <span class="string">"users"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"first_name"</span>)</div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注解索引和唯一约束"><a href="#注解索引和唯一约束" class="headerlink" title="注解索引和唯一约束"></a>注解索引和唯一约束</h3><p>使用 <code>@Entity</code> 的 <code>indices</code> 来创建索引，并列出索引或者组合索引包含的列；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(indices = &#123;<span class="meta">@Index</span>(<span class="string">"name"</span>),</div><div class="line">        <span class="meta">@Index</span>(value = &#123;<span class="string">"last_name"</span>, <span class="string">"address"</span>&#125;)&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line">    <span class="keyword">public</span> String address;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <code>@Index</code> 注解 和 <code>unique</code> 属性设置 唯一约束。<br>下面代码 firstName  和 lastName 两列组合唯一索引</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(indices = &#123;<span class="meta">@Index</span>(value = &#123;<span class="string">"first_name"</span>, <span class="string">"last_name"</span>&#125;,</div><div class="line">        unique = <span class="keyword">true</span>)&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"first_name"</span>)</div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@Ignore</span></div><div class="line">    Bitmap picture;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义对象间的关联关系"><a href="#定义对象间的关联关系" class="headerlink" title="定义对象间的关联关系"></a>定义对象间的关联关系</h3><p>由于<code>Sqlite</code> 是关系型数据库，我们可以指定对象间的关系。大部分的ORM框架也都支持对象间相互引用。但是 <code>Room</code> 明确禁止这样做。至于为什么明确禁止，文章最后会说。原文链接：<a href="https://developer.android.com/training/data-storage/room/referencing-data.html#understand-no-object-references" target="_blank" rel="external">https://developer.android.com/training/data-storage/room/referencing-data.html#understand-no-object-references</a></p>
<p>虽然不能直接定义对象间引用，但是可以使用外键建立关系。</p>
<p>例如：有一个 <code>Book</code> 实体，可以使用 <code>@ForeignKey</code> 关联到 <code>User</code> 实体。下面代码演示使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(foreignKeys = <span class="meta">@ForeignKey</span>(entity = User.class,</div><div class="line">                                  parentColumns = <span class="string">"id"</span>,</div><div class="line">                                  childColumns = <span class="string">"user_id"</span>))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String title;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"user_id"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> userId;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>@ForeignKey</code> 是非常强大的，我们可以定义对象间的级联操作。例如可以在注解中设置 <code>onDelete = CASCADE</code>，当删除用户的的时候就会把用户所关联的书都删掉了。</p>
<p>[^]SQLite将@Insert（onConflict = REPLACE）作为一组REMOVE和REPLACE操作处理，而不是单个UPDATE操作。这种替换冲突值的方法可能会影响外键约束。有关更多详细信息，请参阅ON_CONFLICT子句的SQLite文档。[^]</p>
<h3 id="创建嵌套对象"><a href="#创建嵌套对象" class="headerlink" title="创建嵌套对象"></a>创建嵌套对象</h3><p>Room 支持在数据实体中嵌套其他对象来组合相关字段。例如 <code>User</code> 中嵌套一个 <code>Address</code> 这个地址对象中有三个字段：街道，城市，邮编。在数据表中这个三个字段是在用户表中的，就像其他字段一样。<br>通过在 <code>User</code> 使用 <code>` 注解 属性</code>address` 即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String street;</div><div class="line">    <span class="keyword">public</span> String state;</div><div class="line">    <span class="keyword">public</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"post_code"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> postCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@PrimaryKey</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">public</span> Address address;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表示User对象的表格包含具有以下名称的列：id，firstName，street，state，city和post_code。</p>
<p>[^] 嵌套字段可以嵌套其他字段[^]<br>如果数据实体中有多个 嵌套字段，可以通过设置属性 <code>prefix</code> 加前缀的方式保证字段名不重复。<br>如果在 <code>User</code> 中使用下面的代码,那么嵌套字段就会是 <code>address_street</code>,<code>address_state</code>,<code>address_city</code>和<code>address_post_code</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embedded</span>(prefix = <span class="string">"address_"</span>)</div><div class="line"><span class="keyword">public</span> Address address;</div></pre></td></tr></table></figure></p>
<h2 id="使用-Room-DAO-访问数据"><a href="#使用-Room-DAO-访问数据" class="headerlink" title="使用 Room DAO 访问数据"></a>使用 <code>Room DAO</code> 访问数据</h2><blockquote>
<p>原文地址：<a href="https://developer.android.com/training/data-storage/room/accessing-data.html" target="_blank" rel="external">https://developer.android.com/training/data-storage/room/accessing-data.html</a></p>
</blockquote>
<p>Room 使用数据对象和 DAO 访问数据库。<br>DAO 是 Room 的重要组件，他包含了操作数据的抽象方法；<br>DAO可以是一个接口或者抽象类，如果是抽象类的话，它可以有一个构造函数，它将RoomDatabase作为其唯一参数。Room会在编译时创建实现。<br>DAO不能在主线程的时候操作数据，可能会阻塞UI，除非在构建的时候调用 <code>allowMainThreadQueries()</code>。如果是返回 <code>LiveData</code>或者 <code>Flowable</code> 的异步查询例外。</p>
<h3 id="定义操作方法"><a href="#定义操作方法" class="headerlink" title="定义操作方法"></a>定义操作方法</h3><p>这里只列出几个常用方法</p>
<h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><p>当创建一个DAO方法并使用它的时候，Room会生成它的实现并在单个事物中将所有参数插入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Insert</span>(onConflict = OnConflictStrategy.REPLACE)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUsers</span><span class="params">(User... users)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Insert</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBothUsers</span><span class="params">(User user1, User user2)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Insert</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUsersAndFriends</span><span class="params">(User user, List&lt;User&gt; friends)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 <code>@Insert</code> 只接受到一个参数，他会返回一个新插入行的 <code>long</code>类型的 <code>rowid</code>。如果参数是 一个数组和集合就会返回一个long类型的数组或集合。<br>关于 <code>@Insert</code> 的详细介绍查看文档 <a href="https://developer.android.com/reference/android/arch/persistence/room/Insert.html" target="_blank" rel="external">https://developer.android.com/reference/android/arch/persistence/room/Insert.html</a></p>
<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>Room 会通过每个实体的主键进行查询，然后再进行修改。<br>返回值可以是一个 <code>int</code> 型的值，返回更新的行数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Update</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUsers</span><span class="params">(User... users)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>Room 会数据实体的主键删除相应的数据。<br>返回值可以是一个 <code>int</code> 型的值，用来表示删除的行数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Delete</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUsers</span><span class="params">(User... users)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h3><p><code>@Query</code> 是 DAO 中主要使用的注解。它可以执行对数据库的读写操作。每一个 <code>@Query</code> 方法都会在编译时验证，如果出现问题也是在编译时出现问题不会在运行时出现问题。</p>
<p><code>Room</code> 也会验证方法的返回值，如果返回对象中的字段名称和查询响应中的字段名字不匹配， <code>Room</code> 会通过以下方式给出提示</p>
<ul>
<li>如果只有一些字段名称不匹配，会发出警告</li>
<li>如果没有字段名称匹配，会发出错误。</li>
</ul>
<h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Dao</div><div class="line">public interface MyDao &#123;</div><div class="line">    @Query(&quot;SELECT * FROM user&quot;)</div><div class="line">    public User[] loadAllUsers();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个非常简单的查询所有用户的查询。在编译时，Room会知道是查询用户表的所有列。如果查询包含语法错误或者数据库中不存在这个表。Room会在编译时报错并给出错误信息。</p>
<h4 id="将参数传递给查询"><a href="#将参数传递给查询" class="headerlink" title="将参数传递给查询"></a>将参数传递给查询</h4><p>大部分时候查询都是需要过滤参数的。比如要查询一些年龄比较大的用户。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM user WHERE age &gt; :minAge"</span>)</div><div class="line">    <span class="keyword">public</span> User[] loadAllUsersOlderThan(<span class="keyword">int</span> minAge);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在编译时，Room会将 <code>:minAge</code> 与方法参数匹配绑定。 Room使用参数名字匹配，如果匹配不上给出错误提示。</p>
<p>也可以传递多个参数或者引用多次：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM user WHERE age BETWEEN :minAge AND :maxAge"</span>)</div><div class="line">    <span class="keyword">public</span> User[] loadAllUsersBetweenAges(<span class="keyword">int</span> minAge, <span class="keyword">int</span> maxAge);</div><div class="line"></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM user WHERE first_name LIKE :search "</span></div><div class="line">           + <span class="string">"OR last_name LIKE :search"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserWithName</span><span class="params">(String search)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="返回列的子集"><a href="#返回列的子集" class="headerlink" title="返回列的子集"></a>返回列的子集</h4><p>很多时候只需要数据实体的中几个列。例如你可能只想显示用户的姓和名而不是全部的用户信息。只查询需要的列可以节省资源并且查询的更快。</p>
<p><code>Room</code> 允许返回任何的Java对象。只要查询的结果列能够和Java对象映射上即可。所以我们可以创建一个只包含需要的列的类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTuple</span> </span>&#123;</div><div class="line">    <span class="meta">@ColumnInfo</span>(name=<span class="string">"first_name"</span>)</div><div class="line">    <span class="keyword">public</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@ColumnInfo</span>(name=<span class="string">"last_name"</span>)</div><div class="line">    <span class="keyword">public</span> String lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用这个 POJO</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT first_name, last_name FROM user"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;NameTuple&gt; <span class="title">loadFullName</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Room</code> 知道查询的值并知道怎么映射到对应的NameTuple字段中。所以 <code>Room</code> 会生成正确的代码。如果查询返回的列多了或者少了，Room会给出警告</p>
<p><em>这里也可以使用<code>@Embedded</code>注解</em></p>
<h4 id="传递参数集合"><a href="#传递参数集合" class="headerlink" title="传递参数集合"></a>传递参数集合</h4><p>有时候查询的参数数量是动态的，只有运行的时候才知道。例如只查询某些地区的用户。<br>当参数是一个集合的时候，<code>Room</code> 会在运行的时候自动扩展它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT first_name, last_name FROM user WHERE region IN (:regions)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;NameTuple&gt; <span class="title">loadUsersFromRegions</span><span class="params">(List&lt;String&gt; regions)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="可观察的查询"><a href="#可观察的查询" class="headerlink" title="可观察的查询"></a>可观察的查询</h4><p>在执行查询时，我们经常想让UI在数据更改时自动更新。要实现这一点，可以在查询方法使用 <code>LiveData</code> 类行的返回值。当数据更新时 <code>Room</code> 会自动生成所需的代码已更新<code>LiveData</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT first_name, last_name FROM user WHERE region IN (:regions)"</span>)</div><div class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;User&gt;&gt; loadUsersFromRegionsSync(List&lt;String&gt; regions);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>从版本1.0开始，Room使用查询中访问的表的列表来决定是否更新LiveData的实例。</em></p>
<h4 id="使用-RxJava-进行响应查询"><a href="#使用-RxJava-进行响应查询" class="headerlink" title="使用 RxJava 进行响应查询"></a>使用 RxJava 进行响应查询</h4><p>Room还可以从定义的查询中返回 RxJava2 的 Publisher 和 Flowable 对象。要使用此功能，需要将 Room 组中的 android.arch.persistence.room:rxjava2 组件添加到构建Gradle依赖项中,添加组件之后就可以返回 Rxjava2 中的对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * from user where id = :id LIMIT 1"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Flowable&lt;User&gt; <span class="title">loadUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多 Room 和 Rxjava2 的使用 看另一篇文章 <a href="https://medium.com/google-developers/room-rxjava-acb0cd4f3757" target="_blank" rel="external">https://medium.com/google-developers/room-rxjava-acb0cd4f3757</a></p>
<h4 id="直接访问-Cursor"><a href="#直接访问-Cursor" class="headerlink" title="直接访问 Cursor"></a>直接访问 Cursor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Dao</div><div class="line">public interface MyDao &#123;</div><div class="line">    @Query(&quot;SELECT * FROM user WHERE age &gt; :minAge LIMIT 5&quot;)</div><div class="line">    public Cursor loadRawUsersOlderThan(int minAge);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>非常不推荐使用Cursor API，因为它不能保证行是否存在或行包含的值。只有当已经拥有需要游标并且无法轻松重构的代码时才使用此功能。</strong></p>
<h4 id="查询多个表"><a href="#查询多个表" class="headerlink" title="查询多个表"></a>查询多个表</h4><p>有些时候可能需要查询多个表中的数据来计算结果。Room运行我们写任何查询，当然也允许连接其他表。如果响应式可观察数据类型，例如  Flowable 或者 LiveData，Room会监视查询中的所有表，使其无效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM book "</span></div><div class="line">           + <span class="string">"INNER JOIN loan ON loan.book_id = book.id "</span></div><div class="line">           + <span class="string">"INNER JOIN user ON user.id = loan.user_id "</span></div><div class="line">           + <span class="string">"WHERE user.name LIKE :userName"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findBooksBorrowedByNameSync</span><span class="params">(String userName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以从这些查询中返回POJO。例如，可以编写一个查询来加载用户及其宠物的名称，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Dao</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</div><div class="line">   <span class="meta">@Query</span>(<span class="string">"SELECT user.name AS userName, pet.name AS petName "</span></div><div class="line">          + <span class="string">"FROM user, pet "</span></div><div class="line">          + <span class="string">"WHERE user.id = pet.user_id"</span>)</div><div class="line">   <span class="keyword">public</span> LiveData&lt;List&lt;UserPet&gt;&gt; loadUserAndPetNames();</div><div class="line"></div><div class="line">   <span class="comment">// You can also define this class in a separate file, as long as you add the</span></div><div class="line">   <span class="comment">// "public" access modifier.</span></div><div class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPet</span> </span>&#123;</div><div class="line">       <span class="keyword">public</span> String userName;</div><div class="line">       <span class="keyword">public</span> String petName;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="迁移-Room-数据库"><a href="#迁移-Room-数据库" class="headerlink" title="迁移 Room 数据库"></a>迁移 <code>Room</code> 数据库</h2><blockquote>
<p>原文 <a href="https://developer.android.com/training/data-storage/room/migrating-db-versions.html" target="_blank" rel="external">https://developer.android.com/training/data-storage/room/migrating-db-versions.html</a></p>
</blockquote>
<p>在APP升级时可能需要更改数据库来策应新的功能。这个时候当然不希望数据库中的数据丢失。</p>
<p><code>Room</code> 允许我们编写 <code>Migration</code> ，以此来迁移数据。每个迁移类制定一个开始版本和结束版本。</p>
<p>在运行时，Room会运行每个<code>Migration</code>类的<code>migrate（）</code>方法，并使用正确的顺序将数据库迁移到更高版本。</p>
<p><strong>如果不提供必要的<code>Migration</code> , <code>Room</code> 会重建数据库，所以数据会丢失</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Room.databaseBuilder(getApplicationContext(), MyDb.class, <span class="string">"database-name"</span>)</div><div class="line">        .addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Migration MIGRATION_1_2 = <span class="keyword">new</span> Migration(<span class="number">1</span>, <span class="number">2</span>) &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(SupportSQLiteDatabase database)</span> </span>&#123;</div><div class="line">        database.execSQL(<span class="string">"CREATE TABLE `Fruit` (`id` INTEGER, "</span></div><div class="line">                + <span class="string">"`name` TEXT, PRIMARY KEY(`id`))"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> Migration MIGRATION_2_3 = <span class="keyword">new</span> Migration(<span class="number">2</span>, <span class="number">3</span>) &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(SupportSQLiteDatabase database)</span> </span>&#123;</div><div class="line">        database.execSQL(<span class="string">"ALTER TABLE Book "</span></div><div class="line">                + <span class="string">" ADD COLUMN pub_year INTEGER"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>要保持迁移逻辑按预期运行，请使用完整查询，而不是引用表示查询的常量。</strong></p>
<p>在迁移完成之后，<code>Room</code> 验证模式会确认迁移正确进行，如果 <code>Room</code> 发现错误，会抛出一个包含不匹配的异常。</p>
<h3 id="测试迁移"><a href="#测试迁移" class="headerlink" title="测试迁移"></a>测试迁移</h3><p>数据迁移是很重要的，一旦迁移失败可能会发生Crash。为了保证程序的稳定性，一定要确认是否否迁移成功。Room 提供了一个测试工件来帮助我们测试，为保证测试工件的正确运行，必须开启导出模式。</p>
<h3 id="导出模式"><a href="#导出模式" class="headerlink" title="导出模式"></a>导出模式</h3><p>编译后，Room将数据库的模式信息导出到JSON文件中。要导出模式，在build.gradle文件中设置room.schemaLocation注解处理器属性，如下面的代码片段所示：</p>
<p>build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        javaCompileOptions &#123;</div><div class="line">            annotationProcessorOptions &#123;</div><div class="line">                arguments = [&quot;room.schemaLocation&quot;:</div><div class="line">                             &quot;$projectDir/schemas&quot;.toString()]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle 将 library module 发布到本地仓库，并添加本地依赖]]></title>
      <url>http://blog.skymxc.com/2018/04/10/push-library-to-local-maven/</url>
      <content type="html"><![CDATA[<h1 id="将module发布到本地maven仓库"><a href="#将module发布到本地maven仓库" class="headerlink" title="将module发布到本地maven仓库"></a>将module发布到本地maven仓库</h1><ol>
<li>在本地准备一个目录，当做maven仓库</li>
<li>在项目的 <code>gradle.properties</code> 配置仓库信息(主要是POM文件信息)</li>
<li>在module的   <code>build.gradle</code> 配置插件，任务，及代码信息</li>
<li>执行发布任务</li>
<li>本地 <code>maven</code> 查看</li>
<li>引用本地仓库中的包</li>
</ol>
<h2 id="1-准备目录"><a href="#1-准备目录" class="headerlink" title="1. 准备目录"></a>1. 准备目录</h2><p>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E:\libs\localMaven</div></pre></td></tr></table></figure>
<h2 id="2-配置仓库信息"><a href="#2-配置仓库信息" class="headerlink" title="2. 配置仓库信息"></a>2. 配置仓库信息</h2><p>在项目的 <code>gradle.properties</code> 中配置属性信息<br>Example：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 包信息</div><div class="line">PROJ_GROUP= 一般为公司域名</div><div class="line">PROJ_VERSION=版本</div><div class="line"></div><div class="line"># 项目的描述</div><div class="line">PROJ_WEBSITEURL= 项目地址</div><div class="line">PROJ_ISSUETRACKERURL= 提 issue 地址</div><div class="line">PROJ_DESCRIPTION= 项目介绍</div><div class="line"></div><div class="line"># Licence信息 这部分是固定的</div><div class="line">PROJ_LICENCE_NAME=The Apache Software License, Version 2.0</div><div class="line">PROJ_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt</div><div class="line">PROJ_LICENCE_DEST=repo</div><div class="line"></div><div class="line"># Developer 信息 这里是开发者信息</div><div class="line">DEVELOPER_ID=mxc</div><div class="line">DEVELOPER_NAME=孟祥超</div><div class="line">DEVELOPER_EMAIL=skymxc@foxmail.com</div><div class="line">`</div></pre></td></tr></table></figure>
<h2 id="3-为-module-配置插件，任务，代码信息"><a href="#3-为-module-配置插件，任务，代码信息" class="headerlink" title="3. 为 module 配置插件，任务，代码信息"></a>3. 为 <code>module</code> 配置插件，任务，代码信息</h2><p>为了优雅，在 <code>module</code> 下创建一个 <code>gradle.properties</code> 文件设置属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PROJ_NAME=依赖名字 localrepo</div><div class="line">PROJ_ARTIFACTID=所属分类</div><div class="line"></div><div class="line">LOCAL_REPO_URL= 本地仓库的地址：file://+本地路径 ；例如 file://E:/libs/localMaven</div></pre></td></tr></table></figure>
<p>在 <code>module</code> 的 <code>build.gradle</code> 中使用 <code>maven</code> 插件 定义上传任务</p>
<p>使用 <code>maven</code> 插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;maven&apos;</div></pre></td></tr></table></figure>
<p>定义上传任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">uploadArchives &#123;</div><div class="line">    repositories.mavenDeployer &#123;</div><div class="line">        repository(url: LOCAL_REPO_URL)</div><div class="line">        pom.groupId = PROJ_GROUP</div><div class="line">        pom.artifactId = PROJ_ARTIFACTID</div><div class="line">        pom.version = android.defaultConfig.versionName</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Example</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'maven'</span></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">26</span></div><div class="line">    buildToolsVersion <span class="string">"26.0.2"</span></div><div class="line"></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion <span class="number">19</span></div><div class="line">        targetSdkVersion <span class="number">26</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="literal">true</span></div><div class="line">            shrinkResources <span class="literal">true</span></div><div class="line">            zipAlignEnabled <span class="literal">true</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    repositories&#123;</div><div class="line">        flatDir&#123;</div><div class="line">            dirs<span class="string">'libs'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">uploadArchives &#123;</div><div class="line">    repositories.mavenDeployer &#123;</div><div class="line">        repository(<span class="string">url:</span> LOCAL_REPO_URL)</div><div class="line">        pom.groupId = PROJ_GROUP</div><div class="line">        pom.artifactId = PROJ_ARTIFACTID</div><div class="line">        pom.version = android.defaultConfig.versionName</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-执行命令-开始任务"><a href="#4-执行命令-开始任务" class="headerlink" title="4. 执行命令 开始任务"></a>4. 执行命令 开始任务</h2><p> <em>我这里是 <code>windows</code> 系统</em> 故使用 <code>gradlew</code><br> <strong>localrepo</strong> 就是本地的 <code>module</code><br>在 <code>Android studio</code> 的 <code>Terminal</code> 窗口 输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradlew -p localrepo clean build uploadArchives --info</div></pre></td></tr></table></figure></p>
<h2 id="5-如果顺利执行成功的话-本地maven-目录中现在应该已经有了"><a href="#5-如果顺利执行成功的话-本地maven-目录中现在应该已经有了" class="headerlink" title="5. 如果顺利执行成功的话 本地maven 目录中现在应该已经有了"></a>5. 如果顺利执行成功的话 本地<code>maven</code> 目录中现在应该已经有了</h2><h2 id="6-引用本地依赖"><a href="#6-引用本地依赖" class="headerlink" title="6. 引用本地依赖"></a>6. 引用本地依赖</h2><p>添加本地的 <code>maven</code> 地址 在项目的  <code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()</div><div class="line">        google()</div><div class="line">        maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">        maven&#123;</div><div class="line">            url <span class="string">'file://E:/libs/localMaven/'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加依赖 在 <code>moudle</code> 的 <code>build.gradle</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation <span class="string">'cn.sintoon:localrepo:1.0'</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>end</p>
</blockquote>
<p>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1z0rlkggpcdck" target="_blank" rel="external">https://cloud.tencent.com/developer/support-plan?invite_code=1z0rlkggpcdck</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中的线程]]></title>
      <url>http://blog.skymxc.com/2017/08/27/thread-in-Android/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>Android 中线程的使用</strong></p>
</blockquote>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><em>Android官网文档-&gt;<a href="https://developer.android.com/guide/components/processes-and-threads.html?hl=zh-cn#Threads" target="_blank" rel="external">https://developer.android.com/guide/components/processes-and-threads.html?hl=zh-cn#Threads</a></em></p>
<blockquote>
<p>应用启动时，系统会为应用创建一个线程，称为主线程；它负责UI的绘制以及UI的事件响应交互，也称为UI线程；<br>系统不会为每个组件实例创建单独的线程，同一进程中的所有组件都在主线程实例化，并且每个组件的资源调用都由主线程分配，因此响应系统回调都在主线程进行。<br>因为主线程要处理UI的绘制及事件的交互，所以主线程中不能进行耗时的操作（网络访问，数据库操作），一旦主线程进行耗时操作就会出现阻塞，UI事件就没办法响应了，就会出现ANR，这是非常不友好的。</p>
</blockquote>
<p>Android UI是非线程安全的，所以关于UI的操作只能在UI线程操作，所以Android单线程模式必须遵守两条规则</p>
<ol>
<li>不能阻塞UI线程</li>
<li>UI操作要在UI线程，不要在 UI 线程之外访问 Android UI 工具包</li>
</ol>
<h3 id="工作线程"><a href="#工作线程" class="headerlink" title="工作线程"></a>工作线程</h3><blockquote>
<p>为了保证应用的顺畅，所有耗时的操作都在工作线程中进行。</p>
</blockquote>
<p>遵循上述的两条规则，不能再UI线程之外的线程访问UI，但是网络访问结果是在工作线程，要将结果填充到UI中怎么办呢，Android提供了几种方法在工作线程中访问UI</p>
<ul>
<li>Activity.runOnUiThread(Runnable)</li>
<li>View.post(Runnable)</li>
<li>View.postDelayed(Runnable, long)</li>
<li>Handler</li>
</ul>
<p><em>还有一种方式 AsyncTask;</em></p>
<h3 id="线程相关API"><a href="#线程相关API" class="headerlink" title="线程相关API"></a>线程相关API</h3><ul>
<li>Runnable</li>
<li>Thread</li>
<li>Callable<v></v></li>
<li>Future&lt;?&gt;</li>
<li>RunnableFuture<v></v></li>
<li>FutureTask<v></v></li>
<li>Executor</li>
<li>ExecutorService</li>
<li>ThreadPoolExecutor</li>
<li>Executors</li>
</ul>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><blockquote>
<p>有两种方式创建一个线程。</p>
</blockquote>
<ol>
<li>继承 Thread类</li>
<li><p>实现 Runnable接口</p>
<blockquote>
<p>继承Thread类 重写 run方法，在调用start()后JVM会自动调用run()方法</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 通过继承Thread 创建一个Thread</div><div class="line"> */</div><div class="line">class MyThread extends Thread &#123;</div><div class="line"></div><div class="line">    public MyThread(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 重写run方法 JVM会自动调用此方法</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">       // logic code</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 重载（Overload）run()方法 和普通的方法一样，并不会在该线程的start()方法被调用后被JVM自动运行</div><div class="line">     *</div><div class="line">     * @param str</div><div class="line">     */</div><div class="line">    public void run(String str) &#123;</div><div class="line">        Log.e(&quot;run&quot;, str + &quot;&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>实现 Runnable接口 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 通过实现 Runnable 创建一个线程</div><div class="line"> */</div><div class="line">class MyRunnable implements Runnable &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * JVM会自动调用此方法</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">       //logic code</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><blockquote>
<p>继承Thread方式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyThread thread0 = new MyThread();</div><div class="line"> thread0.start();</div></pre></td></tr></table></figure>
<blockquote>
<p>实现 Runnable方式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyRunnable myRunnable = new MyRunnable();</div><div class="line">Thread thread1 = new Thread(myRunnable);</div><div class="line">thread1.start();</div></pre></td></tr></table></figure>
<h3 id="Runnable和Thread两种方式的区别和联系"><a href="#Runnable和Thread两种方式的区别和联系" class="headerlink" title="Runnable和Thread两种方式的区别和联系"></a>Runnable和Thread两种方式的区别和联系</h3><blockquote>
<p>其实这块主要是围绕着接口和抽象类的区别以及一些设计原则而言的。</p>
</blockquote>
<ol>
<li>Java是单继承的，你继承了Thread类再也无法继承别的类。</li>
<li>Java虽然是单继承但是可以实现多接口的，即使你实现Runnable，你也可以实现别的接口。</li>
<li>在面向对象编程中，继承一个类就意味着要使用或者改善某些功能，如果不准备改善Thread提供的封装好的功能，使用Runnable更好。</li>
<li>Runnable接口表示一个任务，可以被任意一个普通线程，线程池或者其他方式执行。逻辑上的分离，Runnable比Thread更好。</li>
<li>将任务分离为Runnable，就可以重用或者通过其他方式执行它，Thread一旦完成就无法重新启动了。</li>
<li>线程池的接口接收的参数为Runnable</li>
<li>用Runnable能够代表一个线程就不必继承Thread，那样就额外的继承了Thread的全部方法</li>
<li>继承Thread，你就必须为每个线程都创建一个实例，然后为每个实例分配内存。</li>
<li>写一个接口而不是实现，会让程序更容易扩展。</li>
</ol>
<p><em>Thread类也是实现了Runnable接口</em></p>
<blockquote>
<p>参考资料</p>
</blockquote>
<ul>
<li><a href="https://www.linkedin.com/pulse/20140917120728-90925576-difference-between-implements-runnable-and-extends-thread-in-java" target="_blank" rel="external">https://www.linkedin.com/pulse/20140917120728-90925576-difference-between-implements-runnable-and-extends-thread-in-java</a></li>
<li><a href="https://my.oschina.net/leejun2005/blog/483999" target="_blank" rel="external">https://my.oschina.net/leejun2005/blog/483999</a></li>
<li>这个重点看评论-&gt;<a href="http://mars914.iteye.com/blog/1508429" target="_blank" rel="external">http://mars914.iteye.com/blog/1508429</a></li>
</ul>
<h2 id="资源共享及同步问题"><a href="#资源共享及同步问题" class="headerlink" title="资源共享及同步问题"></a>资源共享及同步问题</h2><blockquote>
<p>关于多线程资源共享，多线程并发操作有随机性，不能保证每个线程都顺序的去访问某个资源，在多个线程同时去访问一个资源的时候要进行资源的同步.</p>
</blockquote>
<p>经典的卖票例子</p>
<h3 id="资源共享"><a href="#资源共享" class="headerlink" title="资源共享"></a>资源共享</h3><blockquote>
<p>资源共享，多个线程并发执行访问同一个资源，才是共享的资源。</p>
</blockquote>
<p><em>票</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 票</div><div class="line"> */</div><div class="line">class Tickets &#123;</div><div class="line">    int num = 5;</div><div class="line"></div><div class="line">    public int get() &#123;</div><div class="line">        return num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set(int num) &#123;</div><div class="line">        this.num = num;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>卖票程序</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * 卖票 程序</div><div class="line"> */</div><div class="line">class SaleRunnable implements Runnable &#123;</div><div class="line"></div><div class="line">    private Tickets tickets;</div><div class="line"></div><div class="line">    public SaleRunnable(Tickets tickets) &#123;</div><div class="line">        this.tickets = tickets;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        while (tickets.get() &gt; 0) &#123;</div><div class="line">            Log.e(Thread.currentThread().getName(), &quot;销售第&quot; + tickets.get() + &quot;张，剩余&quot; + (tickets.get() - 1) + &quot;张&quot;);</div><div class="line">            tickets.set(tickets.get() - 1);</div><div class="line">            try &#123;</div><div class="line">                //延迟 1000</div><div class="line">                Thread.sleep(1000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Log.e(Thread.currentThread().getName(), &quot;没票了&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>卖票</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//票资源</div><div class="line">Tickets tickets = new Tickets();</div><div class="line">SaleRunnable saleRunnable = new SaleRunnable(tickets);</div><div class="line">//开三个窗口使用同一程序去卖票 </div><div class="line">new Thread(saleRunnable, &quot;窗口零&quot;).start();</div><div class="line">new Thread(saleRunnable, &quot;窗口一&quot;).start();</div><div class="line">new Thread(saleRunnable, &quot;窗口二&quot;).start();</div></pre></td></tr></table></figure>
<p><em>卖票结果</em></p>
<p>多线程并发执行的结果就是 多个窗口同时售票，同一时间销售掉了同一个票，尴尬了，一个票卖了多次</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">08-22 14:23:41.066 E/窗口零: 销售第5张，剩余4张</div><div class="line">08-22 14:23:41.066 E/窗口一: 销售第4张，剩余3张</div><div class="line">08-22 14:23:41.076 E/窗口二: 销售第3张，剩余2张</div><div class="line">08-22 14:23:42.066 E/窗口零: 销售第2张，剩余1张</div><div class="line">08-22 14:23:42.076 E/窗口二: 销售第2张，剩余1张</div><div class="line">08-22 14:23:42.076 E/窗口一: 销售第2张，剩余1张</div><div class="line">08-22 14:23:43.076 E/窗口一: 没票了</div><div class="line">08-22 14:23:43.076 E/窗口二: 没票了</div><div class="line">08-22 14:23:43.076 E/窗口零: 没票了</div><div class="line"></div><div class="line">08-22 14:24:29.866 E/窗口零: 销售第5张，剩余4张</div><div class="line">08-22 14:24:29.866 E/窗口一: 销售第4张，剩余3张</div><div class="line">08-22 14:24:29.866 E/窗口二: 销售第3张，剩余2张</div><div class="line">08-22 14:24:30.866 E/窗口零: 销售第2张，剩余1张</div><div class="line">08-22 14:24:30.866 E/窗口二: 销售第1张，剩余0张</div><div class="line">08-22 14:24:30.866 E/窗口一: 销售第2张，剩余1张</div><div class="line">08-22 14:24:31.866 E/窗口零: 没票了</div><div class="line">08-22 14:24:31.866 E/窗口二: 没票了</div><div class="line">08-22 14:24:31.866 E/窗口一: 没票了</div><div class="line"></div><div class="line">08-22 14:24:51.906 E/窗口二: 销售第5张，剩余4张</div><div class="line">08-22 14:24:51.906 E/窗口一: 销售第4张，剩余3张</div><div class="line">08-22 14:24:51.906 E/窗口零: 销售第3张，剩余2张</div><div class="line">08-22 14:24:52.906 E/窗口二: 销售第2张，剩余1张</div><div class="line">08-22 14:24:52.906 E/窗口一: 销售第2张，剩余1张</div><div class="line">08-22 14:24:52.916 E/窗口零: 没票了</div><div class="line">08-22 14:24:53.916 E/窗口二: 没票了</div><div class="line">08-22 14:24:53.916 E/窗口一: 没票了</div></pre></td></tr></table></figure>
<h3 id="资源同步"><a href="#资源同步" class="headerlink" title="资源同步"></a>资源同步</h3><blockquote>
<p>Java 同步块（synchronized block）用来标记方法或者代码块是同步的</p>
</blockquote>
<p><em>java中每个对象都对应于一个称为“互斥锁”的标志，这个标志用来保证在任何时刻，只能有一个线程访问该对象。<br>如果系统中的资源当前没有被使用，线程可以得到“互斥锁”，即线程可以得到资源的使用权。<br>当线程执行完毕后，他放弃“互斥锁”，如果一个线程获得“互斥锁”时，其余的线程就必须等待当前线程结束并放弃“互斥锁”。<br>在java中，提供了关键字synchronized来实现对象的“互斥锁”关系。<br><strong>当某个对象或方法用关键字synchronized修饰时，表明该对象或方法在任何一个时刻只能有一个线程访问。</strong><br>如果synchronized用在类的声明中，表明该类中的所有方法都是synchronized的。</em></p>
<p>在这个例子中，我们只需要将“票”这个资源同步即可</p>
<p>多个线程都是访问的这一个实例，所以同步这个实例方法，就可以了；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 卖票 程序</div><div class="line"> */</div><div class="line">class SaleRunnable implements Runnable &#123;</div><div class="line"></div><div class="line">    private Tickets tickets;</div><div class="line"></div><div class="line">    public SaleRunnable(Tickets tickets) &#123;</div><div class="line">        this.tickets = tickets;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        while (true) &#123;</div><div class="line">            if (sale()) &#123;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">            try &#123;</div><div class="line">                //延迟 1000</div><div class="line">                Thread.sleep(1000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Log.e(Thread.currentThread().getName(), &quot;没票了&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private synchronized boolean sale() &#123;</div><div class="line">        if (tickets.get() &gt; 0) &#123;</div><div class="line">            Log.e(Thread.currentThread().getName(), &quot;销售第&quot; + tickets.get() + &quot;张，剩余&quot; + (tickets.get() - 1) + &quot;张&quot;);</div><div class="line">            tickets.set(tickets.get() - 1);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 卖票窗口</div><div class="line"> */</div><div class="line">class SaleThread extends Thread &#123;</div><div class="line"></div><div class="line">    private Tickets tickets;</div><div class="line"></div><div class="line">    public SaleThread(Tickets ti, String name) &#123;</div><div class="line">        super(name);</div><div class="line">        tickets = ti;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        while (true) &#123;</div><div class="line">            //同步这个资源</div><div class="line">            synchronized (tickets) &#123;</div><div class="line">                if (tickets.get() &gt; 0) &#123;</div><div class="line">                    Log.e(Thread.currentThread().getName(), &quot;销售第&quot; + tickets.get() + &quot;张，剩余&quot; + (tickets.get() - 1) + &quot;张&quot;);</div><div class="line">                    tickets.set(tickets.get() - 1);</div><div class="line">                &#125; else &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            try &#123;</div><div class="line">                //延迟 1000</div><div class="line">                Thread.sleep(1000);</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Log.e(Thread.currentThread().getName(), &quot;没票了&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="http://ifeve.com/java-concurrency-thread-directory/" target="_blank" rel="external">http://ifeve.com/java-concurrency-thread-directory/</a></li>
<li><a href="http://ifeve.com/synchronized-blocks/" target="_blank" rel="external">http://ifeve.com/synchronized-blocks/</a></li>
<li><a href="http://student-lp.iteye.com/blog/2083170" target="_blank" rel="external">http://student-lp.iteye.com/blog/2083170</a></li>
<li><a href="http://www.cnblogs.com/dennisit/archive/2013/02/24/2925288.html" target="_blank" rel="external">http://www.cnblogs.com/dennisit/archive/2013/02/24/2925288.html</a></li>
<li><a href="http://lanvis.blog.163.com/blog/static/26982162009798422547/" target="_blank" rel="external">http://lanvis.blog.163.com/blog/static/26982162009798422547/</a></li>
</ul>
<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><blockquote>
<ol>
<li>新生状态（new）</li>
</ol>
</blockquote>
<p>当一个线程的实例被创建即使用<code>new</code>关键字后台Thread类或者其子类创建一个线程对象后，此时该线程就处于新生状态，处于新生状态的线程有自己的内存空间，但该线程并没有运行，此时线程还不是活着的（not alive）</p>
<blockquote>
<ol>
<li>就绪状态（Runnable）</li>
</ol>
</blockquote>
<p>通过调用线程实例的<code>start()</code>方法来启动线程使线程进入就绪状态(runnable);处于就绪状态的线程已经具备了运行条件，但还没被分配到CPU就是不一定会被立即执行，此时处于线程就绪队列，等待线程为期分配CPU，等待状态不是执行状态；此时线程是活着的（alive）；</p>
<blockquote>
<ol>
<li>运行状态（Running）</li>
</ol>
</blockquote>
<p>一旦获取CPU（被JVM选中），线程就进入运行（running）状态，线程<code>run()</code>方法才开始被执行；在运行状态的线程执行自己的run()方法中的操作，知道调用其他的方法而终止、或者等待某种资源而阻塞、或者完成任务而死亡；如果在给定的时间片内没有执行结束，就会被系统给换下来回到线程的就绪状态；此时线程是活着的（alive）；</p>
<blockquote>
<ol>
<li>阻塞状态（Blocked）</li>
</ol>
</blockquote>
<p>通过调用<code>join()</code>,<code>sleep()</code>,<code>wait()</code>或者资源被占用使线程处于阻塞(blocked)状态；处于Blocked状态的线程仍然是活着的（alive）；</p>
<blockquote>
<ol>
<li>死亡状态（Dead）</li>
</ol>
</blockquote>
<p>当一个线程的<code>run()</code>方法运行完毕或被中断或被异常退出，该线程到达死亡(dead)状态。此时可能仍然存在一个该Thread的实例对象，但该Thread已经不可能在被作为一个可被独立执行的线程对待了，线程的独立的call stack已经被dissolved。一旦某一线程进入Dead状态，他就再也不能进入一个独立线程的生命周期了。对于一个处于Dead状态的线程调用start()方法，会出现一个运行期(runtime exception)的异常；处于Dead状态的线程不是活着的（not alive）。</p>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="http://www.cnblogs.com/DreamSea/archive/2012/01/11/JavaThread.html" target="_blank" rel="external">http://www.cnblogs.com/DreamSea/archive/2012/01/11/JavaThread.html</a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/5603277.html" target="_blank" rel="external">http://www.cnblogs.com/whoislcj/p/5603277.html</a></li>
<li><a href="http://student-lp.iteye.com/blog/2083170" target="_blank" rel="external">http://student-lp.iteye.com/blog/2083170</a></li>
</ul>
<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><blockquote>
<p>Java中常规的通信方式这里我就不说了，看一下Android的消息机制</p>
</blockquote>
<p>Java常规的通信方式传送门-&gt;<a href="http://ifeve.com/thread-signaling" target="_blank" rel="external">http://ifeve.com/thread-signaling</a></p>
<p><em>Android中的消息机制可以用于线程间通信也可用于在各个组件间通信,这里只总结一下怎么在线程间使用</em></p>
<p>消息机制中重要的API</p>
<ul>
<li>Message 线程间通信就是在传递消息，Message就是消息的载体。常用的有四个字段：arg1，arg2，what，obj。obj可以携带Object对象，其余三个可以携带整形数据</li>
<li>MessageQueue 消息队列，它主要用于存放所有通过Handler发送的消息（也就是一个个Message），这部分的消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</li>
<li>Looper 每个线程通过Handler发送的消息都保存在，MessageQueue中，Looper通过调用loop()的方法，就会进入到一个无限循环当中，然后每当发现MessageQueue中存在一条消息，就会将它取出，并传递到Handler的handleMessage()方法中。</li>
<li>Handler 发送消息，处理消息</li>
<li>Thread 线程 每个线程中只会有一个Looper对象。</li>
</ul>
<blockquote>
<p>运行机制</p>
</blockquote>
<p>在哪个Thread中创建Handler，默认情况下Handler就会获取哪个线程中的Looper（前提是Looper创建好了）；handler发送消息就是将消息发送到了自己持有的这个Looper对象里；<br>Looper内有一个MessageQueue，消息就存放在队列里，一旦Looper的<code>loop()</code>方法被调用就会开启无限循环模式，一直循环遍历这个队列，从中取Handler发送的消息，没有消息就阻塞；一旦有消息就唤醒线程取出来；<br>从MessageQueue中取出的消息，会调用本身target持有的handler实例来处理这个消息;</p>
<p><strong>综上所述，线程间通信handler就可以实现；</strong></p>
<blockquote>
<p>主线程给工作线程发消息</p>
</blockquote>
<p>想要在主线程给工作线程发消息，我们就得持有在工作线程中创建的handler；<br>而创建handler之前必须先初始化一下Looper对象；<br>handler创建完之后就开启Looper的无限循环来等待消息</p>
<p><strong>创建一个线程并创建一个handler</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Handler handlerA = null;</div><div class="line"></div><div class="line">   class ThreadA extends Thread implements Handler.Callback &#123;</div><div class="line"></div><div class="line">       public ThreadA() &#123;</div><div class="line">           super(&quot;ThreadA&quot;);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       @Override</div><div class="line">       public void run() &#123;</div><div class="line">           //创建此线程的Looper对象 ，一个线程只能有一个，所以此方法只能调用一次</div><div class="line">           Looper.prepare();</div><div class="line">           handlerA = new Handler(this);</div><div class="line">           //开始循环遍历</div><div class="line">           Looper.loop();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       @Override</div><div class="line">       public boolean handleMessage(Message msg) &#123;</div><div class="line">           switch (msg.what) &#123;</div><div class="line">               case 100:</div><div class="line">                   Log.e(&quot;handleMessage&quot;, Thread.currentThread().getName() + &quot;;src-&gt;&quot; + msg.obj);</div><div class="line">                   break;</div><div class="line">           &#125;</div><div class="line">           return false;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>使用handlerA发送消息</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//创建一个消息</div><div class="line">Message msg = new Message();</div><div class="line">msg.what = 100; //标识你这消息想要干啥</div><div class="line">msg.obj = Thread.currentThread().getName();</div><div class="line"></div><div class="line">/**</div><div class="line"> * 因为handler 里持有所在线程的Looper，所有handler发送的消息会在所在线程中执行</div><div class="line"> */</div><div class="line">//发送给A线程</div><div class="line">handlerA.sendMessage(msg);</div></pre></td></tr></table></figure>
<p><strong>看一个log</strong> 处理线程是ThreadA，消息来源是Main线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">08-23 16:26:02.609 E/handleMessage: ThreadA;src-&gt;main</div></pre></td></tr></table></figure></p>
<blockquote>
<p>工作线程发给主线程</p>
</blockquote>
<p>与上面的同理，想要给主线程发送消息，拿到主线程的handler就可以了；</p>
<p>因为点击事件是在UI线程中响应的，所以想让工作线程给主线程发送一个消息就麻烦一点，我这里为了测试做了个中转，先给B线程发送一个信号，B接到这个信号就给主线程发消息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class ThreadB extends Thread implements Handler.Callback &#123;</div><div class="line"></div><div class="line">    public ThreadB() &#123;</div><div class="line">        super(&quot;ThreadB&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        Looper.prepare();</div><div class="line">        handlerB = new Handler(this);</div><div class="line">        Looper.loop();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean handleMessage(Message msg) &#123;</div><div class="line">        switch (msg.what) &#123;</div><div class="line">            case 100:</div><div class="line">                Log.e(&quot;handleMessage&quot;, Thread.currentThread().getName() + &quot;;src-&gt;&quot; + msg.obj);</div><div class="line">                break;</div><div class="line">            case 101:   //给main发送一个消息</div><div class="line">                Message message = new Message();</div><div class="line">                message.what = 100;</div><div class="line">                message.obj = Thread.currentThread().getName();</div><div class="line">                handler.sendMessage(message);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>在主线程创建的handler </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Main 的handler</div><div class="line"> * 程序启动的时候就为Main线程创建了Looper</div><div class="line"> */</div><div class="line">Handler handler = new Handler(new Handler.Callback() &#123;</div><div class="line">    @Override</div><div class="line">    public boolean handleMessage(Message msg) &#123;</div><div class="line">        Log.e(&quot;handleMessage&quot;, Thread.currentThread().getName() + &quot;;src-&gt;&quot; + msg.obj);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>主线程的handler创建时没有提前创建Looper也没有调用Looper的<code>loop()</code>方法，是因为程序在启动的时候已经为主线程创建好了Looper，并且调用了<code>loop()</code>,一直在等待消息</em></p>
<blockquote>
<p>工作线程给工作线程发消息</p>
</blockquote>
<p>跟上面两个一样，想给哪个线程发消息就要先拿到哪个线程的handler；我这里就不贴代码了；</p>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="http://www.jianshu.com/p/02962454adf7" target="_blank" rel="external">http://www.jianshu.com/p/02962454adf7</a></li>
<li><a href="http://www.jianshu.com/p/7657f541c461" target="_blank" rel="external">http://www.jianshu.com/p/7657f541c461</a></li>
<li><a href="http://www.cnblogs.com/younghao/p/5116819.html" target="_blank" rel="external">http://www.cnblogs.com/younghao/p/5116819.html</a></li>
<li><a href="http://www.voidcn.com/article/p-pmejydob-bbs.html" target="_blank" rel="external">http://www.voidcn.com/article/p-pmejydob-bbs.html</a></li>
</ul>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote>
<p>为啥使用线程池</p>
</blockquote>
<ul>
<li>减少频繁创建销毁线程带来的开销</li>
<li>复用创建好的线程</li>
<li>对线程进行简单的管理</li>
</ul>
<p><strong><code>ExecutorService</code>是一个接口，定义了线程池的方法。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public interface ExecutorService extends Executor &#123;</div><div class="line"></div><div class="line">    void shutdown();//关闭线程池，不再接受新任务，当所有任务都执行完毕后，关闭线程池</div><div class="line"></div><div class="line">    List&lt;Runnable&gt; shutdownNow(); //关闭线程池，阻止等待任务启动并试图停止当前正在执行的任务，停止接收新的任务，返回处于等待的任务列表</div><div class="line"></div><div class="line">    boolean isShutdown(); //是否关闭</div><div class="line"></div><div class="line">    boolean isTerminated();//如果关闭后所有任务都已完成，则返回 true。注意，除非首先调用 shutdown 或 shutdownNow，否则 isTerminated 永不为 true。</div><div class="line"></div><div class="line">    boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;//等待（阻塞）直到关闭或最长等待时间或发生中断,timeout - 最长等待时间 ,unit - timeout 参数的时间单位  如果此执行程序终止，则返回 true；如果终止前超时期满，则返回 false </div><div class="line"></div><div class="line">    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; var1); //提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。该 Future 的 get 方法在成功完成时将会返回该任务的结果。</div><div class="line"></div><div class="line">    &lt;T&gt; Future&lt;T&gt; submit(Runnable var1, T var2); // 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功完成时将会返回给定的结果</div><div class="line"></div><div class="line">    Future&lt;?&gt; submit(Runnable var1);///提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功 完成时将会返回 null</div><div class="line"></div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1) throws InterruptedException; //执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 Future.isDone() 为 true。</div><div class="line"></div><div class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1, long var2, TimeUnit var4) throws InterruptedException; //执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 Future.isDone() 为 true。</div><div class="line"></div><div class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; var1) throws InterruptedException, ExecutionException; //执行给定的任务，如果在给定的超时期满前某个任务已成功完成（也就是未抛出异常），则返回其结果。一旦正常或异常返回后，则取消尚未完成的任务。</div><div class="line"></div><div class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; var1, long var2, TimeUnit var4) throws InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>ThreadPoolExecutor</code>具体实现了<code>ExecutorService</code>接口，提供了一系列的参数来配置线程池，熟悉<code>ThreadPoolExecutor</code>可自定义线程池。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public ThreadPoolExecutor(int corePoolSize,</div><div class="line">                          int maximumPoolSize,</div><div class="line">                          long keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                          ThreadFactory threadFactory,</div><div class="line">                          RejectedExecutionHandler handler) &#123;</div></pre></td></tr></table></figure>
<ul>
<li>corePoolSize 核心线程池数量</li>
<li>maximumPoolSize 最大线程数量</li>
<li>keepAliveTime  非核心线程闲置的超时时长，超过这个时长，非核心线程就会被回收,当allowCoreThreadTimeOut为true时，keepAliveTime同样作用于核心线程。</li>
<li>unit 时间单位，常用的为 TimeUnit.MILLISECONDS(毫秒)、TimeUnit.SECONDS（秒）、TimeUnit.MINUTES(分钟)，详情-》<a href="https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/TimeUnit.html" target="_blank" rel="external">https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/TimeUnit.html</a></li>
<li>workQueue 线程池中的任务队列，通过execute方法提交的Runnable对象会存储在这个参数中</li>
<li>threadFactory  线程工厂，为线程池提供创建线程的功能，是个接口，提供Thread newThread(Runnable r)方法；通常用默认的<code>Executors.defaultThreadFactory()</code>即可</li>
<li>handler 拒绝策略，当线程池无法执行新任务时，可能由于线程队列已满或无法成功执行任务，这时候 ThreadPoolExecutor会调用handler的 rejectedExecution的方法，默认会抛出RejectedExecutionException</li>
</ul>
<p>Android通过<code>Executors</code>为我们提供了几种线程池</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Executors.newCachedThreadPool()</td>
<td style="text-align:left">缓存线程池，线程数量不定，最大线程数为Integer.MAX_VALUE(相当于任意大),有新任务时会检查是否有空闲线程，没有则会创建线程，空闲线程超过60s会被回收，任何任务都会被立即执行，适合大量的耗时较少任务</td>
</tr>
<tr>
<td style="text-align:left">Executors.newFixedThreadPool(int nThreads)</td>
<td style="text-align:left">固定型线程池，线程数量固定，只有核心线程并且无超时机制，当所有线程都执行任务时，新任务进入队列等待。能够快速响应请求</td>
</tr>
<tr>
<td style="text-align:left">Executors.newScheduledThreadPool(int corePoolSize)</td>
<td style="text-align:left">调度型线程池，核心数量固定，非核心数量无限制，非核心线程一旦空闲立马回收。会根据Scheduled(任务列表)进行延迟执行，或者是进行周期性的执行.适用于一些周期性的工作</td>
</tr>
<tr>
<td style="text-align:left">EExecutors.newSingleThreadExecutor()</td>
<td style="text-align:left">单例线程池，只有一个核心线程，所有任务都在这个线程中串行执行，不需要处理线程同步问题，在任意的时间段内，线程池中只有一个线程在工作…</td>
</tr>
</tbody>
</table>
<p>在<code>ExecutorService</code>的方法中可以看到线程池除了可执行<code>Runnable</code>接口还可以执行<code>Callable&lt;V&gt;</code> 接口,并且可以通过<code>Future&lt;V&gt;</code>来感知线程状态和结果。</p>
<p>因为<code>Runnable</code>的返回值为<code>void</code> 无法获取执行完毕后的结果 ，所以才有了<code>Callable&lt;V&gt;</code>，可以返回一个结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public interface Callable&lt;V&gt; &#123;</div><div class="line">    /**</div><div class="line">     * Computes a result, or throws an exception if unable to do so.</div><div class="line">     *</div><div class="line">     * @return computed result</div><div class="line">     * @throws Exception if unable to compute a result</div><div class="line">     */</div><div class="line">    V call() throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>Future&lt;V&gt;</code> 定义了几种方法来感知线程状态和获取结果 ，可以理解为管理线程的。Future提供了三种功能：</p>
<ol>
<li>判断任务是否完成；</li>
<li>能够中断任务；</li>
<li>能够获取任务执行结果。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">public interface Future&lt;V&gt; &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 尝试取消执行此任务。 如果任务已经完成，已经被取消或由于某种其他原因而无法取消，则此尝试将失败。返回false。</div><div class="line">     * 当此方法调用时此任务尚未开始，则此任务不会被运行。返回true。</div><div class="line">     * 如果任务已经开始，则&#123;mayInterruptIfRunning&#125;参数确定执行此任务的线程是否应该中断，以试图停止该任务。</div><div class="line">     * 此方法返回后，对&#123;@link #isDone&#125;的后续调用将始终返回&#123;@code true&#125;。 </div><div class="line">     * 如果此方法返回&#123;@code true&#125;，则后续调用&#123;@link #isCancelled&#125;将始终返回&#123;@code true&#125;。</div><div class="line">     * @param mayInterruptIfRunning 线程在运行是否中断; 如果值为true表示中断正在进行的任务返回则返回true，值为false表示不中断返回false，如果任务无法取消，通常是因为它已经正常完成;</div><div class="line">     * &#123;@code true&#125; otherwise</div><div class="line">     */</div><div class="line">    boolean cancel(boolean mayInterruptIfRunning);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 如果在完成之前被取消 则返回 true，否则返回false</div><div class="line">     *</div><div class="line">     * @return &#123;@code true&#125; if this task was cancelled before it completed</div><div class="line">     */</div><div class="line">    boolean isCancelled();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 任务已经完成 返回 true。</div><div class="line">     * 任务被取消，异常，或者正常完成都会返回 true。此方法返回结果表示任务是否允许完毕</div><div class="line">     * @return &#123;@code true&#125; if this task completed</div><div class="line">     */</div><div class="line">    boolean isDone();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取任务完成的结果，如果任务没有执行完毕，则阻塞线程，直到拿到结果</div><div class="line">     * @return the computed result</div><div class="line">     * @throws CancellationException if the computation was cancelled</div><div class="line">     * @throws ExecutionException if the computation threw an</div><div class="line">     * exception</div><div class="line">     * @throws InterruptedException if the current thread was interrupted</div><div class="line">     * while waiting</div><div class="line">     */</div><div class="line">    V get() throws InterruptedException, ExecutionException;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null</div><div class="line">     * @param timeout 指定等待时间</div><div class="line">     * @param unit 等待时间单位</div><div class="line">     * @return the 执行结果</div><div class="line">     * @throws CancellationException if the computation was cancelled</div><div class="line">     * @throws ExecutionException if the computation threw an</div><div class="line">     * exception</div><div class="line">     * @throws InterruptedException if the current thread was interrupted</div><div class="line">     * while waiting</div><div class="line">     * @throws TimeoutException if the wait timed out</div><div class="line">     */</div><div class="line">    V get(long timeout, TimeUnit unit)</div><div class="line">        throws InterruptedException, ExecutionException, TimeoutException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为<code>Future</code>只是一个接口，所以是无法直接用来创建对象使用的，因此就有了下面的<code>FutureTask</code>。</p>
<p>可以看出RunnableFuture继承了Runnable接口和Future接口，而FutureTask实现了RunnableFuture接口。<br>所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt; &#123;&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; &#123;</div><div class="line"></div><div class="line">    void run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ScheduledExecutorService</code> 调度线程池 ，扩展了<code>ExecutorService</code>,增加了几个方法用来执行周期性或者定时的任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public interface ScheduledExecutorService extends ExecutorService &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 在给定延迟时间后执行一个单次的操作</div><div class="line">     * @param command 要执行的操作</div><div class="line">     * @param delay 延迟时间</div><div class="line">     * @param unit 延迟时间单位</div><div class="line">     * @return a ScheduledFuture 代表一个未完成的任务，可以通过get()获取null，还可以通过getDelay()获取剩余延迟时间</div><div class="line">     * @throws RejectedExecutionException if the task cannot be</div><div class="line">     *         scheduled for execution</div><div class="line">     * @throws NullPointerException if command is null</div><div class="line">     */</div><div class="line">    public ScheduledFuture&lt;?&gt; schedule(Runnable command,</div><div class="line">                                       long delay, TimeUnit unit);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 在给定延迟时间后执行一个单次的 操作</div><div class="line">     * @param callable 单次操作</div><div class="line">     * @param delay 延迟时间</div><div class="line">     * @param unit 延迟时间单位</div><div class="line">     * @param &lt;V&gt; 返回结果类型</div><div class="line">     * @return a ScheduledFuture 可以通过get() 拿到结果，可以通过getDelay() 获取剩余延迟时间；</div><div class="line">     * @throws RejectedExecutionException if the task cannot be</div><div class="line">     *         scheduled for execution</div><div class="line">     * @throws NullPointerException if callable is null</div><div class="line">     */</div><div class="line">    public &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable,</div><div class="line">                                           long delay, TimeUnit unit);</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；</div><div class="line">     *  也就是将在 initialDelay 后开始执行，然后在initialDelay+period 后执行，</div><div class="line">     *  接着在 initialDelay + 2 * period 后执行，依此类推。</div><div class="line">     * @param command 要执行的操作</div><div class="line">     * @param initialDelay 首次执行延迟时间</div><div class="line">     * @param period 执行周期时间</div><div class="line">     * @param unit 时间单位</div><div class="line">     * @return a ScheduledFuture representing pending completion of</div><div class="line">     *         the series of repeated tasks.  The future&apos;s &#123;@link</div><div class="line">     *         Future#get() get()&#125; method will never return normally,</div><div class="line">     *         and will throw an exception upon task cancellation or</div><div class="line">     *         abnormal termination of a task execution.</div><div class="line">     * @throws RejectedExecutionException if the task cannot be</div><div class="line">     *         scheduled for execution</div><div class="line">     * @throws NullPointerException if command is null</div><div class="line">     * @throws IllegalArgumentException if period less than or equal to zero</div><div class="line">     */</div><div class="line">    public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,</div><div class="line">                                                  long initialDelay,</div><div class="line">                                                  long period,</div><div class="line">                                                  TimeUnit unit);</div><div class="line"></div><div class="line">    /**</div><div class="line">     *  创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。</div><div class="line">     * @param command  要执行的定期任务</div><div class="line">     * @param initialDelay 首次执行的延迟时间</div><div class="line">     * @param delay 再上一次任务执行完毕后下次要执行的延迟时间</div><div class="line">     * @param unit 时间单位</div><div class="line">     * @return a ScheduledFuture representing pending completion of</div><div class="line">     *         the series of repeated tasks.  The future&apos;s &#123;@link</div><div class="line">     *         Future#get() get()&#125; method will never return normally,</div><div class="line">     *         and will throw an exception upon task cancellation or</div><div class="line">     *         abnormal termination of a task execution.</div><div class="line">     * @throws RejectedExecutionException if the task cannot be</div><div class="line">     *         scheduled for execution</div><div class="line">     * @throws NullPointerException if command is null</div><div class="line">     * @throws IllegalArgumentException if delay less than or equal to zero</div><div class="line">     */</div><div class="line">    public ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,</div><div class="line">                                                     long initialDelay,</div><div class="line">                                                     long delay,</div><div class="line">                                                     TimeUnit unit);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>关于几种线程池的使用，代码都放在我的GitHub了。</em></p>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService.html" target="_blank" rel="external">https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService.html</a></li>
<li><a href="https://tom510230.gitbooks.io/android_ka_fa_yi_shu_tan_suo/content/chapter11.html" target="_blank" rel="external">https://tom510230.gitbooks.io/android_ka_fa_yi_shu_tan_suo/content/chapter11.html</a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/5607734.html" target="_blank" rel="external">http://www.cnblogs.com/whoislcj/p/5607734.html</a></li>
<li><a href="http://blog.csdn.net/u010687392/article/details/49850803" target="_blank" rel="external">http://blog.csdn.net/u010687392/article/details/49850803</a></li>
<li><a href="http://www.cnblogs.com/RGogoing/p/4766971.html" target="_blank" rel="external">http://www.cnblogs.com/RGogoing/p/4766971.html</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3949310.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3949310.html</a></li>
</ul>
<blockquote>
<p>关于本次的Demo <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/thread" target="_blank" rel="external">https://github.com/sky-mxc/AndroidDemo/tree/master/thread</a></p>
</blockquote>
<p><strong>没有涉及到的地方，欢迎补充。错误的地方，感谢指正</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus3 学习笔记]]></title>
      <url>http://blog.skymxc.com/2017/08/08/EventBus/</url>
      <content type="html"><![CDATA[<h1 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h1><p><img src="\images\Android\EventBus\EventBus.png" alt="EventBus学习笔记"></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>EventBus</strong> 是一款针对Android优化的发布/订阅(publish/subscribe)事件总线。主要功能是替代Intent，Handler，Broadcast在Fragment，Activity，Service，线程之间传递消息。简化了应用程序内各组件，组件与后台线程间的通信。优点代码简洁，以及将发送者和订阅者解耦。</p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p><strong>使用步骤</strong></p>
<ul>
<li>添加依赖</li>
<li>定义事件</li>
<li>注册/取消订阅</li>
<li>发送事件</li>
</ul>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;org.greenrobot:eventbus:3.0.0&apos;</div></pre></td></tr></table></figure>
<h2 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h2><blockquote>
<p>这里的事件是一个任意的POJO 没有任何要求</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MessageEvent &#123;</div><div class="line"></div><div class="line">    public final String message;</div><div class="line"></div><div class="line">    public MessageEvent(String message) &#123;</div><div class="line">        this.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><blockquote>
<p>准备订阅者</p>
</blockquote>
<p>使用注解 <strong>@Subscribe</strong> ，在3.0中对方法名称没有任何要求 当发送事件时EventBus会调用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// This method will be called when a MessageEvent is posted (in the UI thread for Toast)</div><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line">public void onMessageEvent(MessageEvent event) &#123;</div><div class="line">    Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// This method will be called when a SomeOtherEvent is posted</div><div class="line">@Subscribe</div><div class="line">public void handleSomethingElse(SomeOtherEvent event) &#123;</div><div class="line">    doSomethingWith(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注册/取消订阅</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onStart() &#123;</div><div class="line">    super.onStart();</div><div class="line">    EventBus.getDefault().register(this);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onStop() &#123;</div><div class="line">    EventBus.getDefault().unregister(this);</div><div class="line">    super.onStop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>发送事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().post(new MessageEvent(&quot;Hello everyone!&quot;));</div></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/how-to-get-started/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/how-to-get-started/</a></p>
<h1 id="交付线程-Delivery-Threads-ThreadMode"><a href="#交付线程-Delivery-Threads-ThreadMode" class="headerlink" title="交付线程 Delivery Threads (ThreadMode)"></a>交付线程 Delivery Threads (ThreadMode)</h1><p>EventBus 通过 threadMode 决定订阅事件 在哪个线程处理，threadMode的取值 有四个枚举类型</p>
<ul>
<li>POSTING</li>
<li>MAIN</li>
<li>BACKGROUND</li>
<li>ASYNC</li>
</ul>
<blockquote>
<p>POSTING。 默认值，将会与发送线程一致，发送事件在哪个线程，订阅者就在哪个线程处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// Called in the same thread (default)</div><div class="line">// ThreadMode is optional here</div><div class="line">@Subscribe(threadMode = ThreadMode.POSTING)</div><div class="line">public void onMessage(MessageEvent event) &#123;</div><div class="line">    log(event.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>MAIN 。 UI线程，订阅者将会在UI线程处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// Called in Android UI&apos;s main thread</div><div class="line">@Subscribe(threadMode = ThreadMode.MAIN)</div><div class="line">public void onMessage(MessageEvent event) &#123;</div><div class="line">textField.setText(event.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>BACKGROUND 。 后台线程处理，如果发送者在UI线程发出就会另开线程处理，否则就直接在同一线程处理，不会在UI线程处理就对了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// Called in the background thread</div><div class="line">@Subscribe(threadMode = ThreadMode.BACKGROUND)</div><div class="line">public void onMessage(MessageEvent event)&#123;</div><div class="line">    saveToDisk(event.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ASYNC 。异步，订阅者将会另开一个线程处理，无论发送者从哪个线程发出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// Called in a separate thread</div><div class="line">@Subscribe(threadMode = ThreadMode.ASYNC)</div><div class="line">public void onMessage(MessageEvent event)&#123;</div><div class="line">    backend.send(event.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/</a></p>
<h1 id="优先级及事件取消-Priorities-and-Event-Cancellation"><a href="#优先级及事件取消-Priorities-and-Event-Cancellation" class="headerlink" title="优先级及事件取消 Priorities and Event Cancellation"></a>优先级及事件取消 Priorities and Event Cancellation</h1><blockquote>
<p>优先级</p>
</blockquote>
<p>EventBus 通过 <code>priority</code> 属性决定优先级 ，默认0 值越高 优先级越高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Subscribe(priority = 1);</div><div class="line">public void onEvent(MessageEvent event) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>事件取消</p>
</blockquote>
<p> EventBus 通过 <code>cancelEventDelivery(Object event)</code> 取消事件，这可是优先级高的特权了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// Called in the same thread (default)</div><div class="line">@Subscribe</div><div class="line">public void onEvent(MessageEvent event)&#123;</div><div class="line">    // Process the event</div><div class="line">    ...</div><div class="line">    // Prevent delivery to other subscribers</div><div class="line">    EventBus.getDefault().cancelEventDelivery(event) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/priorities-and-event-cancellation/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/priorities-and-event-cancellation/</a></p>
<h1 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置 Configuration"></a>配置 Configuration</h1><p>一般我们使用 <code>EventBus.getDefault()</code> 得到EventBus实例，<br>如果有别的需求可以使用 EventBusBuilder 类构建EventBus，例如 关闭log</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">EventBus eventBus = EventBus.builder()</div><div class="line">    .logNoSubscriberMessages(false)</div><div class="line">    .sendNoSubscriberEvent(false)</div><div class="line">    .build();</div></pre></td></tr></table></figure>
<p>或者说 当订阅者抛出异常时 发送 <code>SubscriberExceptionEvent</code> 事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus eventBus = EventBus.builder().throwSubscriberException(true).build();</div></pre></td></tr></table></figure>
<p>默认情况下 订阅者抛出异常EventBus会捕获异常并发一个 <code>SubscriberExceptionEvent</code> 事件</p>
<p>我们可以通过 <code>installDefaultEventBus()</code>方法我们的配置放到默认实例上；但是要在使用 <code>EventBus.getDefault()</code>之前</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.builder().throwSubscriberException(BuildConfig.DEBUG).installDefaultEventBus();</div></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/configuration/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/configuration/</a></p>
<h1 id="粘性事件-Sticky-Events"><a href="#粘性事件-Sticky-Events" class="headerlink" title="粘性事件 Sticky Events"></a>粘性事件 Sticky Events</h1><p><em>对于一般的事件，我们首先要注册订阅者，然后发送事件，订阅者才能收到事件。如果先发送事件，再订阅此事件，将收不到事件，而粘性事件恰恰相反，粘性事件是可以先发送，然后再注册订阅者，后注册的订阅者依然可以接收到事件（ps：在发送前注册的也可以收到）</em></p>
<blockquote>
<p>先发送粘性事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus.getDefault().postSticky(new MessageEvent(&quot;Hello everyone!&quot;));</div></pre></td></tr></table></figure>
<blockquote>
<p>再启动一个Activity 仍然可以接受到之前发送的事件</p>
</blockquote>
<p>属性 sticky 的取值决定是否是粘性事件</p>
<p><em>ps:你不注册的话，啥事件也是收不到的</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onStart() &#123;</div><div class="line">    super.onStart();</div><div class="line">    EventBus.getDefault().register(this);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// UI updates must run on MainThread</div><div class="line">@Subscribe(sticky = true, threadMode = ThreadMode.MAIN)</div><div class="line">public void onEvent(MessageEvent event) &#123;   </div><div class="line">    textField.setText(event.message);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onStop() &#123;</div><div class="line">    EventBus.getDefault().unregister(this);    </div><div class="line">    super.onStop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>移除粘性事件</p>
</blockquote>
<p>如果你不移除粘性事件，那么它将一直存在，直到你程序被杀死</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MessageEvent stickyEvent = EventBus.getDefault().getStickyEvent(MessageEvent.class);</div><div class="line">// Better check that an event was actually posted before</div><div class="line">if(stickyEvent != null) &#123;</div><div class="line">    // &quot;Consume&quot; the sticky event</div><div class="line">    EventBus.getDefault().removeStickyEvent(stickyEvent);</div><div class="line">    // Now do something with it</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官网传送门 <a href="http://greenrobot.org/eventbus/documentation/configuration/sticky-events/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/configuration/sticky-events/</a></p>
<h1 id="订阅索引-Subscriber-Index"><a href="#订阅索引-Subscriber-Index" class="headerlink" title="订阅索引 Subscriber Index"></a>订阅索引 Subscriber Index</h1><p>订阅索引是3.0中的新特性，是可选项。</p>
<p>在3.0中由于使用了注解，比起使用反射来遍历方法的2.4版本逊色不少。但开启索引后性能远远超出旧版本。<br>看作者放出的图</p>
<p><img src="\images\Android\EventBus\index.png" alt="EventBus性能对比"></p>
<p>既然使用索引后那么叼，那就看看怎么使用索引</p>
<blockquote>
<p>注意项</p>
</blockquote>
<ul>
<li>只有@Subscribe 可以被索引，必须是 public修饰</li>
<li>不能再内部类中</li>
</ul>
<blockquote>
<p>使用 apt插件的方式   </p>
</blockquote>
<ul>
<li>顶级 build.gradle 中加入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>再module的build.gradle 中使用 apt插件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line">apply plugin: &apos;com.neenbedankt.android-apt&apos;</div></pre></td></tr></table></figure>
<ul>
<li>module的build.gradle 添加依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;org.greenrobot:eventbus:3.0.0&apos;</div><div class="line">    apt &apos;org.greenrobot:eventbus-annotation-processor:3.0.1&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>module 的 build.gradle 配置参数 ，这里写自己的包名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">apt &#123;</div><div class="line">    arguments &#123;</div><div class="line">        eventBusIndex &quot;com.example.myapp.MyEventBusIndex&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用索引</p>
</blockquote>
<p>编译过后 会生成 MyEventBusIndex类，没有生成就多编译几遍</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EventBus eventBus = EventBus.builder().addIndex(new MyEventBusIndex()).build();</div></pre></td></tr></table></figure>
<p> 将索引配置到默认实例中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventBus.builder().addIndex(new MyEventBusIndex()).installDefaultEventBus();</div><div class="line">// Now the default instance uses the given index. Use it like this:</div><div class="line">EventBus eventBus = EventBus.getDefault();</div></pre></td></tr></table></figure>
<p>还可以添加多个不同的library中索引</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">EventBus eventBus = EventBus.builder()</div><div class="line">    .addIndex(new MyEventBusAppIndex())</div><div class="line">    .addIndex(new MyEventBusLibIndex()).build();</div></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/subscriber-index/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/subscriber-index/</a></p>
<h1 id="混淆-ProGuard"><a href="#混淆-ProGuard" class="headerlink" title="混淆 ProGuard"></a>混淆 ProGuard</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-keepattributes *Annotation*</div><div class="line">-keepclassmembers class ** &#123;</div><div class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</div><div class="line"></div><div class="line"># Only required if you use AsyncExecutor</div><div class="line">-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</div><div class="line">    &lt;init&gt;(java.lang.Throwable);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/proguard/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/proguard/</a></p>
<h1 id="AsyncExecutor"><a href="#AsyncExecutor" class="headerlink" title="AsyncExecutor"></a>AsyncExecutor</h1><p>懒得翻译了，直接看吧<br><a href="http://greenrobot.org/eventbus/documentation/asyncexecutor/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/asyncexecutor/</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><em>感谢各位大神的分享</em></p>
<ul>
<li><a href="https://juejin.im/entry/570ae5668ac247004c3128a4" target="_blank" rel="external">https://juejin.im/entry/570ae5668ac247004c3128a4</a></li>
<li><a href="https://dev.qq.com/topic/59190e9ae315487c53deeca3" target="_blank" rel="external">https://dev.qq.com/topic/59190e9ae315487c53deeca3</a></li>
<li><a href="http://www.jianshu.com/p/4a3d953d1319" target="_blank" rel="external">http://www.jianshu.com/p/4a3d953d1319</a></li>
</ul>
<p>Demo地址： <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/event" target="_blank" rel="external">https://github.com/sky-mxc/AndroidDemo/tree/master/event</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewDragHelper使用笔记及侧滑菜单实践]]></title>
      <url>http://blog.skymxc.com/2017/07/29/android-ViewDragHelper/</url>
      <content type="html"><![CDATA[<h2 id="ViewDragHelper"><a href="#ViewDragHelper" class="headerlink" title="ViewDragHelper"></a>ViewDragHelper</h2><blockquote>
<p>一个拖拽实现的帮助类，存在于v4包中，对于实现简单的拖拽简直不要太简单；再也不用去重写onTouch()了；</p>
</blockquote>
<p>官网API <a href="https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html" target="_blank" rel="external">https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html</a></p>
<p>该类主要用于拖拽view的实现，例如侧滑菜单时候的左右拖拽或者上下拖拽</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><blockquote>
<p> 创建 ViewDragHelper实例</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ViewDragHelper create (ViewGroup forParent, </div><div class="line">               float sensitivity, </div><div class="line">               ViewDragHelper.Callback cb)</div></pre></td></tr></table></figure>
<ul>
<li>参数1 要使用DragHelper的布局</li>
<li>参数2 灵敏度，值越大越灵敏，1.0属于正常</li>
<li>参数3 回调，这里是主要阵地</li>
</ul>
<blockquote>
<p>事件拦截于处理</p>
</blockquote>
<p>重写布局的 <code>onInterceptTouchEvent()</code>方法 ，ViewDragHelper会自行判断是否需要拦截事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</div><div class="line">    return mDragHelper.shouldInterceptTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重写布局的 <code>onTouchEvent()</code> 处理拦截的事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">    mDragHelper.processTouchEvent(event);</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果需要滑动动画 重写 <code>computeScroll()</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 因为要在 DragHelper的中使用动画</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public void computeScroll() &#123;</div><div class="line">    super.computeScroll();</div><div class="line">    if (mDragHelper.continueSettling(true)) &#123;</div><div class="line">        ViewCompat.postInvalidateOnAnimation(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>前面在创建ViewDragHelper的时候用到了一个Callback，其实主要是在这里添加自己的逻辑，主要介绍一下这个类</p>
<p>这是一个抽象类，我们必须要实现的方法只有一个<code>tryCaptureView()</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public abstract boolean tryCaptureView(View child, int pointerId);</div></pre></td></tr></table></figure>
<ul>
<li>参数1 准备捕获的子view</li>
<li>参数2 准备捕获的指针ID</li>
</ul>
<p>该方法的返回值决定了ViewDragHelper是否要捕获这个view；如果返回false就不捕获；</p>
<p>说的一下我的思路吧，我在父布局中持有了需要拖拽处理的子view的引用，如果捕获的view是我持有的view就返回true，捕获这次事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 决定是否捕获此view</div><div class="line"> * 这里自由决定</div><div class="line"> * @param child 待捕获的子元素</div><div class="line"> * @param pointerId</div><div class="line"> * @return 是否捕获</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public boolean tryCaptureView(View child, int pointerId) &#123;</div><div class="line">    return child==mContentView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果你需要处理水平拖拽，重写 <code>clampViewPositionHorizontal()</code> 即可，该方法返回值就是view拖拽后的坐标值;默认是不处理的；</p>
</blockquote>
<p>下面是我的实现，为了防止拖拽出屏幕做了简单处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 水平 拖动</div><div class="line"> * @param child 拖动的元素</div><div class="line"> * @param left 将要去往的位置</div><div class="line"> * @param dx 拖动了的距离</div><div class="line"> * @return 新位置</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public int clampViewPositionHorizontal(View child, int left, int dx) &#123;</div><div class="line">    //限制在容器内</div><div class="line">    int leftBound = getPaddingLeft();</div><div class="line">    int rightBound = getWidth() - mContentView.getWidth();</div><div class="line">    int newLeft = Math.min(Math.max(left,leftBound),rightBound);</div><div class="line">    return newLeft;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>如果需要处理垂直拖拽，重写 <code>clampViewPositionVertical()</code> ；该方法和上面的那个方法一样，返回值就是view拖拽后的坐标值；默认不处理；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 垂直拖动</div><div class="line"> * @param child</div><div class="line"> * @param top</div><div class="line"> * @param dy</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public int clampViewPositionVertical(View child, int top, int dy) &#123;</div><div class="line">    int topBound = getPaddingTop();</div><div class="line">    int bottomBound = getHeight() - mContentView.getHeight();</div><div class="line">    int newTop = Math.min(Math.max(top,topBound),bottomBound);</div><div class="line">    return newTop;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>可以从<code>onViewDragStateChanged()</code>方法中得到ViewDragHelper的状态变化</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onViewDragStateChanged(int state) &#123;</div><div class="line">    switch (state)&#123;</div><div class="line">        case ViewDragHelper.STATE_IDLE:</div><div class="line">            Log.e(&quot;onViewDragStateChanged&quot;,&quot;state--&gt;STATE_IDLE&quot;+state);</div><div class="line">            break;</div><div class="line">        case ViewDragHelper.STATE_DRAGGING:</div><div class="line">            Log.e(&quot;onViewDragStateChanged&quot;,&quot;state--&gt;STATE_DRAGGING&quot;+state);</div><div class="line">            break;</div><div class="line">        case ViewDragHelper.STATE_SETTLING:</div><div class="line">            Log.e(&quot;onViewDragStateChanged&quot;,&quot;state--&gt;STATE_SETTLING&quot;+state);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当子view的位置发生变化会触发 <code>onViewPositionChanged()</code> 方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 当 view 的 position发生改变时触发</div><div class="line"> * @param changedView 拖动的view</div><div class="line"> * @param left 新位置 X轴</div><div class="line"> * @param top 新位置 Y轴</div><div class="line"> * @param dx 从上次位置 到这次位置移动的距离 X轴</div><div class="line"> * @param dy 从上次位置 到这次位置移动的距离 Y轴</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>拖动动作停止，可以从 <code>onViewReleased()</code> 中得到速度信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * </div><div class="line"> * @param releasedChild</div><div class="line"> * @param xvel x 轴速度  每秒移动的像素值</div><div class="line"> * @param yvel Y 轴速度 每秒移动的像素值</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public void onViewReleased(View releasedChild, float xvel, float yvel) &#123;</div><div class="line">    Log.e(&quot;onViewReleased&quot;,&quot;xvel--&gt;&quot;+xvel+&quot;;yvel--&gt;&quot;+yvel);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>我用到的就这些，就介绍这些吧 ，<br>实现了一个可以自由拖动的layout 看Demo中的DragLayout ； <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/drag" target="_blank" rel="external">https://github.com/sky-mxc/AndroidDemo/tree/master/drag</a></p>
</blockquote>
<h2 id="侧滑菜单实现"><a href="#侧滑菜单实现" class="headerlink" title="侧滑菜单实现"></a>侧滑菜单实现</h2><p>以前写过一个侧滑菜单，思路是重写 ListView或者RecycleView 的onTouch事件，判断根据坐标点判断找到子view，然后让子view滑动，从而实现的侧滑。感觉比较麻烦。今天说一下另外一个思路，</p>
<blockquote>
<p>写一个通用的布局，例如一个LineaLayout,里面定义两个Group，一个是item内容，另一个是Item 菜单；在LineaLayout内部定义一个ViewDragHelper来处理拖动事件。ViewDragHelper会将拖动事件处理好，我们只需要在callback中处理简单的逻辑就好。</p>
<p>写一个SwipeLayout 继承自 LineaLayout; 在构造时就创建好 DragHelper</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public SwipeItemLayout(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">    super(context, attrs, defStyleAttr);</div><div class="line">    mDragHelper = ViewDragHelper.create(this, 1.0f, new SwipeItemDragHelper());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>加载完毕布局之后，拿到两个item,一个内容，一个菜单</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onFinishInflate() &#123;</div><div class="line">    super.onFinishInflate();</div><div class="line">    mContentView = getChildAt(0);</div><div class="line">    mActionView = getChildAt(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>事件交由 DragHelper处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</div><div class="line">    return mDragHelper.shouldInterceptTouchEvent(ev);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">    mDragHelper.processTouchEvent(event);</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>要在callback中使用动画</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 因为要在 DragHelper的中使用动画</div><div class="line"> */</div><div class="line">@Override</div><div class="line">public void computeScroll() &#123;</div><div class="line">    super.computeScroll();</div><div class="line">    if (mDragHelper.continueSettling(true)) &#123;</div><div class="line">        ViewCompat.postInvalidateOnAnimation(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>主要逻辑就在callback中处理</p>
<p>tryCaptureView() 如果拖动的时内容或者菜单就捕获此次多动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean tryCaptureView(View child, int pointerId) &#123;</div><div class="line">    return child == mContentView || child == mActionView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>因为实现的是侧滑菜单，这里只处理 水平拖动就好，注释写的很清楚了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Override</div><div class="line">public int clampViewPositionHorizontal(View child, int left, int dx) &#123;</div><div class="line">    dragDx+=dx;</div><div class="line">    if (child == mContentView) &#123;</div><div class="line">        /**</div><div class="line">         * 这个位置 的范围应该是在 0和 -dragDistance之间；最大是0；最小是 -dragDistance</div><div class="line">         */</div><div class="line">        int leftBound = getPaddingLeft();</div><div class="line">        int minLeft = -leftBound - mDragDistance;</div><div class="line">        int newLeft = Math.min(Math.max(minLeft, left), 0);</div><div class="line">        return newLeft;</div><div class="line">    &#125; else &#123;</div><div class="line">        /**</div><div class="line">         * 这个view的位置范围应该是在 父布局的宽度-actionView的宽和父布局的宽度之间；</div><div class="line">         */</div><div class="line">        int leftBound = getPaddingLeft();</div><div class="line">        int minLeft = getWidth() - leftBound - mActionView.getWidth();</div><div class="line">        int newLeft = Math.min(Math.max(minLeft, left), getWidth());</div><div class="line">        return newLeft;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当view 被拖动的时候，另一个view跟随被拖动的view一起移动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) &#123;</div><div class="line">    //同时移动</div><div class="line">    if (changedView == mContentView) &#123;</div><div class="line">        mActionView.offsetLeftAndRight(dx);</div><div class="line">    &#125; else &#123;</div><div class="line">        mContentView.offsetLeftAndRight(dx);</div><div class="line">    &#125;</div><div class="line">    invalidate();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当滑动结束后，可以根据滑动的速度或者滑动的距离来决定是否要打开或者关闭菜单;具体思路 注释已经很清楚了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onViewReleased(View releasedChild, float xvel, float yvel) &#123;</div><div class="line">    /**</div><div class="line">     * 这里的速度 是这样计算的  每秒的拖动的像素 值</div><div class="line">     * 速度判断</div><div class="line">     *  如果向→滑动 速度肯定是 正数；</div><div class="line">     *  如果向←滑动 速度肯定是 负数</div><div class="line">     * 如果 拖动距离 是 actionView的 ¼ 就允许打开或关闭</div><div class="line">     */</div><div class="line">    //根据速度决定是否打开</div><div class="line">    boolean settleToOpen = false;</div><div class="line">    float realVel = Math.abs(xvel);</div><div class="line">    int realDragX = Math.abs(dragDx);</div><div class="line">    if (realVel &gt; AUTO_OPEN_SPEED_LIMIT) &#123; //根据速度判断</div><div class="line">        if (xvel &gt; 0) &#123; //右滑</div><div class="line">            settleToOpen = false;</div><div class="line">        &#125; else &#123;  //左滑</div><div class="line">            settleToOpen = true;</div><div class="line">        &#125;</div><div class="line">    &#125;else if(realDragX&gt; mDragDistance/4)&#123;  //根据拖动距离判断</div><div class="line">        if (dragDx&gt;0)&#123; //右滑</div><div class="line">            settleToOpen = false;</div><div class="line">        &#125;else&#123;</div><div class="line">            settleToOpen = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    isOpen = settleToOpen;</div><div class="line">    int settleDestX = isOpen ? -mDragDistance : 0;</div><div class="line">    Log.e(&quot;onViewReleased&quot;, &quot;settleToOpen-&gt;&quot; + settleToOpen + &quot;;destX-&gt;&quot; + settleDestX + &quot;;xvel-&gt;&quot; + xvel + &quot;;dragDx--&gt;&quot; + dragDx);</div><div class="line">    mDragHelper.smoothSlideViewTo(mContentView, settleDestX, 0);</div><div class="line">    ViewCompat.postInvalidateOnAnimation(SwipeItemLayout.this);</div><div class="line">    dragDx = 0;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>为了滑动更加灵敏，在左右滑动item时，禁止父布局的上下滑动</p>
</blockquote>
<p>在onTouch中 判断滑动距离，超过一定范围就不让父布局处理；<code>getParent().requestDisallowInterceptTouchEvent(true);</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">    mDragHelper.processTouchEvent(event);</div><div class="line">    switch (event.getAction()) &#123;</div><div class="line">        case MotionEvent.ACTION_DOWN:</div><div class="line">            x = event.getRawX();</div><div class="line">            break;</div><div class="line">        case MotionEvent.ACTION_MOVE:</div><div class="line">            float gap = event.getRawX() - x;</div><div class="line">            int sl = ViewConfiguration.get(getContext()).getScaledTouchSlop();</div><div class="line">            if (Math.abs(gap) &gt; sl) &#123;</div><div class="line">                getParent().requestDisallowInterceptTouchEvent(true);</div><div class="line">            &#125;</div><div class="line">            break;</div><div class="line">        case MotionEvent.ACTION_UP:</div><div class="line">        case MotionEvent.ACTION_CANCEL:</div><div class="line">            x = 0;</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>贴一下代码，完整Demo看GitHub  <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/drag" target="_blank" rel="external">https://github.com/sky-mxc/AndroidDemo/tree/master/drag</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by mxc on 2017/7/23.</div><div class="line"> * description:</div><div class="line"> */</div><div class="line"></div><div class="line">public class SwipeItemLayout extends LinearLayout &#123;</div><div class="line">    private final double AUTO_OPEN_SPEED_LIMIT = 500.0;</div><div class="line">    private View mActionView;</div><div class="line">    private View mContentView;</div><div class="line">    private int mDragDistance;</div><div class="line">    private ViewDragHelper mDragHelper;</div><div class="line">    private boolean isOpen;</div><div class="line"></div><div class="line"></div><div class="line">    public SwipeItemLayout(Context context) &#123;</div><div class="line">        this(context, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public SwipeItemLayout(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        this(context, attrs, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public SwipeItemLayout(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        mDragHelper = ViewDragHelper.create(this, 1.0f, new SwipeItemDragHelper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onFinishInflate() &#123;</div><div class="line">        super.onFinishInflate();</div><div class="line">        mContentView = getChildAt(0);</div><div class="line">        mActionView = getChildAt(1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        mDragDistance = mActionView.getMeasuredWidth();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</div><div class="line">        return mDragHelper.shouldInterceptTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    float x = 0;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        mDragHelper.processTouchEvent(event);</div><div class="line">        switch (event.getAction()) &#123;</div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                x = event.getRawX();</div><div class="line">                break;</div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                float gap = event.getRawX() - x;</div><div class="line">                int sl = ViewConfiguration.get(getContext()).getScaledTouchSlop();</div><div class="line">                if (Math.abs(gap) &gt; sl) &#123;</div><div class="line">                    getParent().requestDisallowInterceptTouchEvent(true);</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">            case MotionEvent.ACTION_CANCEL:</div><div class="line">                x = 0;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * 因为要在 DragHelper的中使用动画</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void computeScroll() &#123;</div><div class="line">        super.computeScroll();</div><div class="line">        if (mDragHelper.continueSettling(true)) &#123;</div><div class="line">            ViewCompat.postInvalidateOnAnimation(this);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class SwipeItemDragHelper extends ViewDragHelper.Callback &#123;</div><div class="line"></div><div class="line">        private int dragDx;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean tryCaptureView(View child, int pointerId) &#123;</div><div class="line">            return child == mContentView || child == mActionView;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public int clampViewPositionHorizontal(View child, int left, int dx) &#123;</div><div class="line">            dragDx+=dx;</div><div class="line">            if (child == mContentView) &#123;</div><div class="line">                /**</div><div class="line">                 * 这个位置 的范围应该是在 0和 -dragDistance之间；最大是0；最小是 -dragDistance</div><div class="line">                 */</div><div class="line">                int leftBound = getPaddingLeft();</div><div class="line">                int minLeft = -leftBound - mDragDistance;</div><div class="line">                int newLeft = Math.min(Math.max(minLeft, left), 0);</div><div class="line">                return newLeft;</div><div class="line">            &#125; else &#123;</div><div class="line">                /**</div><div class="line">                 * 这个view的位置范围应该是在 父布局的宽度-actionView的宽和父布局的宽度之间；</div><div class="line">                 */</div><div class="line">                int leftBound = getPaddingLeft();</div><div class="line">                int minLeft = getWidth() - leftBound - mActionView.getWidth();</div><div class="line">                int newLeft = Math.min(Math.max(minLeft, left), getWidth());</div><div class="line">                return newLeft;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) &#123;</div><div class="line">            //同时移动</div><div class="line">            if (changedView == mContentView) &#123;</div><div class="line">                mActionView.offsetLeftAndRight(dx);</div><div class="line">            &#125; else &#123;</div><div class="line">                mContentView.offsetLeftAndRight(dx);</div><div class="line">            &#125;</div><div class="line">            invalidate();</div><div class="line">//            Log.e(&quot;onViewPosition&quot;, &quot;dx--&gt;&quot; + dx);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onViewReleased(View releasedChild, float xvel, float yvel) &#123;</div><div class="line">            /**</div><div class="line">             * 这里的速度 是这样计算的  每秒的拖动的像素 值</div><div class="line">             * 速度判断</div><div class="line">             *  如果向→滑动 速度肯定是 正数；</div><div class="line">             *  如果向←滑动 速度肯定是 负数</div><div class="line">             * 如果 拖动距离 是 actionView的 ¼ 就允许打开或关闭</div><div class="line">             */</div><div class="line">            //根据速度决定是否打开</div><div class="line">            boolean settleToOpen = false;</div><div class="line">            float realVel = Math.abs(xvel);</div><div class="line">            int realDragX = Math.abs(dragDx);</div><div class="line">            if (realVel &gt; AUTO_OPEN_SPEED_LIMIT) &#123; //根据速度判断</div><div class="line">                if (xvel &gt; 0) &#123; //右滑</div><div class="line">                    settleToOpen = false;</div><div class="line">                &#125; else &#123;  //左滑</div><div class="line">                    settleToOpen = true;</div><div class="line">                &#125;</div><div class="line">            &#125;else if(realDragX&gt; mDragDistance/4)&#123;  //根据拖动距离判断</div><div class="line">                if (dragDx&gt;0)&#123; //右滑</div><div class="line">                    settleToOpen = false;</div><div class="line">                &#125;else&#123;</div><div class="line">                    settleToOpen = true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            isOpen = settleToOpen;</div><div class="line">            int settleDestX = isOpen ? -mDragDistance : 0;</div><div class="line">            Log.e(&quot;onViewReleased&quot;, &quot;settleToOpen-&gt;&quot; + settleToOpen + &quot;;destX-&gt;&quot; + settleDestX + &quot;;xvel-&gt;&quot; + xvel + &quot;;dragDx--&gt;&quot; + dragDx);</div><div class="line">            mDragHelper.smoothSlideViewTo(mContentView, settleDestX, 0);</div><div class="line">            ViewCompat.postInvalidateOnAnimation(SwipeItemLayout.this);</div><div class="line">            dragDx = 0;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 文件下载]]></title>
      <url>http://blog.skymxc.com/2017/06/03/download/</url>
      <content type="html"><![CDATA[<blockquote>
<p>时间问题，延期</p>
</blockquote>
<h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><h2 id="用到的知识点"><a href="#用到的知识点" class="headerlink" title="用到的知识点"></a>用到的知识点</h2><ul>
<li>多线程，线程池</li>
<li>http协议</li>
<li>RandomAccessFile 类</li>
<li>properties文件</li>
</ul>
<h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ol>
<li>确定文件流长度</li>
<li>创建线程池</li>
<li>确定每个线程的下载起点，止点，长度</li>
<li>记录每个线程的进度 </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中关于UUID的操作]]></title>
      <url>http://blog.skymxc.com/2017/03/12/android-uuid/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2017/03/12/android-uuid/" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><blockquote>
<p>通用唯一识别码（Universally Unique Identifier）是一种软件建构的标准；<br>UUID的目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不是需要通过中央控制端来做辨识信息的指定。如此以阿里，每个人都可以创建与其他人不冲突的UUID。在这种情况下，就不需要考虑数据库创建时的重复问题；</p>
<p>UUID是由一组32位数的16进制数字构成，UUID的标准形式包含32个16进制数字，以连字号分为五段。形式为 8-4-4-12的32个字符。</p>
<p>550e8400-e29b-41d4-a716-446655440000</p>
</blockquote>
<p>参考链接：<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" title="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" target="_blank" rel="external">https://zh.wikipedia.org/wiki</a></p>
<h2 id="UUID的生成"><a href="#UUID的生成" class="headerlink" title="UUID的生成"></a>UUID的生成</h2><p>java中提供了 UUID类来生成UUID</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UUID uuid = UUID.randomUUID();</div></pre></td></tr></table></figure>
<h2 id="UUID-，byte-，16进制字符串之间的转换"><a href="#UUID-，byte-，16进制字符串之间的转换" class="headerlink" title="UUID ，byte[]，16进制字符串之间的转换"></a>UUID ，byte[]，16进制字符串之间的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * uuid转化 byte[]</div><div class="line"> * @param uuid</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static byte[] toByte(UUID uuid) &#123;</div><div class="line">    ByteBuffer buffer = ByteBuffer.wrap(new byte[16]);</div><div class="line">    buffer.putLong(uuid.getMostSignificantBits());</div><div class="line">    buffer.putLong(uuid.getLeastSignificantBits());</div><div class="line">    return buffer.array();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * byte[] 转换 uuid</div><div class="line"> * @param bytes</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static UUID toUUID(byte[] bytes) &#123;</div><div class="line">    ByteBuffer buffer = ByteBuffer.wrap(bytes);</div><div class="line">    long fistLong = buffer.getLong();</div><div class="line">    long secondLong = buffer.getLong();</div><div class="line">    return new UUID(fistLong, secondLong);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * byte[] 转换为 16进制字符串啊</div><div class="line"> * @param bytes</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static String bytesToHexStr(byte[] bytes) &#123;</div><div class="line">    StringBuffer sb = new StringBuffer();</div><div class="line">    for (byte b : bytes) &#123;</div><div class="line">        int v = b &amp; 0xff;</div><div class="line">        String hv = Integer.toHexString(v);</div><div class="line">        if (hv.length() &lt; 2) &#123;</div><div class="line">            sb.append(&quot;0&quot;);</div><div class="line">        &#125;</div><div class="line">        sb.append(hv);</div><div class="line">    &#125;</div><div class="line">    return sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考链接：<a href="http://stackoverflow.com/questions/17893609/convert-uuid-to-byte-that-works-when-using-uuid-nameuuidfrombytesb" title="http://stackoverflow.com/questions/17893609/convert-uuid-to-byte-that-works-when-using-uuid-nameuuidfrombytesb" target="_blank" rel="external">http://stackoverflow.com/questions/17893609/convert-uuid-to-byte-that-works-when-using-uuid-nameuuidfrombytesb</a></p>
<p><a href="https://my.oschina.net/u/347386/blog/182717" title="https://my.oschina.net/u/347386/blog/182717" target="_blank" rel="external">https://my.oschina.net/u/347386/blog/182717</a></p>
<h2 id="sqlite中-guid类型数据的操作"><a href="#sqlite中-guid类型数据的操作" class="headerlink" title="sqlite中 guid类型数据的操作"></a>sqlite中 guid类型数据的操作</h2><blockquote>
<p>表结构</p>
</blockquote>
<p><img src="\images\Android\uuid\table.png" alt="表结构"></p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private void insert() &#123;</div><div class="line">    UUID uuid = UUID.randomUUID();</div><div class="line">    String name = &quot;mxc&quot;;</div><div class="line">    byte[] bytes = UUIDUtils.toByte(uuid);</div><div class="line">    ContentValues cv = new ContentValues();</div><div class="line">    cv.put(&quot;id&quot;,bytes);</div><div class="line">    cv.put(&quot;name&quot;,name);</div><div class="line"></div><div class="line">    SQLiteDatabase db = helper.getWritableDatabase();</div><div class="line">    db.beginTransaction();</div><div class="line">    db.insert(&quot;tb0&quot;,null,cv);</div><div class="line">    db.setTransactionSuccessful();</div><div class="line">    db.endTransaction();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void update()&#123;</div><div class="line">    /**</div><div class="line">     * 对于uuid的比较 ，转换为16进制字符串</div><div class="line">     */</div><div class="line">    String hexStr = UUIDUtils.bytesToHexStr(bytes);</div><div class="line">    SQLiteDatabase db = helper.getWritableDatabase();</div><div class="line">    ContentValues cv = new ContentValues();</div><div class="line">    cv.put(&quot;name&quot;,&quot;sky-mxc&quot;);</div><div class="line">    cv.put(&quot;age&quot;,23);</div><div class="line">    Log.e(TAG, &quot;update: hexStr=&quot;+hexStr);</div><div class="line">    db.beginTransaction();</div><div class="line">    db.update(&quot;tb0&quot;,cv,&quot;id = x&apos;&quot;+hexStr+&quot;&apos;&quot;,null);</div><div class="line">    db.setTransactionSuccessful();</div><div class="line">    db.endTransaction();</div><div class="line">    query();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">private void query()&#123;</div><div class="line">    StringBuffer sb = new StringBuffer(&quot;数据如下：\n&quot;);</div><div class="line">    SQLiteDatabase db = helper.getReadableDatabase();</div><div class="line">    Cursor cursor = db.query(&quot;tb0&quot;, new String[]&#123;&quot;id&quot;, &quot;name&quot;, &quot;age&quot;&#125;, null, null, null, null, null);</div><div class="line">    while (cursor.moveToNext())&#123;</div><div class="line">        byte[] ids = cursor.getBlob(cursor.getColumnIndex(&quot;id&quot;));</div><div class="line">        bytes = ids;</div><div class="line">        UUID uuid = UUIDUtils.toUUID(ids);</div><div class="line">        String name = cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</div><div class="line">        int age = cursor.getInt(cursor.getColumnIndex(&quot;age&quot;));</div><div class="line">        sb.append(&quot;uuid=&quot;+uuid.toString());</div><div class="line">        sb.append(&quot;;\n&quot;);</div><div class="line">        String hexStr = UUIDUtils.bytesToHexStr(ids);</div><div class="line">       sb.append(&quot;hexStr=&quot;+hexStr);</div><div class="line">        sb.append(&quot;;\n&quot;);</div><div class="line">        Log.e(TAG, &quot;query: hexStr=&quot;+hexStr);</div><div class="line">        sb.append(&quot;name=&quot;+name);</div><div class="line">        sb.append(&quot;;\n&quot;);</div><div class="line">        sb.append(&quot;age=&quot;+age);</div><div class="line">        sb.append(&quot;;\n&quot;);</div><div class="line">        sb.append(&quot;---------------------------\n&quot;);</div><div class="line">    &#125;</div><div class="line">    cursor.close();</div><div class="line">    tvShow.setText(sb.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android操作位于sd卡上的sqlite数据库]]></title>
      <url>http://blog.skymxc.com/2017/03/06/opeateSDCardDb/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明出处：<a href="https://sky-mxc.github.io/2017/03/06/opeateSDCardDb/" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="对-sd卡上sqlite-数据库的操作"><a href="#对-sd卡上sqlite-数据库的操作" class="headerlink" title="对 sd卡上sqlite 数据库的操作"></a>对 sd卡上sqlite 数据库的操作</h1><blockquote>
<p>Android默认的数据库位置是在 data\data\packageName\databases\目录下的；<br>有时候因为业务需要我们需要操作位于sd卡的数据库，就可以通过重写 Context类的方法来实现</p>
</blockquote>
<h2 id="重写-ContextWrapper"><a href="#重写-ContextWrapper" class="headerlink" title="重写 ContextWrapper"></a>重写 ContextWrapper</h2><p>我们在创建SqliteOpenHelper实例的时候需要传入一个Context 实例，就是通过他来实现的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class DBContext extends ContextWrapper &#123;</div><div class="line">    public static final String TAG = &quot;DBContext&quot;;</div><div class="line"></div><div class="line">    public DBContext(Context base) &#123;</div><div class="line">        super(base);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 返回 数据库文件 </div><div class="line">     * 重写此方法 返回我们位于sd卡的数据库文件</div><div class="line">     * @param name</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public File getDatabasePath(String name) &#123;</div><div class="line">        //位于 sd卡的数据库 初始化时已经创建好了</div><div class="line">        File file = new File(Environment.getExternalStorageDirectory().getPath()+&quot;/dbDemo&quot;,name);</div><div class="line">        return file;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Android 4.0后会调用此方法 还有一个2.3以前的方法就重写了，也没有那么底的版本了</div><div class="line">     * @param name</div><div class="line">     * @param mode</div><div class="line">     * @param factory</div><div class="line">     * @param errorHandler</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) &#123;</div><div class="line">       SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(getDatabasePath(name),factory);</div><div class="line">        return db;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DBHelper"><a href="#DBHelper" class="headerlink" title="DBHelper"></a>DBHelper</h2><blockquote>
<p>DBHelper </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class DBHelper extends SQLiteOpenHelper &#123;</div><div class="line">    public static final String TAG = &quot;DBHelper&quot;;</div><div class="line"></div><div class="line">    private  static final String NAME = &quot;test.db&quot;;</div><div class="line">    private  static final int VERSION = 1;</div><div class="line"></div><div class="line">    private  static DBHelper dbHelpter;</div><div class="line"></div><div class="line">    public static DBHelper getDbHelpter(Context context)&#123;</div><div class="line">        if (dbHelpter == null)&#123;</div><div class="line">            dbHelpter = new DBHelper(context);</div><div class="line">        &#125;</div><div class="line">        return dbHelpter;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private DBHelper(Context context) &#123;</div><div class="line">        super(context, NAME, null, VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(SQLiteDatabase db) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void query()&#123;</div><div class="line"></div><div class="line">    DBContext dbContext = new DBContext(this);</div><div class="line">    DBHelper helpter = DBHelper.getDbHelpter(dbContext);</div><div class="line">    SQLiteDatabase db = helpter.getWritableDatabase();</div><div class="line">    Cursor cu = db.query(&quot;table1&quot;, new String[]&#123;&quot;id&quot;, &quot;name&quot;, &quot;age&quot;&#125;, null, null, null, null, &quot;id desc&quot;, null);</div><div class="line">    if (null != cu)&#123;</div><div class="line">        while (cu.moveToNext())&#123;</div><div class="line">            int id = cu.getInt(cu.getColumnIndex(&quot;id&quot;));</div><div class="line">            String name = cu.getString(cu.getColumnIndex(&quot;name&quot;));</div><div class="line">            int age = cu.getInt(cu.getColumnIndex(&quot;age&quot;));</div><div class="line">            Log.e(TAG, &quot;query: id=&quot;+id+&quot;;name=&quot;+name+&quot;;age=&quot;+age);</div><div class="line">        &#125;</div><div class="line">        cu.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="http://blog.csdn.net/liyulei316686082/article/details/7230709" title="http://blog.csdn.net/liyulei316686082/article/details/7230709" target="_blank" rel="external">http://blog.csdn.net/liyulei316686082/article/details/7230709</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 导入现有数据库]]></title>
      <url>http://blog.skymxc.com/2017/02/26/copyDB/</url>
      <content type="html"><![CDATA[<blockquote>
<p> <strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<p>我们都知道 Android的 数据库默认是放在data\data\packageName\datbases\下的;<br>要导入现有的数据库将我们的数据库在 程序第一次启动的时候将数据库放在这个目录下，然后我们配置好SqliteDabase对象就可以 直接操作了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将 数据库从 assets 复制到 databases下</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyDB</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">//data/data/packageName/databases/</span></div><div class="line">   File mkdir = <span class="keyword">new</span> File(getFilesDir().getParent(),<span class="string">"databases"</span>);</div><div class="line">   <span class="comment">//创建 databases文件夹</span></div><div class="line">    <span class="keyword">if</span> (!mkdir.exists()) mkdir.mkdirs();</div><div class="line">    Log.e(TAG, <span class="string">"copyDb: mkdir="</span>+mkdir.getPath());</div><div class="line">    <span class="comment">//数据库文件</span></div><div class="line">    File file = <span class="keyword">new</span> File(mkdir,<span class="string">"SinBusinessWssm1.db"</span>);</div><div class="line">    <span class="comment">//只是在程序第一次启动时创建</span></div><div class="line">    <span class="keyword">if</span>(!file.exists())&#123;</div><div class="line">      <span class="comment">//获取 assets管理</span></div><div class="line">        AssetManager assets = getAssets();</div><div class="line">        <span class="comment">//执行文件复制</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            InputStream open = assets.open(<span class="string">"SinBusinessWssm1.db"</span>);</div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len ;</div><div class="line">            <span class="keyword">while</span> ((len = open.read(bs))!=-<span class="number">1</span>)&#123;</div><div class="line">                fos.write(bs,<span class="number">0</span>,len);</div><div class="line">            &#125;</div><div class="line">            fos.flush();</div><div class="line">            fos.close();</div><div class="line">            open.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Log.e(TAG, <span class="string">"copyDb: exists="</span>+file.getPath());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySql命令集锦]]></title>
      <url>http://blog.skymxc.com/2017/01/08/mysqlcommand/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2017/01/08/mysqlcommand/" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="MySQL命令"><a href="#MySQL命令" class="headerlink" title="MySQL命令"></a>MySQL命令</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><blockquote>
<p>如果存在就先删了吧</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop database if exists db_ name;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建数据库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database db_name;</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\create_database.png" alt="创建数据库"></p>
<h2 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h2><blockquote>
<p>所有的用户都存储于系统的user表里</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select user from mysql.user;</div></pre></td></tr></table></figure>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>创建用户其实就是向 ‘mysql.user’ 表里插入一条记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#create user &apos;用户名‘@&apos;用户登录ip % 表示无限制也可以是localhost&apos; identified by  &apos;密码’</div><div class="line"></div><div class="line">create user &apos;mxc&apos;@&apos;localhost&apos; identified by &apos;mxc&apos;;</div></pre></td></tr></table></figure>
<h2 id="查询用户权限"><a href="#查询用户权限" class="headerlink" title="查询用户权限"></a>查询用户权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#show grants for 用户名@&apos;IP地址&apos;;</div><div class="line"></div><div class="line">show grants for mxc@&apos;localhost&apos;;</div></pre></td></tr></table></figure>
<h2 id="为用户授权"><a href="#为用户授权" class="headerlink" title="为用户授权"></a>为用户授权</h2><blockquote>
<p>在创建一个用户的时候默认的权限只有登录权限，想要其他的权限必须授权；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#mxc用户拥有test数据库的所有权限</div><div class="line"></div><div class="line">grant all on test.* to mxc@localhost identified by &apos;mxc&apos;;</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\show_grant_permission.png" alt="为用户授权"></p>
<h3 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h3><h4 id="数据库-数据表-数据列权限："><a href="#数据库-数据表-数据列权限：" class="headerlink" title="数据库/数据表/数据列权限："></a>数据库/数据表/数据列权限：</h4><ul>
<li>Alter: 修改已存在的数据表(例如增加/删除列)和索引。</li>
<li>Create: 建立新的数据库或数据表。</li>
<li>Delete: 删除表的记录。</li>
<li>Drop: 删除数据表或数据库。</li>
<li>INDEX: 建立或删除索引。</li>
<li>Insert: 增加表的记录。</li>
<li>Select: 显示/搜索表的记录。</li>
<li>Update: 修改表中已存在的记录。</li>
</ul>
<h4 id="全局管理MySQL用户权限："><a href="#全局管理MySQL用户权限：" class="headerlink" title="全局管理MySQL用户权限："></a>全局管理MySQL用户权限：</h4><ul>
<li>file: 在MySQL服务器上读写文件。</li>
<li>PROCESS: 显示或杀死属于其它用户的服务线程。</li>
<li>RELOAD: 重载访问控制表，刷新日志等。</li>
<li>SHUTDOWN: 关闭MySQL服务。</li>
</ul>
<h4 id="特别的权限："><a href="#特别的权限：" class="headerlink" title="特别的权限："></a>特别的权限：</h4><ul>
<li>ALL: 允许做任何事(和root一样)。</li>
<li>USAGE: 只允许登录–其它什么也不允许做</li>
</ul>
<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><blockquote>
<p>创建之前先删</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop table if exists table_name;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">create table employee(</div><div class="line">	id int auto_increment primary key,</div><div class="line">	name varchar(50) not null,</div><div class="line">	age int default 18,</div><div class="line">	sex int default 0,</div><div class="line">	dept int not null)</div><div class="line">	default charset =utf8;</div></pre></td></tr></table></figure>
<blockquote>
<p>查看表结构</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">desc table_name;</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\create_table.png" alt="创建表"></p>
<blockquote>
<p>默认值设置</p>
</blockquote>
<ul>
<li>int类型：默认值也得是整型，并且default后边不要()括号。 </li>
<li><p>char类型：默认值使用单引号。</p>
</li>
<li><p>DATETIME类型：NOW()函数以’YYYY-MM-DD HH:MM:SS’返回当前的日期时间，可以直接存到DATETIME字段中。不支持使用系统默认值。 </p>
</li>
<li><p>DATE类型：CURDATE()以’YYYY-MM-DD’的格式返回今天的日期，可以直接存到DATE字段中。不支持使用系统默认值。 </p>
</li>
<li><p>TIME类型：CURTIME()以’HH:MM:SS’的格式返回当前的时间，可以直接存到TIME字段中。不支持使用系统默认值。 </p>
</li>
</ul>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert into table_name values(对应的列的值）；</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\insertdata.png" alt="插入数据"></p>
<h2 id="为已存在的表添加外键"><a href="#为已存在的表添加外键" class="headerlink" title="为已存在的表添加外键"></a>为已存在的表添加外键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alter table 表名 add constraint 外键名字 foreign key(外键字段名） references 外表(对应表的字段);</div><div class="line"></div><div class="line"># 为 employee 添加外键  employee表的dept字段对应dept表里的 d_id字段</div><div class="line">alter table employee add constraint FK_ED foreign key(dept) references dept(d_id);</div></pre></td></tr></table></figure>
<h2 id="查看创建表的SQL语句"><a href="#查看创建表的SQL语句" class="headerlink" title="查看创建表的SQL语句"></a>查看创建表的SQL语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show create table 表名;</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\show_create_table.png" alt="查看创建表的SQL语句"></p>
<h2 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alter table 表名 add 列名 数据类型;</div><div class="line"># 为 dept表增加 d_location列</div><div class="line">alter table dept add d_location varchar(200);</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\alter_table_add_column.png" alt="添加列"></p>
<h1 id="description"><a href="#description" class="headerlink" title="description"></a>description</h1><blockquote>
<p>平时用到的SQL语句记录，持续更新中….</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql5.7.17解压版安装教程]]></title>
      <url>http://blog.skymxc.com/2017/01/05/installMysql5-7/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong>总结 转载注明: <a href="https://sky-mxc.github.io/2017/01/05/installMysql5-7/" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="Mysql5-7-17-解压版安装"><a href="#Mysql5-7-17-解压版安装" class="headerlink" title="Mysql5.7.17 解压版安装"></a>Mysql5.7.17 解压版安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>解压版下载地址(需要登录) <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">http://dev.mysql.com/downloads/mysql/</a></p>
<p><img src="\images\database\msyql\install\download.png" alt="下载"></p>
<p>下载后解压到你想要安装的目录就可以了</p>
<p><img src="\images\database\msyql\install\decompression.png" alt="解压后"></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为了方便使用，不必每次都进入bin目录 就添加环境变量，如果不嫌麻烦就不必添加了</p>
<p>增加系统环境变量： <strong>MYSQL_HOME</strong> ，值就是你的MySQL目录了 例如：D:\tools\database\mysql-5.7.17-winx64</p>
<p><img src="\images\database\msyql\install\addsysPath.png" alt="增加环境变量"></p>
<p>在path变量后追加 <strong>%MYSQL_HOME%\bin;</strong>  注意前面加分号；</p>
<h2 id="初始化数据库得到data目录"><a href="#初始化数据库得到data目录" class="headerlink" title="初始化数据库得到data目录"></a>初始化数据库得到data目录</h2><p>两种命令方式 一种是初始化一个无密码的 root ，一个是初始化一个随机密码的root<br>无密码的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld --initialize-insecure</div></pre></td></tr></table></figure>
<p>随机密码的方式，不过要记住随即密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld --initialize</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\install\initialize.jpg" alt="初始化data目录"></p>
<h2 id="配置-my-imi文件"><a href="#配置-my-imi文件" class="headerlink" title="配置 my.imi文件"></a>配置 my.imi文件</h2><blockquote>
<p>主要是配置 basedir,datadir,port,在5.7之后 有些配置是不识别的例如：<code>default-character-set=utf8</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#安装目录 </div><div class="line"> basedir = D:\\tools\\database\\mysql-5.7.17-winx64</div><div class="line"> </div><div class="line"># 数据库存放目录</div><div class="line"> datadir = D:\\tools\\database\\mysql-5.7.17-winx64\\data</div><div class="line"> </div><div class="line">#端口</div><div class="line"> port = 3306</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\install\imi.png" alt="配置数据库参数"></p>
<p>ps:这里需要注意的地方是 目录的间隔标识 使用 <code>\\</code> 在win7上可能会出现 无法识别的情况</p>
<h2 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h2><p>在bin目录下 输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld -install</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\install\registerService.png" alt="添加服务"></p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>输入命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start mysql</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\install\start.png" alt="启动服务"></p>
<h2 id="登录数据库并修改密码"><a href="#登录数据库并修改密码" class="headerlink" title="登录数据库并修改密码"></a>登录数据库并修改密码</h2><p>进入数据库,因为没有密码 ，回车即可进入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<p>修改root 密码 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set password = password(&apos;新密码&apos;);</div></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\install\login&amp;updatePwd.png" alt="登录并修改密码"></p>
<blockquote>
<p>退出并测试密码 </p>
</blockquote>
<p><img src="\images\database\msyql\install\exit.png" alt="测试密码"></p>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><blockquote>
<p>在安装的时候 遇到了一个坑，在win7上是坑，而我在win10测试的时候这个坑就不会出现；这个疑惑实在不解；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">MySQL 服务正在启动 .</div><div class="line">MySQL 服务无法启动。</div><div class="line"></div><div class="line">服务没有报告任何错误。</div><div class="line"></div><div class="line">请键入 NET HELPMSG 3534 以获得更多的帮助。</div></pre></td></tr></table></figure>
<p> 这里遇到这个情况是因为在my.imi配置中 目录间隔符没有使用 <code>\\</code> 在更改后重新初始化;<br> 因为在之前已经初始化过一次了，在这次初始化之前要把data目录清空，否则会执行不成功</p>
<p><img src="\images\database\msyql\install\error.png" alt="错误"></p>
<p>清空data目录后，重新初始化即可</p>
<p><img src="\images\database\msyql\install\success.png" alt="成功"></p>
<p>over</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>http://blog.skymxc.com/2016/12/25/designModel-observer/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc总结</strong> 转载请注明：<a href="https://sky-mxc.github.io/2016/12/25/designModel-observer" target="_blank" rel="external">https://sky-mxc.github.io/2016/12/25/designModel-observer</a></p>
</blockquote>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote>
<p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象，当主题对象在状态上发生改变时，通知所有的观察者对象，并让他们自动更新自己；</p>
</blockquote>
<h2 id="观察者模式的组成"><a href="#观察者模式的组成" class="headerlink" title="观察者模式的组成"></a>观察者模式的组成</h2><h3 id="抽象主题角色："><a href="#抽象主题角色：" class="headerlink" title="抽象主题角色："></a>抽象主题角色：</h3><p> 将所有的观察者引用存放到一个集合中，每个主题可以拥有任意数量的观察者；主题提供一个接口，用来增加，移除通知观察者。一般用一个抽象类或接口来实现；</p>
<h3 id="抽象观察者角色："><a href="#抽象观察者角色：" class="headerlink" title="抽象观察者角色："></a>抽象观察者角色：</h3><p>为所有的观察者定义一个接口，在得到主题通知时更新自己；</p>
<h3 id="具体主题角色："><a href="#具体主题角色：" class="headerlink" title="具体主题角色："></a>具体主题角色：</h3><p>在具体主题状态发生改变时，通知所有登记过的观察者。具体主题通常由一个子类实现；</p>
<h3 id="具体观察者角色："><a href="#具体观察者角色：" class="headerlink" title="具体观察者角色："></a>具体观察者角色：</h3><p>该角色实现抽象观察者角色所要求的更新接口，在得到主题通知时更新自己，让本身的状态和观察者的状态相协调。通常是一个自类实现。如果需啊，可以在内部保存观察的主题的引用。</p>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><h3 id="抽象观察者角色"><a href="#抽象观察者角色" class="headerlink" title="抽象观察者角色"></a>抽象观察者角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 抽象观察者接口</div><div class="line"> * Created by sky-mxc on 2016/12/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IObserver</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 主题发生变化</div><div class="line">     * <span class="doctag">@param</span> str</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String str)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="抽象主题角色"><a href="#抽象主题角色" class="headerlink" title="抽象主题角色"></a>抽象主题角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">		<span class="comment">/**</span></div><div class="line"> * 抽象主题</div><div class="line"> * Created by sky-mxc on 2016/12/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ISubject</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//观察者 集合</span></div><div class="line">    <span class="keyword">protected</span> List&lt;IObserver&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> </div><div class="line">    <span class="comment">//主题名字</span></div><div class="line">    <span class="keyword">protected</span> String name;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ISubject</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加 观察者</div><div class="line">     * <span class="doctag">@param</span> observer 观察者</div><div class="line">     */</div><div class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(IObserver observer)</span></span>&#123;</div><div class="line">       observers.add(observer);</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 移除观察者</div><div class="line">     * <span class="doctag">@param</span> observer 观察者</div><div class="line">     */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(IObserver observer)</span></span>&#123;</div><div class="line">       observers.remove(observer);</div><div class="line">   &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知观察者</div><div class="line">     * <span class="doctag">@param</span> str 通知内容</div><div class="line">     */</div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyUpdate</span><span class="params">(String str)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="具体主题角色"><a href="#具体主题角色" class="headerlink" title="具体主题角色"></a>具体主题角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体主题</div><div class="line"> * Created by sky-mxc on 2016/12/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">ISubject</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subject</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyUpdate</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (IObserver observer :observers)&#123;</div><div class="line">            observer.update(str+<span class="string">"\t\t\t--- "</span>+name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="具体观察者角色"><a href="#具体观察者角色" class="headerlink" title="具体观察者角色"></a>具体观察者角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体观察者</div><div class="line"> * Created by sky-mxc on 2016/12/25.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> <span class="keyword">implements</span> <span class="title">IObserver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observer</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        System.out.println(name+<span class="string">"接收到了通知："</span>+str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{

    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        Observer observer1 =<span class="keyword">new</span> Observer(<span class="string">"张三"</span>);
        Observer observer2 =<span class="keyword">new</span> Observer(<span class="string">"李四"</span>);
        Observer observer3 =<span class="keyword">new</span> Observer(<span class="string">"王五"</span>);

        Subject subject = <span class="keyword">new</span> Subject(<span class="string">"PM"</span>);
        subject.addObserver(observer1);
        subject.addObserver(observer2);
        subject.addObserver(observer3);
        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){
            subject.notifyUpdate(<span class="string">"通知："</span>+System.currentTimeMillis());
            <span class="keyword">try</span> {
                Thread.sleep(<span class="number">1000</span>*<span class="number">3</span>);
            } <span class="keyword">catch</span> (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(<span class="string">"\n"</span>);
        }
    }
}
</code></pre>
<h3 id="result："><a href="#result：" class="headerlink" title="result："></a>result：</h3><p><img src="\images\java\designModel\运行结果.png" alt="运行结果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用百度定位当前位置并获取附近的位置]]></title>
      <url>http://blog.skymxc.com/2016/12/19/baiduLocation/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong> 总结 ；欢迎转载交流 <a href="https://sky-mxc.github.io/2016/12/19/baiduLocation/" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<pre><code>1. 下载sdk
2. 生成 SHA1码（debug,和release版本）
3. 申请key
4. 集成sdk
5. 获取位置（包含附近poi）
</code></pre><h2 id="下载定位sdk"><a href="#下载定位sdk" class="headerlink" title="下载定位sdk"></a>下载定位sdk</h2><p>链接 <a href="http://lbsyun.baidu.com/index.php?title=android-locsdk/geosdk-android-download" title="http://lbsyun.baidu.com/index.php?title=android-locsdk/geosdk-android-download" target="_blank" rel="external">http://lbsyun.baidu.com/index.php?title=android-locsdk/geosdk-android-download</a></p>
<h2 id="生成-SHA1-码"><a href="#生成-SHA1-码" class="headerlink" title="生成 SHA1 码"></a>生成 SHA1 码</h2><blockquote>
<p>在填写 SHA1码的时候能填写两个，发布版和开发版，如果是的一个人开发的话两个都填一个电脑生成的就好了，如果是多人的话，最好是两个码从两个电脑生成；因为如果码不对的话，定位是无法使用的；</p>
</blockquote>
<h3 id="debug-版"><a href="#debug-版" class="headerlink" title="debug 版"></a>debug 版</h3><ol>
<li>定位到  .android 目录下：</li>
<li>打开cmd  输入命令  keytool -list -v -keystore debug.keystore</li>
<li>输入口令 ：android （百度地图官网提供）</li>
<li>就得到了SHA1 码：<br><img src="\images\Android\BaiduLocation\getDebugSHA1.png" alt="开发版SHA1码"></li>
</ol>
<h3 id="发布版"><a href="#发布版" class="headerlink" title="发布版"></a>发布版</h3><p>在获取发布版的SHA1前 要对项目进行签名</p>
<ol>
<li>输入命令 keytool -list -v -keystore jrjh.jks   （ps:jrjh.jks 是你签名是的keystore）</li>
<li>口令输入你的密码</li>
<li>得到 发布版的SHA1<br><img src="\images\Android\BaiduLocation\getReleaseSHA1.png" alt="发布版SHA1码"></li>
</ol>
<h2 id="申请key"><a href="#申请key" class="headerlink" title="申请key"></a>申请key</h2><p><img src="\images\Android\BaiduLocation\申请key.png" alt="申请key"></p>
<h2 id="集成sdk"><a href="#集成sdk" class="headerlink" title="集成sdk"></a>集成sdk</h2><p>详细文档地址：<a href="http://lbsyun.baidu.com/index.php?title=android-locsdk/guide/buildprojec" target="_blank" rel="external">http://lbsyun.baidu.com/index.php?title=android-locsdk/guide/buildprojec</a></p>
<h2 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h2><h3 id="定义位置帮助类"><a href="#定义位置帮助类" class="headerlink" title="定义位置帮助类"></a>定义位置帮助类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> com.baidu.location.BDLocation;</div><div class="line"><span class="keyword">import</span> com.baidu.location.BDLocationListener;</div><div class="line"><span class="keyword">import</span> com.baidu.location.LocationClient;</div><div class="line"><span class="keyword">import</span> com.baidu.location.LocationClientOption;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line"> * Location utils.</div><div class="line"> * 位置 帮助类</div><div class="line"> * <span class="doctag">@author</span> 孟祥超 on 2016.12.15</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LocationHelper"</span>;</div><div class="line">    <span class="keyword">public</span> LocationClient client= <span class="keyword">new</span> LocationClient(AppUtils.getAppContext());</div><div class="line">    <span class="comment">//位置监听</span></div><div class="line">    <span class="keyword">private</span> BDLocationListener locationListener = <span class="keyword">new</span> BDLocationListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveLocation</span><span class="params">(BDLocation bdLocation)</span> </span>&#123;</div><div class="line">            <span class="comment">//  2016/12/15 发送一个广播啊</span></div><div class="line">            Log.i(TAG, <span class="string">"onReceiveLocation: address="</span>+bdLocation.getAddrStr());</div><div class="line">            Intent intent =<span class="keyword">new</span> Intent(Constants.Intent.LOCATION_CHANGE);</div><div class="line">            intent.putExtra(<span class="string">"location"</span>,bdLocation);</div><div class="line">            AppUtils.getAppContext().sendBroadcast(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LocationHelper locationHelper;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取位置帮助类</div><div class="line">     * <span class="doctag">@return</span> location helper</div><div class="line">     * <span class="doctag">@author</span> 孟祥超 on 2016.12.15 14:16:01</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LocationHelper <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (locationHelper == <span class="keyword">null</span>)&#123;</div><div class="line">            locationHelper = <span class="keyword">new</span> LocationHelper();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>  locationHelper;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LocationHelper</span><span class="params">()</span></span>&#123;</div><div class="line">        initLocation();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//初始化 定位</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocation</span><span class="params">()</span></span>&#123;</div><div class="line">        LocationClientOption option = <span class="keyword">new</span> LocationClientOption();</div><div class="line">        option.setIsNeedLocationPoiList(<span class="keyword">true</span>);  <span class="comment">//获取附近 poi</span></div><div class="line">        option.setIsNeedAddress(<span class="keyword">true</span>);  <span class="comment">//需要详细位置</span></div><div class="line">        option.setCoorType(<span class="string">"bd09ll"</span>);   <span class="comment">//百度的编码</span></div><div class="line">        option.setScanSpan(<span class="number">1000</span>*<span class="number">3</span>); <span class="comment">//3秒 一次</span></div><div class="line">        option.setIsNeedLocationDescribe(<span class="keyword">true</span>); <span class="comment">//位置语义化</span></div><div class="line">        client.setLocOption(option);    <span class="comment">//设置参数</span></div><div class="line">        client.registerLocationListener(locationListener);  <span class="comment">//注册获取位置监听</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 释放 位置对象</div><div class="line">     * <span class="doctag">@author</span> 孟祥超 on 2016.12.15 14:23:04</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (locationHelper == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        client.unRegisterLocationListener(locationListener);</div><div class="line">        locationHelper = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="接受广播并更新UI"><a href="#接受广播并更新UI" class="headerlink" title="接受广播并更新UI"></a>接受广播并更新UI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="comment">//获取到 位置信息</span></div><div class="line">    <span class="keyword">private</span> BroadcastReceiver locationChangeReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            BDLocation location =intent.getParcelableExtra(<span class="string">"location"</span>);</div><div class="line">            <span class="keyword">if</span> (location == <span class="keyword">null</span> || TextUtils.isEmpty(location.getAddrStr()))&#123;</div><div class="line">                letterCreateAddress.setText(<span class="string">"没有定位的外星球....."</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            Log.i(TAG, <span class="string">"onReceive: address ="</span>+location.getAddrStr());</div><div class="line">            letterCreateAddress.setText(location.getAddrStr());</div><div class="line">            List&lt;Poi&gt; pois = location.getPoiList();</div><div class="line">            <span class="keyword">if</span> (pois != <span class="keyword">null</span> &amp;&amp; pois.size() != <span class="number">0</span>)&#123;</div><div class="line">                nearbyAddress = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (Poi poi :pois)&#123;</div><div class="line">                Log.i(TAG, <span class="string">"onReceive: poi ="</span>+poi.getName());</div><div class="line">                nearbyAddress.add(poi.getName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>在项目中已经测试可用；这里做个总结</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用github+hexo 搭建个人博客]]></title>
      <url>http://blog.skymxc.com/2016/12/04/buildBlogs/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc总结</strong> 转载注明：<a href="https://sky-mxc.github.io/2016/09/29/buildBlogs" target="_blank" rel="external">https://sky-mxc.github.io/2016/09/29/buildBlogs</a></p>
</blockquote>
<h1 id="githubPages-hexo-搭建个人博客"><a href="#githubPages-hexo-搭建个人博客" class="headerlink" title="githubPages + hexo 搭建个人博客"></a>githubPages + hexo 搭建个人博客</h1><blockquote>
<p>hexo是基于git和Node.js的 必须先安装 git和Node.js;</p>
</blockquote>
<h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><blockquote>
<p>Node.js 下载地址 <a href="http://nodejs.cn/download/" target="_blank" rel="external">http://nodejs.cn/download/</a> 选择好安装路径之后一路 next就可以了;<br>检测是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure></p>
<p>查看 npm是否安装 以前的版本没有集成npm，新版本已经集成了npn<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -version</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/checkNode.png" alt="image"></p>
<h2 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h2><blockquote>
<p>关于hexo 的安装 在官网有很详细的教程 ：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a></p>
<p>安装 hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/安装hexo.png" alt="image"></p>
<blockquote>
<p>检测安装是否成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/checkHexo.png" alt=""></p>
<blockquote>
<p>指定一个文件夹 必须是空目录 配置hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/initHexo.png" alt="image"><br><img src="/images/github+hexo/initHexo2.png" alt="image"></p>
<blockquote>
<p>安装完成后会生成一些文件 具体目录的用途 官网说的很清楚</p>
<ul>
<li>_config.yml   网站的配置信息。大部分的参数在这里配置</li>
<li>package.json    应用程序的信息</li>
<li>scaffolds  <strong>模板</strong> 文件夹</li>
<li>source     资源文件夹 存放 资源 如图片之类的；除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li>
<li>themes   主题文件夹  Hexo很久主题生成静态页面</li>
</ul>
<p>剩下的就是配置了 主要是在 _config.yml中配置 怎么配置 官网也解释的跟清楚了。这里说一下主要的，详情移步官网查看:<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/configuration.html</a></p>
</blockquote>
<ul>
<li>title 网站标题</li>
<li>subtitle 子标题</li>
<li>description  网站描述</li>
<li>language  使用语言</li>
<li>author 你的名字</li>
</ul>
<p><img src="/images/github+hexo/settingHexo.png" alt="image"></p>
<blockquote>
<p>到这里基本上本地已经配置完了 现在可以 测试一下了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g # 生成静态文件 生成文件在public 目录下</div><div class="line">$ hexo s # 启动本地预览 hexo s --debug 命令可以用来调试</div></pre></td></tr></table></figure>
<p><img src="/images/github+hexo/serverHexo.png" alt="image"><br><img src="/images/github+hexo/hexoTest0.png" alt="image"></p>
<h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><blockquote>
<p>首先在github上建一个repository 名字格式：[your_user_name.github.io]</p>
<p>例如我的  sky-mxc.github.io</p>
</blockquote>
<p><img src="/images/github+hexo/github仓库.png" alt=""></p>
<blockquote>
<p>要发布到 github 还得下载 一个组件( hexo-deployer-git) 执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p><em>还需要修改 _config.yml  ;参考官网得说明</em><br><img src="/images/github+hexo/发布到github前的配置.png" alt=""></p>
<p><strong>我的配置如下：</strong><br><img src="/images/github+hexo/我的发布配置.png" alt=""></p>
<p>配置完之后 就可以发布到 github上了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d  #发布</div></pre></td></tr></table></figure></p>
<p>发布完成之后 就可输入网址查看了 这里贴一下我的吧：<a href="https://sky-mxc.github.io" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<p><img src="/images/github+hexo/发布完成0.png" alt=""></p>
<blockquote>
<p><strong>这里就基本搭建完成了</strong> </p>
<p>常用 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean # 清理之前的内容</div><div class="line">hexo g # 生成静态文件</div><div class="line">hexo d #部署</div><div class="line">hexo s # 启动本地服务 ，可以通过 http://localhost:4000查看</div><div class="line">hexo s --debug # 使用debug模式启动服务</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><blockquote>
<p>感觉默认主题有点low 关于主题的选择 这里贴个连接 <a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p>
<p>我要更换的主题：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<p>在要theme 目录下 clone<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
</blockquote>
<p>clone完成后 修改 _config.yml 将theme 的值修改为 next</p>
<p><img src="/images/github+hexo/修改主题.png" alt=""></p>
<blockquote>
<p>具体看官网配置：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[相机和相册选取图片并剪裁]]></title>
      <url>http://blog.skymxc.com/2016/11/03/SelectPhoto/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong> 总结 转载注明<a href="https://sky-mxc.github.io/2016/11/03/SelectPhoto" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="图片的选择"><a href="#图片的选择" class="headerlink" title="图片的选择"></a>图片的选择</h1><blockquote>
<p>这两天做头像模块的时候，使用到了相册，相机，剪裁，自定义圆形图片；这里做个总结吧</p>
</blockquote>
<p>这里关于权限的处理 之前已经做过总结了，就不再写了 <a href="https://sky-mxc.github.io/2016/10/08/permission" target="_blank" rel="external">https://sky-mxc.github.io/2016/10/08/permission</a></p>
<ul>
<li>相册选取</li>
<li>相机选取</li>
<li>剪裁</li>
<li>自定义圆形图片</li>
</ul>
<h2 id="相册选取"><a href="#相册选取" class="headerlink" title="相册选取"></a>相册选取</h2><blockquote>
<p>图库选取之后获得的是这个图片的路径，<br>我的实现方法是通过ContentResovler来获取路径，存储在文件夹里，然后启动剪裁程序去剪裁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 执行图库选取图片</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokePhoto</span><span class="params">()</span> </span>&#123;</div><div class="line">    Log.i(TAG, <span class="string">"invokePhoto: "</span>);</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK);</div><div class="line">    intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,<span class="string">"image/*"</span>);</div><div class="line">    startActivityForResult(intent,PHOTO);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>获取图片路径 存储并启动剪裁 ，存储文件的代码就不贴了，都是那一套<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String projection = MediaStore.Images.Media.DATA;</div><div class="line">Cursor cursor = getContentResolver().query(data.getData(), <span class="keyword">new</span> String[]&#123;projection&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"><span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</div><div class="line">    String path = cursor.getString(cursor.getColumnIndex(projection));</div><div class="line">    Log.i(TAG, <span class="string">"onActivityResult: photoPath="</span> + path);</div><div class="line">    startPhotoZoom(Uri.fromFile(FileUtil.saveHeadImg(path)));</div><div class="line">&#125;</div><div class="line">cursor.close();</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="相机选取"><a href="#相机选取" class="headerlink" title="相机选取"></a>相机选取</h2><blockquote>
<p>在启动相机的时候 传入一个文件uri（和刚才相册临时存储的文件路径一致，方便使用），在拍照完毕，直接去读取该图片 并执行剪裁 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 执行拍照</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeCamera</span><span class="params">()</span> </span>&#123;</div><div class="line">    String state = Environment.getExternalStorageState();</div><div class="line">    <span class="keyword">if</span>(state.equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</div><div class="line">        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(FileUtil.getHeadImage()));</div><div class="line">        startActivityForResult(intent, CAMERA);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"检测不到SD卡，无法使用"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="剪裁"><a href="#剪裁" class="headerlink" title="剪裁"></a>剪裁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 打开系统图片裁剪功能</div><div class="line"> * <span class="doctag">@param</span> uri</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPhotoZoom</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.android.camera.action.CROP"</span>);</div><div class="line">    intent.setDataAndType(uri,<span class="string">"image/*"</span>);</div><div class="line">    intent.putExtra(<span class="string">"crop"</span>,<span class="keyword">true</span>);</div><div class="line">    intent.putExtra(<span class="string">"aspectX"</span>,<span class="number">1</span>);</div><div class="line">    intent.putExtra(<span class="string">"aspectY"</span>,<span class="number">1</span>);</div><div class="line">    intent.putExtra(<span class="string">"outputX"</span>,<span class="number">200</span>);</div><div class="line">    intent.putExtra(<span class="string">"outputY"</span>,<span class="number">200</span>);</div><div class="line">    intent.putExtra(<span class="string">"scale"</span>,<span class="keyword">true</span>); <span class="comment">//黑边</span></div><div class="line">    intent.putExtra(<span class="string">"scaleUpIfNeeded"</span>,<span class="keyword">true</span>); <span class="comment">//黑边</span></div><div class="line">    intent.putExtra(<span class="string">"return-data"</span>,<span class="keyword">true</span>);</div><div class="line">    intent.putExtra(<span class="string">"noFaceDetection"</span>,<span class="keyword">true</span>);</div><div class="line">    startActivityForResult(intent,ZOOM);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>剪裁后获取</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</div><div class="line">    Bitmap bmp = data.getParcelableExtra(<span class="string">"data"</span>);</div><div class="line">    headImg.setImageBitmap(bmp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义圆形图片"><a href="#自定义圆形图片" class="headerlink" title="自定义圆形图片"></a>自定义圆形图片</h2><p>对于这个实现方式想到了两种，看连接<br><a href="https://sky-mxc.github.io/2016/11/03/customCircleImageView" target="_blank" rel="external">https://sky-mxc.github.io/2016/11/03/customCircleImageView</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义圆形图片控件]]></title>
      <url>http://blog.skymxc.com/2016/11/03/customCircleImageView/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong> 总结 转载注明<a href="https://sky-mxc.github.io/2016/11/03/customCircleImageView" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="自定义圆形ImageView"><a href="#自定义圆形ImageView" class="headerlink" title="自定义圆形ImageView"></a>自定义圆形ImageView</h1><p>圆形ImageView在头像显示用的比较普遍了，今天对于实现圆形ImageView做个总结；</p>
<p>主要思路是 重写 onDraw() ;方法有两个：</p>
<ul>
<li>使用paint的Shader(着色器)将图片印在一个圆的画板上</li>
<li>使用Bitmap创建一个空的Canvas(画板)，在画板上画一个圆和显示的图片，paint图像混合模式显示</li>
</ul>
<h2 id="着色器-方式"><a href="#着色器-方式" class="headerlink" title="着色器 方式"></a>着色器 方式</h2><h2 id="不带边框"><a href="#不带边框" class="headerlink" title="不带边框"></a>不带边框</h2><blockquote>
<p>思路</p>
</blockquote>
<ul>
<li>将图片压缩到和控件的大小一致</li>
<li>创建Bitmap 着色器</li>
<li>创建画笔并设置着色器</li>
<li>使用带有着色器的画笔在画板上画圆 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawShader</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    Drawable mDrawable = getDrawable();</div><div class="line">    <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</div><div class="line">        Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</div><div class="line">        <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//图片缩放，参数2 目标宽度，参数3目标高度，参数4 是否过滤</span></div><div class="line">        bmp = Bitmap.createScaledBitmap(bmp,getWidth(),getHeight(),<span class="keyword">true</span>);</div><div class="line">        <span class="comment">//着色器</span></div><div class="line">        Shader shader = <span class="keyword">new</span> BitmapShader(bmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">        paint = <span class="keyword">new</span> Paint();</div><div class="line">        paint.setShader(shader);</div><div class="line">        canvas.drawCircle(getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,paint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>效果</p>
</blockquote>
<p><img src="\images\Android\CircleImageView\shader_0.png" alt="无边框效果"></p>
<h2 id="加边框"><a href="#加边框" class="headerlink" title="加边框"></a>加边框</h2><p>有时候我们需要为头像加上一个圆的边框显得更好看一点，其实这个也很好实现，在绘制图片之前先绘制一个带有颜色的圆，根据边框的大小，将图片缩小一点，这样就将边框显示出来了。</p>
<h3 id="画边框"><a href="#画边框" class="headerlink" title="画边框"></a>画边框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">paint.setColor(outColor);</div><div class="line">paint.setStyle(Paint.Style.FILL);</div><div class="line">canvas.drawCircle(getWidth()/<span class="number">2</span>,getHeight()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,paint);</div></pre></td></tr></table></figure>
<h3 id="绘制图片-将边框大小空出来-getWidth-outWidth-2-2"><a href="#绘制图片-将边框大小空出来-getWidth-outWidth-2-2" class="headerlink" title="绘制图片 将边框大小空出来 (getWidth()-outWidth*2)/2"></a>绘制图片 将边框大小空出来 <code>(getWidth()-outWidth*2)/2</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawShader</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    Drawable mDrawable = getDrawable();</div><div class="line">    <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</div><div class="line">        Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</div><div class="line">        <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//图片缩放，参数2 目标宽度，参数3目标高度，参数4 是否过滤</span></div><div class="line">        bmp = Bitmap.createScaledBitmap(bmp,getWidth(),getHeight(),<span class="keyword">true</span>);</div><div class="line">        <span class="comment">//着色器</span></div><div class="line">        Shader shader = <span class="keyword">new</span> BitmapShader(bmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">        paint = <span class="keyword">new</span> Paint();</div><div class="line">        paint.setShader(shader);</div><div class="line">        canvas.drawCircle(getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,(getWidth()-outWidth*<span class="number">2</span>)/<span class="number">2</span>,paint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>效果</p>
</blockquote>
<p><img src="\images\Android\CircleImageView\shader_1.png" alt="边框效果"></p>
<h3 id="着色器方式全部代码"><a href="#着色器方式全部代码" class="headerlink" title="着色器方式全部代码"></a>着色器方式全部代码</h3><h3 id="自定义属性-边框颜色和宽度"><a href="#自定义属性-边框颜色和宽度" class="headerlink" title="自定义属性 边框颜色和宽度"></a>自定义属性 边框颜色和宽度</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleImageView"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"out_width"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>&gt;</span><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"out_color"</span> <span class="attr">format</span>=<span class="string">"color"</span>&gt;</span><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="重写-onDraw-绘制图片"><a href="#重写-onDraw-绘制图片" class="headerlink" title="重写 onDraw() 绘制图片"></a>重写 onDraw() 绘制图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.skymxc.lesson_36_view_override;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Bitmap;</div><div class="line"><span class="keyword">import</span> android.graphics.BitmapShader;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.graphics.Paint;</div><div class="line"><span class="keyword">import</span> android.graphics.PorterDuff;</div><div class="line"><span class="keyword">import</span> android.graphics.PorterDuffXfermode;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.RectF;</div><div class="line"><span class="keyword">import</span> android.graphics.Shader;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.BitmapDrawable;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sky-mxc</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CircleImageView"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outWidth = <span class="number">2</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outColor = Color.RED;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Paint paint;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        initAttrs(attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line"><span class="comment">//        canvas.drawColor(Color.YELLOW);</span></div><div class="line">        paint.setColor(outColor);</div><div class="line">        paint.setStyle(Paint.Style.FILL);</div><div class="line">        canvas.drawCircle(getWidth()/<span class="number">2</span>,getHeight()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,paint);</div><div class="line">        drawShader(canvas);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawShader</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        Drawable mDrawable = getDrawable();</div><div class="line">        <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</div><div class="line">            Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</div><div class="line">            <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">            <span class="comment">//图片缩放，参数2 目标宽度，参数3目标高度，参数4 是否过滤</span></div><div class="line">            bmp = Bitmap.createScaledBitmap(bmp,getWidth(),getHeight(),<span class="keyword">true</span>);</div><div class="line">            <span class="comment">//着色器</span></div><div class="line">            Shader shader = <span class="keyword">new</span> BitmapShader(bmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">            paint = <span class="keyword">new</span> Paint();</div><div class="line">            paint.setShader(shader);</div><div class="line">            canvas.drawCircle(getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,(getWidth()-outWidth*<span class="number">2</span>)/<span class="number">2</span>,paint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAttrs</span><span class="params">(AttributeSet attrs)</span></span>&#123;</div><div class="line">        TypedArray array = getContext().obtainStyledAttributes(attrs,R.styleable.CircleImageView);</div><div class="line">        <span class="keyword">int</span> len =  array.length();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</div><div class="line">            <span class="keyword">int</span> attr = array.getIndex(i);</div><div class="line">            <span class="keyword">switch</span> (attr)&#123;</div><div class="line">                <span class="keyword">case</span> R.styleable.CircleImageView_out_color:</div><div class="line">                    <span class="keyword">this</span>.outColor = array.getColor(attr,Color.GREEN);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> R.styleable.CircleImageView_out_width:</div><div class="line">                    <span class="keyword">this</span>.outWidth = (<span class="keyword">int</span>) array.getDimension(attr,<span class="number">2</span>);</div><div class="line">                    Log.i(TAG, <span class="string">"initAttrs: outWidth="</span>+<span class="keyword">this</span>.outWidth);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        array.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用图片混合模式显示"><a href="#使用图片混合模式显示" class="headerlink" title="　使用图片混合模式显示"></a>　使用图片混合模式显示</h2><blockquote>
<p>创建 Bitmap 使用图片混合模式 将图片和圆形交叉显示</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">private</span> Bitmap <span class="title">getCircleBitmap</span><span class="params">()</span></span>&#123;</div><div class="line">        Drawable mDrawable = getDrawable();</div><div class="line">        <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</div><div class="line">            Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</div><div class="line">            <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            paint  = <span class="keyword">new</span> Paint();</div><div class="line">            paint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">            <span class="comment">//创建空的位图</span></div><div class="line">            Bitmap output = Bitmap.createBitmap(getWidth(),getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">            <span class="comment">//创建画板，以位图进行创建</span></div><div class="line">            Canvas canvas= <span class="keyword">new</span> Canvas(output);</div><div class="line">            <span class="comment">//Bitmap就成了 透明的图片</span></div><div class="line">            canvas.drawColor(Color.TRANSPARENT);</div><div class="line"></div><div class="line">            <span class="comment">//画一个圆形 和图像大小一致</span></div><div class="line">            paint.setColor(Color.WHITE);</div><div class="line">            canvas.drawCircle(output.getWidth()/<span class="number">2</span>,output.getHeight()/<span class="number">2</span>,output.getWidth()/<span class="number">2</span>,paint);</div><div class="line"></div><div class="line"><span class="comment">//            //paint 相交模式 必须在 两者中间定义  显示交叉的地方  ;前面是 dst;后面是 src</span></div><div class="line">            paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//            //绘制 Bitmap</span></div><div class="line">            Rect src = <span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,bmp.getWidth(),bmp.getHeight());</div><div class="line">            RectF dst = <span class="keyword">new</span> RectF(<span class="number">0</span>,<span class="number">0</span>,output.getWidth(),output.getHeight());</div><div class="line">            canvas.drawBitmap(bmp,src,dst,paint);</div><div class="line">            <span class="keyword">return</span>  output;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span>  <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">      Bitmap bmp=  getCircleBitmap();</div><div class="line">       canvas.drawBitmap(bmp,<span class="number">0</span>,<span class="number">0</span>,paint);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>对于这种方式的实现主要在于 paint 的交叉模式； PorterDuffXfermode</p>
</blockquote>
<p>实现的方式有很多种 目前是两种.  未完待续。。。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebView最基本的使用]]></title>
      <url>http://blog.skymxc.com/2016/10/24/WebView/</url>
      <content type="html"><![CDATA[<h1 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h1><blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/24/WebView" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
<p>Android内置webkit内核的高性能浏览器,而WebView则是在这个基础上进行封装后的一个 控件,WebView直译网页视图,我们可以简单的看作一个可以嵌套到界面上的一个浏览器控件！<br>在  版本之后内核换成了 chrome 内核，但是 对外的API并没有更换</p>
</blockquote>
<h2 id="相关的类和方法"><a href="#相关的类和方法" class="headerlink" title="相关的类和方法"></a>相关的类和方法</h2><h3 id="WebChromeClient"><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h3><blockquote>
<p>主要处理 对话框，网站title，icon 加载进度 等;侧重于对 内容的处理</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>onJsAlert(WebView view,String url,String message,JsResult result)</td>
<td style="text-align:left">对js中alert对话框的处理</td>
</tr>
<tr>
<td>onJsConfirm(WebView view,String url,String message,JsResult result)</td>
<td style="text-align:left">对js中confirm对话框的处理</td>
</tr>
<tr>
<td>onJsPrompt(WebView view,String url,String message,String defaultValue,JsPromptResult result)</td>
<td style="text-align:left">对js中 Prompt对话框的处理</td>
</tr>
<tr>
<td>onProgressChanged(WebView view,int newProgress)</td>
<td style="text-align:left">当加载进度发生变化时调用</td>
</tr>
<tr>
<td>onReceivedIcon(WebView view, Bitmap icon)</td>
<td style="text-align:left">获得网页的icon</td>
</tr>
<tr>
<td>onReceivedTitle(WebView view,String title)</td>
<td style="text-align:left">获取网页的标题</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意点： 在对话框处理完之后要对网页做出回应确认处理完成(<code>result.confirm();</code>)不让网页就会卡在 对话框那个地方 ，无法再次进行相应</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> WebChromeClient chromeClient = <span class="keyword">new</span> WebChromeClient()&#123;</div><div class="line"></div><div class="line">     <span class="comment">//网页加载进度显示</span></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">         Log.i(TAG, <span class="string">"onProgressChanged: progress="</span>+newProgress);</div><div class="line">         <span class="keyword">if</span> (newProgress!=<span class="number">100</span>)&#123;</div><div class="line">             pb.setVisibility(View.VISIBLE);</div><div class="line">             pb.setProgress(newProgress);</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">             pb.setVisibility(View.GONE);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</div><div class="line">         Toast.makeText(MainActivity.<span class="keyword">this</span>, message, Toast.LENGTH_SHORT).show();</div><div class="line">         <span class="comment">//确认交互完成 提交结果 勿忘</span></div><div class="line">         result.confirm();</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<h3 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h3><blockquote>
<p>主要处理WebView的各种请求通知； 侧重于对<em>浏览器</em>本身事件重写</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>onPageStared(WebView view,String url)</td>
<td style="text-align:left">通知主程序网页开始加载</td>
</tr>
<tr>
<td>onPageFinished(WebView view,String url,Bitmap favicon)</td>
<td style="text-align:left">通知主程序网页加载完毕</td>
</tr>
<tr>
<td>doUpdateVisitedHistory(WebView view,String url,boolean isReload)</td>
<td style="text-align:left">更新历史记录</td>
</tr>
<tr>
<td>onLoadResource(WebView view,String url)</td>
<td style="text-align:left">通知主程序即将加载指定url的资源</td>
</tr>
<tr>
<td>onScaleChanged(WebView view,float oldScale,float newScale)</td>
<td style="text-align:left">WebView的缩放改变时调用</td>
</tr>
<tr>
<td>shouldOverrideKeyEvent(WebView view,KeyEvent event)</td>
<td style="text-align:left">控制WebView是否处理按键事件，如果返回true则处理，返回false则不处理</td>
</tr>
<tr>
<td>shouldOverrideUrlLoading(WebView view,String url)</td>
<td style="text-align:left">控制对新加载的url的处理;例如在本view打开，返回true说明 处理 ，返回false说明不处理;</td>
</tr>
<tr>
<td>onReceivedError(WebView view,int errorCode,String description,String failingUrl)</td>
<td style="text-align:left">遇到不可恢复的错误信息时调用</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意点：</strong><br><code>shouldOverrideUrlLoading(WebView view,String url)</code> 在 API 21中过时； 替代方法为<code>shouldOverrideUrlLoading(WebView view, WebResourceRequest request)</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主要处理WebView的各种请求通知 侧重于 对 浏览器本身事件重写</span></div><div class="line"><span class="keyword">private</span> WebViewClient viewClient = <span class="keyword">new</span> WebViewClient()&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">        Log.i(TAG, <span class="string">"shouldOverrideUrlLoading: url="</span>+url);</div><div class="line">        <span class="comment">//当打开一个新的 url 时在本view打开，不跳转至浏览器</span></div><div class="line">        view.loadUrl(url);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="WebSettings"><a href="#WebSettings" class="headerlink" title="WebSettings"></a>WebSettings</h3><blockquote>
<p>WebView相关配置的设置，比如setJavaScriptEnabled()设置是否允许JS脚本执行 部分方法如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>setUseWideViewPort(boolean enabled)</td>
<td style="text-align:left">是否支持viewPort</td>
</tr>
<tr>
<td>setLoadWithOverviewMode(boolean enabled)</td>
<td style="text-align:left">自适应屏幕</td>
</tr>
<tr>
<td>setSupportZoom(boolean enabled)</td>
<td style="text-align:left">是否支持缩放</td>
</tr>
<tr>
<td>setBuiltInZoomControls(boolean enabled)</td>
<td style="text-align:left">目前没测试</td>
</tr>
<tr>
<td>setDisplayZoomControls(boolean enabled)</td>
<td style="text-align:left">是否支持缩放控件</td>
</tr>
<tr>
<td>setDefaultFontSize(int size)</td>
<td style="text-align:left">设置默认字体大小</td>
</tr>
<tr>
<td>setDefaultTextEncodingName(String encoding)</td>
<td style="text-align:left">默认字符编码可用来解决中文乱码问题</td>
</tr>
<tr>
<td>setJavaScriptEnabled(boolean enabled)</td>
<td style="text-align:left">是否支持js交互</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//支持js交互</span></div><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//设置默认编码方式</span></div><div class="line">webView.getSettings().setDefaultTextEncodingName(<span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line"> webView.getSettings().setDefaultFontSize(<span class="number">20</span>);</div></pre></td></tr></table></figure>
<h3 id="WebView-自身的常用方法"><a href="#WebView-自身的常用方法" class="headerlink" title="WebView 自身的常用方法"></a>WebView 自身的常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>loadUrl(String url)</td>
<td style="text-align:left">加载指定的url</td>
</tr>
<tr>
<td>loadData(String data,String mimeType,String encoding)</td>
<td style="text-align:left">加载指定的Data到WebView中.使用”data:”作为标记头,该方法不能加载网络数据.其中mimeType为数据类型如:textml,image/jpeg. encoding为字符的编码方式</td>
</tr>
<tr>
<td>loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)</td>
<td style="text-align:left">loadData的升级版 可以以baseUrl为标准路径加载相应的文件等</td>
</tr>
<tr>
<td>getSettings()</td>
<td style="text-align:left">返回一个WebSettings对象,用来控制WebView的属性设置</td>
</tr>
<tr>
<td>setWebViewClient(WebViewClient client)</td>
<td style="text-align:left">为WebView指定一个WebViewClient对象</td>
</tr>
<tr>
<td>setWebChromeClient(WebChromeClient client)</td>
<td style="text-align:left">为WebView制定一个 WebChromeClient对象</td>
</tr>
<tr>
<td>setBackgroundColor(int color)</td>
<td style="text-align:left">设置WebView的背景颜色</td>
</tr>
<tr>
<td>setOnScrollChangeListener(View.OnScrollChangeListener changeListener)</td>
<td style="text-align:left">滚动条滚动监听，在API 23 加入</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意点：</strong> <em>WebView 背景色 需要代码进行设置 ；xml属性不好使；</em></p>
<p>加载指定的Url <code>loadUrl()</code>;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//url</span></div><div class="line">webView.loadUrl(<span class="string">"http://baidu.com"</span>);</div></pre></td></tr></table></figure></p>
<p>加载网页代码 <code>loadData()</code>;如果出现中文乱码问题 需要修改 mimeType 为<code>text/html;charset=utf-8</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载网页代码</span></div><div class="line">webView.loadData(<span class="string">"&lt;h1&gt;title&lt;/h1&gt;"</span>,<span class="string">"text/html"</span>,<span class="string">"utf-8"</span>);</div></pre></td></tr></table></figure></p>
<p>基于一个url加载代码 <code>loadDataWithBaseURL()</code>不需要考虑中文乱码问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加载 以url为基准的数据 比loadData 更加强大</span></div><div class="line"><span class="comment">//parameter1 ：代码内容中相对地址的基准路径</span></div><div class="line"><span class="comment">//parameter2 ：网页代码</span></div><div class="line"><span class="comment">//parameter3 ：数据的内容类型</span></div><div class="line"><span class="comment">//parameter4 : 编码</span></div><div class="line"><span class="comment">//parameter5 ：上一个页面地址</span></div><div class="line">webView.loadDataWithBaseURL(<span class="string">"http://www.baidu.com"</span>,<span class="string">"&lt;html&gt;&lt;h1&gt;title&lt;/h1&gt;this is content&lt;/html&gt;"</span>,<span class="string">"text/html"</span>,<span class="string">"utf-8"</span>,<span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>加载 assets 目录下网页</strong></p>
<ul>
<li><p>目录结构</p>
<p> <img src="\images\Android\WebView\loadData目录.jpg" alt="目录结构"></p>
</li>
<li><p>html  代码</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">     <span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>节操<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">onclick</span>=<span class="string">"del(this)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>贞操<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">onclick</span>=<span class="string">"del(this)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>css</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   <span class="selector-tag">table</span>&#123;</div><div class="line">   <span class="attribute">border</span>:double <span class="number">2px</span> <span class="number">#ccc</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>js</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">delBt</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> result = confirm(<span class="string">"确定删除吗？"</span>);</div><div class="line">   alert(<span class="string">"===="</span>+result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>加载html文件</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  加载 assets目录下文件</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">    InputStream  is =<span class="keyword">null</span>;</div><div class="line">    BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">         is = getAssets().open(<span class="string">"index.html"</span>);</div><div class="line">         reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">while</span> (reader.ready())&#123;</div><div class="line">            sb.append(reader.readLine().trim());</div><div class="line">        &#125;</div><div class="line">        Log.i(TAG, <span class="string">"getIndex: html="</span>+sb.toString());</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                 <span class="keyword">if</span> (is!=<span class="keyword">null</span>)&#123;</div><div class="line">                     is.close();</div><div class="line">                 &#125;</div><div class="line">                <span class="keyword">if</span> (reader!=<span class="keyword">null</span>)&#123;</div><div class="line">                    reader.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>loadDataWithBaseURL</code>加载html网页<blockquote>
<p>因为使用外部样式 需要使用 loadDataWithBaseUrl() 因为这个可以使用相对基准路径 可以将assets目录作为 基准目录；html 根据基准目录加载响应的css</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> String data = getIndex();</div><div class="line">webView.loadDataWithBaseURL(<span class="string">"file:///android_asset/"</span>,data,<span class="string">"text/html"</span>,<span class="string">"utf-8"</span>,<span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<pre><code>注意点：
     路径的格式  ：file:///android_asset/
</code></pre><ul>
<li><p>开启 js交互</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//支持js交互</span></div><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//背景色</span></div><div class="line">webView.setBackgroundColor(Color.GRAY);</div></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<blockquote>
<p> 可以看到 css文件 加载到了 边框已经显示出来了</p>
</blockquote>
<p> <img src="\images\Android\WebView\load_0.png" alt="效果">;</p>
<blockquote>
<p>原始的 网页confirm 确认框</p>
</blockquote>
<p> <img src="E:\Study\hexo\source\images\Android\WebView\load_1.png" alt="效果">;</p>
<blockquote>
<p>处理原始网页confirm 改为 AlertDialog对话框</p>
</blockquote>
<pre><code>//处理JavaScript confirm 对话框
@Override
public boolean onJsConfirm(WebView view, String url, String message, final JsResult result) {
    new AlertDialog.Builder(MainActivity.this)
        .setTitle(&quot;确认提示&quot;)
        .setMessage(message)
        .setNegativeButton(&quot;Ok&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                result.confirm();
            }
        })
        .setNeutralButton(&quot;cancel&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                result.cancel();
            }
        })
        .show();
    return true;
}
</code></pre><p>  <img src="E:\Study\hexo\source\images\Android\WebView\load_3.png" alt="效果">;</p>
<blockquote>
<p>对 alert 对话框进行处理 改为 Toast显示</p>
</blockquote>
<pre><code>            @Override
public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
    Toast.makeText(MainActivity.this, message, Toast.LENGTH_SHORT).show();
    //确认交互完成 提交结果 勿忘
    result.confirm();
    return true;
}
</code></pre></li>
</ul>
<p><img src="\images\Android\WebView\laod_2.png" alt="效果">;</p>
<h2 id="获取网站的-title-ico信息"><a href="#获取网站的-title-ico信息" class="headerlink" title="获取网站的 title ico信息"></a>获取网站的 title ico信息</h2><blockquote>
<p>重写 <code>WebChromeClient</code>内部方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">chromeClient = <span class="keyword">new</span> WebChromeClient()&#123;</div><div class="line">    <span class="comment">//获取 title</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span></span>&#123;</div><div class="line">        tvTitle.setText(title);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取 icon</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedIcon</span><span class="params">(WebView view, Bitmap icon)</span> </span>&#123;</div><div class="line">        ImgIcon.setImageBitmap(icon);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><img src="\images\Android\WebView\getTitleAndIcon.png" alt="效果">;</p>
<h2 id="WebView-的滚动监听"><a href="#WebView-的滚动监听" class="headerlink" title="WebView 的滚动监听"></a>WebView 的滚动监听</h2><blockquote>
<p>在API 23 加入了滚动监听的 get/set方法 ；<br>在API 23之前需要重写 WebView的  <code>protected void onScrollChanged(final int l, final int t, final int oldl,final int oldt){}</code>然后再对外提供一个接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//滚动条监听</span></div><div class="line">webView.setOnScrollChangeListener(<span class="keyword">new</span> View.OnScrollChangeListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollChange</span><span class="params">(View v, <span class="keyword">int</span> scrollX, <span class="keyword">int</span> scrollY, <span class="keyword">int</span> oldScrollX, <span class="keyword">int</span> oldScrollY)</span> </span>&#123;</div><div class="line"><span class="comment">//                Log.e(TAG, "onScrollChange: scrollX="+scrollX);</span></div><div class="line"><span class="comment">//                Log.e(TAG, "onScrollChange: oldScrollX="+oldScrollX);</span></div><div class="line">        Log.e(TAG, <span class="string">"onScrollChange: scrollY="</span>+scrollY);</div><div class="line"><span class="comment">//                Log.e(TAG, "onScrollChange: oldScrollY="+oldScrollY);</span></div><div class="line">        <span class="keyword">if</span> (scrollY&gt;<span class="number">0</span>)&#123;</div><div class="line">            floatButton.setVisibility(View.VISIBLE);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            floatButton.setVisibility(View.GONE);</div><div class="line">        &#125;</div><div class="line">        dy = scrollX;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>关于滚动条的设置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">webView.setHorizontalScrollBarEnabled(<span class="keyword">false</span>);  <span class="comment">//水平滚动条不显示</span></div><div class="line">webView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY); <span class="comment">//WebView内部显示</span></div></pre></td></tr></table></figure>
<blockquote>
<p>回到顶部 实现 使用 方法 <code>scrollTo(x,y);</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">floatButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            Log.i(TAG, <span class="string">"onClick: dy="</span>+dy);</div><div class="line">            webView.scrollTo(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">            floatButton.setVisibility(View.GONE);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="网页自适应"><a href="#网页自适应" class="headerlink" title="网页自适应"></a>网页自适应</h2><blockquote>
<p>必须两个都写上, 缺一不可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">settings.setUseWideViewPort(<span class="keyword">true</span>);    <span class="comment">//支持 viewport</span></div><div class="line">settings.setLoadWithOverviewMode(<span class="keyword">true</span>);   <span class="comment">//自适应屏幕</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="\images\Android\WebView\scaleBefore.png" alt="效果">;<br><img src="\images\Android\WebView\scaleBehind.png" alt="效果">;</p>
<h2 id="支持缩放网页隐蔽缩放控件"><a href="#支持缩放网页隐蔽缩放控件" class="headerlink" title="支持缩放网页隐蔽缩放控件"></a>支持缩放网页隐蔽缩放控件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//保留缩放功能 隐藏缩放控件</span></div><div class="line">settings.setBuiltInZoomControls(<span class="keyword">true</span>);</div><div class="line">settings.setDisplayZoomControls(<span class="keyword">false</span>);</div><div class="line">settings.setSupportZoom(<span class="keyword">true</span>);        <span class="comment">//支持缩放</span></div></pre></td></tr></table></figure>
<h2 id="回退键实现-返回网页回退-而不退出程序"><a href="#回退键实现-返回网页回退-而不退出程序" class="headerlink" title="回退键实现 返回网页回退 而不退出程序"></a>回退键实现 返回网页回退 而不退出程序</h2><blockquote>
<p>重写 <code>onBackPressed()</code> 通过 <code>canGoBack()</code>判断是否能够回退 ，通过 <code>goBack()</code>实现回退 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//判断 WebView 是否可以回退</span></div><div class="line">    <span class="keyword">if</span> (webView.canGoBack())&#123;</div><div class="line">        webView.goBack();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">            Log.e(TAG, <span class="string">"onBackPressed: currentTimeMillis="</span>+System.currentTimeMillis());</div><div class="line">            Log.e(TAG, <span class="string">"onBackPressed: exit="</span>+exit);</div><div class="line">            Log.e(TAG, <span class="string">"onBackPressed: currentTimeMillis- exit="</span>+(System.currentTimeMillis()-exit));</div><div class="line">        <span class="keyword">if</span> (System.currentTimeMillis()-exit &gt;<span class="number">2000</span>)&#123;</div><div class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"再按一次退出"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            exit= System.currentTimeMillis();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="与js交互-js调用本地API"><a href="#与js交互-js调用本地API" class="headerlink" title="与js交互 js调用本地API"></a>与js交互 js调用本地API</h2><h2 id="调用js-function"><a href="#调用js-function" class="headerlink" title="调用js function"></a>调用js function</h2><h1 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h1><blockquote>
<p>参考文章： <a href="http://www.runoob.com/w3cnote/android-tutorial-webview.html" target="_blank" rel="external">http://www.runoob.com/w3cnote/android-tutorial-webview.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android的广播]]></title>
      <url>http://blog.skymxc.com/2016/10/16/Broadcast/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/16/Broadcast/" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h1><p>在Android中 Broadcast是一种 广泛运用在引用程序之间传输信息的机制。<br>而BroadcastReceiver 是对发送出来的Broadcaset进行过滤接受并响应的一类组件。<br>如果不需发送广播到别的应用 使用 LocalBroadcastManger就可以了。</p>
<h2 id="发送和接收流程"><a href="#发送和接收流程" class="headerlink" title="发送和接收流程"></a>发送和接收流程</h2><p>发送和接受的过程：</p>
<ol>
<li>发送<br>首先在需要发送信息的地方 ，把要发送的信息和用于过滤的信息（如action 和 category）封装进intent对象，然后调用 Context.sendBroadcast() 、sendOrderBroadcast()或sendStickBroadcast()方法，把intent对象以广播的形式发送出去</li>
<li>接收<br>当intent发送后，所有已经注册的BroadcastReceiver会检查注册时的IntentFilter是否与发送的intent匹配。若匹配就会调用BroadcastReceiver的onReceiver() 方法。所以 我们定义一个BroadcastReceiver的时候必须实现onReceiver()方法</li>
<li>Note：<br>若在使用sendBroadcast()的方法时指定了接受权限，则只有在AndroidManifest.xml文件中声明了对应权限的BroadcastReceiver才能就收到；<br>同样的，如果在注册BroadcastReceiver时指定了可接受的Broadcast的权限，则只有在包的AndroidManifest.xml中用标签声明了。拥有此权限的Context对象所发送的Broadcast才能被这个BroadcastReceiver所接收。</li>
</ol>
<blockquote>
<p><em>虽然 广播的发送和接受都是通过intent类，但是广播intent完全和 启动activity的intent不同。<br>BroadcastReceiver是无法看到启动activity的intent的。同样的，当你发送一个Broadcast Intent 是不会去发现或启动一个activity的。<br>两者是完全不同的。启动activity的intent是属于前台用户可以看到的操作，而 Broadcat Intent是后台操作 。通常用户是看不到 的。</em></p>
</blockquote>
<hr>
<h2 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h2><blockquote>
<p>两大类 广播类型 ：</p>
</blockquote>
<ol>
<li>Normal broadcasts(普通广播) :使用 Context.sendBroadcast ;完全是异步操作，广播发出后广播的所有接受者通常都在同一时间运行并得到结果，但是顺序不固定。这样效率是很高的但是 接收器的结果并不能影响其他的接受者</li>
<li>Orderd broadcasts(有序广播) :同步操作一次发送到一个接受者 ，按照预先声明的顺序依次接受，（-1000~1000）优先级高的优先接受到广播，优先级高的可以更改广播或者完全终止这个广播（abortBroadcast()），那优先级低的接受者将不能接受到</li>
</ol>
<p><img src="\images\Android\broadcast\Type.png" alt="两大类型"></p>
<hr>
<h2 id="接收广播"><a href="#接收广播" class="headerlink" title="接收广播"></a>接收广播</h2><blockquote>
<p>使用broadcastsReceiver 接受广播，定义自己的广播接收器 只需继承BroadcastsReceiver；<br>    广播接收器创建完毕后需要注册才能接受到。注册分为两种 动态和静态；如果发送的广播附带有权限 ，那接受者必须有相应的权限才能接受到</p>
<ul>
<li>在BroadcastReceiver中一般是用来启动 某个activity或者启动某个服务，不允许执行耗时操作，也不允许开线程，最好是操作不要超过10秒。*</li>
</ul>
</blockquote>
<h3 id="定义-接收器-接收网络变化"><a href="#定义-接收器-接收网络变化" class="headerlink" title="定义 接收器  接收网络变化"></a>定义 接收器  接收网络变化</h3><blockquote>
<p>继承 <code>BroadcastReceiver</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sky-mxc</div><div class="line"> * 网络状态改变接收器</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NetworkReceiver"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"=====网络状态改变了"</span>);</div><div class="line">        Toast.makeText(context,<span class="string">"网络状态改变了"</span>,Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><blockquote>
<p>静态注册：在manifest文件  使用 <receiver> 标签注册 ，并在标签内设置过滤器(intentFilter) 什么时候都可以接受到广播，只要应用程序安装了 就是注册了，如果有广播就能接受 但是规定有部分广播 静态注册无法接受 例如屏幕的关闭和点亮广播。 </receiver></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".receiver.NetworkReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> &gt;</span></div><div class="line">    <span class="comment">&lt;!--priority 默认0--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><blockquote>
<p> 动态注册： 动态的在代码中定义。先定义设置好一个IntentFilter对象。然后在需要注册时调用Context.registerReceiver()，如果取消就调用Context.unregisterReceiver()方法。（动态注册的BroadcastReceiver在context被销毁后也会被干死）</p>
<p>使用 <code>context.registerReceiver()</code> 注册</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">receiver = <span class="keyword">new</span> NetworkReceiver();</div><div class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</div><div class="line">intentFilter.setPriority(<span class="number">600</span>);</div><div class="line">registerReceiver(receiver,intentFilter);</div></pre></td></tr></table></figure>
<blockquote>
<p>取消注册 <code>context.unregisterReceiver();</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    unregisterReceiver(receiver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="\images\Android\broadcast\注册类型.png" alt="注册类型"></p>
<hr>
<h2 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h2><h3 id="发送普通广播"><a href="#发送普通广播" class="headerlink" title="发送普通广播"></a>发送普通广播</h3><blockquote>
<p>使用方法 <code>sendBroadcast()</code> 发送广播。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发送普通广播</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.mxc.example.broadcast.normal"</span>);</div><div class="line">intent.putExtra(<span class="string">"type"</span>,<span class="string">"normal"</span>);</div><div class="line">sendBroadcast(intent);</div></pre></td></tr></table></figure>
<blockquote>
<p>接收发送的广播</p>
</blockquote>
<p>Manifest文件注册</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".receiver.MyReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.mxc.example.broadcast.normal"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接收发送的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyReceiver"</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        Log.i(TAG,<span class="string">"==action:"</span>+intent.getAction()+<span class="string">"===time:"</span>+ SystemClock.currentThreadTimeMillis());</div><div class="line">        Log.i(TAG,<span class="string">"==type:"</span>+intent.getStringExtra(<span class="string">"type"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>使用 <code>sendOrderedBroadcast()</code> 如果接受者不需要权限 设置为null即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent orderIntent = <span class="keyword">new</span> Intent(<span class="string">"com.mxc.example.broadcast.order"</span>);</div><div class="line">orderIntent.putExtra(<span class="string">"type"</span>,<span class="string">"order"</span>);</div><div class="line"><span class="comment">//不添加权限</span></div><div class="line">sendOrderedBroadcast(orderIntent,<span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<p>可以通过 <code>priority</code> 属性来设置接受者的优先级，优先级的接受者可以 终止广播的发送或者 添加额外的数据或者修改 发送的广播数据</p>
<blockquote>
<p>终止 广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (intent.getAction().equals(<span class="string">"com.mxc.example.broadcast.order"</span>))&#123;</div><div class="line">    <span class="comment">//终止广播</span></div><div class="line">    abortBroadcast();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>添加或者修改数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//增加额外的结果</span></div><div class="line">Bundle b = getResultExtras(<span class="keyword">true</span>);<span class="comment">//获取数据 如果没有就创建</span></div><div class="line">b.putString(<span class="string">"result"</span>,<span class="string">"MyReceiver"</span>);</div><div class="line">setResultExtras(b);</div></pre></td></tr></table></figure></p>
<p>获取 额外的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.e(TAG,<span class="string">"==result:"</span>+getResultExtras(<span class="keyword">true</span>).getString(<span class="string">"result"</span>));</div></pre></td></tr></table></figure></p>
<p>Log 信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I/MyReceiver: ==action:com.mxc.example.broadcast.order===time:390</div><div class="line">I/MyReceiver: ==type:order</div><div class="line">I/SecondReceiver: ==action:com.mxc.example.broadcast.order===time:391</div><div class="line">I/SecondReceiver: ==type:order</div><div class="line">E/SecondReceiver: ==result:MyReceiver</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><blockquote>
<p>本地广播和广播的操作几乎是一致的不过是使用  LocalBroadcastManager 来管理的；发送的注册都是    <code>LocalBroadcastManager</code>实例来管理</p>
<p>本地广播和 广播一样  分为 异步广播和同步广播 </p>
</blockquote>
<h3 id="发送本地广播"><a href="#发送本地广播" class="headerlink" title="发送本地广播"></a>发送本地广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent localIntent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcast.local.async"</span>);</div><div class="line">manager.sendBroadcast(localIntent);</div><div class="line"><span class="comment">//发送 同步的（有序）的广播</span></div><div class="line"><span class="comment">//manager.sendBroadcastSync(localIntent);</span></div></pre></td></tr></table></figure>
<h3 id="接收本地广播"><a href="#接收本地广播" class="headerlink" title="接收本地广播"></a>接收本地广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">manager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</div><div class="line">receiver = <span class="keyword">new</span> LocalReceiver();</div><div class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(<span class="string">"com.example.broadcast.local.async"</span>);</div><div class="line">manager.registerReceiver(receiver,filter);</div></pre></td></tr></table></figure>
<h2 id="各种广播"><a href="#各种广播" class="headerlink" title="各种广播"></a>各种广播</h2><ul>
<li><code>&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;&gt;&lt;/action&gt;</code>  开机广播<ul>
<li><code>&lt;permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;</code> 接受的权限</li>
</ul>
</li>
<li><code>android.intent.action.SCREEN_OFF</code> 屏幕点亮   规定 只有动态注册才可以</li>
<li><code>android.intent.action.SCREEN_ON</code> 屏幕关闭  规定 只有动态注册才可以</li>
<li><code>android.net.conn.CONNECTIVITY_CHANGE</code> 网络状态改变</li>
</ul>
<blockquote>
<p>特别感谢： 本文中的图 都是从菜鸟扒的 </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager 获取当前显示的Fragment]]></title>
      <url>http://blog.skymxc.com/2016/10/11/getCurrentFragment/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/11/getCurrentFragment/" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="Viewpager-获取当前显示的fragment"><a href="#Viewpager-获取当前显示的fragment" class="headerlink" title="Viewpager 获取当前显示的fragment"></a>Viewpager 获取当前显示的fragment</h1><h2 id="使用-getSupportFragmentManager-findFragmentByTag-方法"><a href="#使用-getSupportFragmentManager-findFragmentByTag-方法" class="headerlink" title="使用 getSupportFragmentManager().findFragmentByTag()方法"></a>使用 <code>getSupportFragmentManager().findFragmentByTag()</code>方法</h2><blockquote>
<p><code>Viewpager + FragmentPagerAdapter</code> 情况下 才好使； <code>FragmentPagerAdapter</code> 有一个特点 凡是加载过的Fragment 都会被保留,既然Fragment不会被销毁，那我们就可以使用<code>findFragmentByTag()</code> 方法找到它；但问题是动态创建的话 tag的设置；我们知道动态加载时是可以设置tag的，但是动态创建就没法设置了;如果viewpager使用的是适配器是 FragmentPagerAdapter 的话 ，Fragment就会被设置上<code>tag</code> 根据这个<code>tag</code> 我们就可以获取到当前显示的<code>fragment</code>了；下面看看这个过程</p>
<p>新创建时 tag ==null</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">   PageTab  pageTab = tabs.get(position);</div><div class="line">    TabFragment tab = <span class="keyword">new</span> TabFragment();</div><div class="line">    Log.e(TAG,<span class="string">"====getItem===新创建时的tag:=="</span>+tab.getTag());</div><div class="line">    tab.getArguments().putSerializable(<span class="string">"tab"</span>,pageTab);</div><div class="line">    <span class="comment">//取出数据 新建Fragment</span></div><div class="line">    <span class="keyword">return</span> tab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Log 查看 <code>tag</code> 时为 null</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E/FileListPagerAdapter: ====getItem===新创建时的tag:==null</div></pre></td></tr></table></figure>
<blockquote>
<p>将 适配器设置给Viewpager后 的<code>tag</code></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">E/MainActivity: ==findCurrentFragment==pagerId:2131492976</div><div class="line">E/MainActivity: ==findCurrentFragment==currentItem:0</div><div class="line">E/MainActivity: =======findCurrentFragment=========完整Tag===android:switcher:2131492976:0</div><div class="line">E/MainActivity: =======findCurrentFragment=========当前显示的Fragment 的tag===:android:switcher:2131492976:0</div></pre></td></tr></table></figure>
<blockquote>
<p> 可以看到 <code>tag</code>的组成；四部分 </p>
<ul>
<li>android :   &nbsp;&nbsp;&nbsp;&nbsp;   固定部分</li>
<li>switcher :  &nbsp;&nbsp;&nbsp;&nbsp;    固定部分</li>
<li>2131492976 : &nbsp;&nbsp;&nbsp;&nbsp;  ViewPager 的id</li>
<li>0     :     &nbsp;&nbsp;&nbsp;&nbsp;    ViewPager 当前显示的itemPostion</li>
</ul>
<p>既然<code>FragmentPagerAdapter</code>的特点是保存fragment状态。  就可以利用这个特点通过 <code>findFragmentByTag()</code> 找到这个Fragment</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Viewpager + FragmentPagerAdapter 情况下 获取 当前显示的Fragment,只能找已经加载过的Fragment</span></div><div class="line">Fragment fragment =  getSupportFragmentManager().findFragmentByTag(<span class="string">"android:switcher:"</span>+pager.getId()+<span class="string">":"</span>+pager.getCurrentItem());</div></pre></td></tr></table></figure>
<hr>
<h2 id="重写适配器的-setPrimaryItem-方法"><a href="#重写适配器的-setPrimaryItem-方法" class="headerlink" title="重写适配器的 setPrimaryItem()方法 ;"></a>重写适配器的 <code>setPrimaryItem()</code>方法 ;</h2><blockquote>
<p>这个方法在每次viewpager滑动后都会被调用 而 object参数就是显示的Fragment ；可以在适配器中定义个变量 <code>currentFragment</code> 每次改变时都会获取到显示的Fragment</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrimaryItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">    currentFragment = (TabFragment) object;</div><div class="line">    <span class="keyword">super</span>.setPrimaryItem(container, position, object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这种方式有一个缺陷 <code>setPrimaryItem()</code>是在 <code>viewpager</code>的滑动监听执行完后才会调用的；所以在 换的个滑动监听中获取当前显示的Fragment 是不对的</p>
</blockquote>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[6.0 运行时权限处理]]></title>
      <url>http://blog.skymxc.com/2016/10/08/permission/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明出处：<a href="https://sky-mxc.github.io/2016/10/08/permission" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="6-0-运行时权限处理"><a href="#6-0-运行时权限处理" class="headerlink" title="6.0 运行时权限处理"></a>6.0 运行时权限处理</h1><blockquote>
<p>在6.0以前 权限都是在安装时授权的，如果用户不授权就无法安装；<br>Android从6.0（API 23）开始 使用运行时权限，而不是像以前那样安装时授权。当你需要某些权限时，系统会向用户去申请权限。用户可以随时取消授权给你的权限。<br>6.0中权限分为两类 普通权限和危险权限，普通权限在AndroidManifest 文件中注册就可以得到，对于能获得用户隐私的权限属于危险权限。在使用的时候必须用户授权才能使用。例如 拍照，录音 sd卡的操作，危险权限被分为很多组，只要一组中的其中一项被授权 Android 就会将这一组的权限打包都授权给你app</p>
</blockquote>
<p><img src="\images\Android\permission\permission0.png" alt="image"></p>
<h2 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h2><blockquote>
<p>危险权限被分为了9组</p>
</blockquote>
<pre><code>Permission Group    Permissions

CALENDAR    • READ_CALENDAR 
            • WRITE_CALENDAR

CAMERA            • CAMERA

CONTACTS    • READ_CONTACTS
            • WRITE_CONTACTS
            • GET_ACCOUNTS

LOCATION    • ACCESS_FINE_LOCATION
            • ACCESS_COARSE_LOCATION
MICROPHONE    • RECORD_AUDIO

PHONE       • READ_PHONE_STATE
            • CALL_PHONE
            • READ_CALL_LOG
            • WRITE_CALL_LOG
            • ADD_VOICEMAIL
            • USE_SIP
            • PROCESS_OUTGOING_CALLS

SENSORS             • BODY_SENSORS

    SMS            • SEND_SMS
            • RECEIVE_SMS
            • READ_SMS
            • RECEIVE_WAP_PUSH
            • RECEIVE_MMS

STORAGE    • READ_EXTERNAL_STORAGE
        • WRITE_EXTERNAL_STORAGE
</code></pre><h2 id="普通权限"><a href="#普通权限" class="headerlink" title="普通权限"></a>普通权限</h2><pre><code>  • ACCESS_LOCATION_EXTRA_COMMANDS  
• ACCESS_NETWORK_STATE
• ACCESS_NOTIFICATION_POLICY
• ACCESS_WIFI_STATE
• BLUETOOTH
• BLUETOOTH_ADMIN
• BROADCAST_STICKY
• CHANGE_NETWORK_STATE
• CHANGE_WIFI_MULTICAST_STATE
• CHANGE_WIFI_STATE
• DISABLE_KEYGUARD
• EXPAND_STATUS_BAR
• GET_PACKAGE_SIZE
• INSTALL_SHORTCUT
• INTERNET
• KILL_BACKGROUND_PROCESSES
• MODIFY_AUDIO_SETTINGS
• NFC
• READ_SYNC_SETTINGS
• READ_SYNC_STATS
• RECEIVE_BOOT_COMPLETED
• REORDER_TASKS
• REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
• REQUEST_INSTALL_PACKAGES
• SET_ALARM
• SET_TIME_ZONE
• SET_WALLPAPER
• SET_WALLPAPER_HINTS
• TRANSMIT_IR
• UNINSTALL_SHORTCUT
• USE_FINGERPRINT
• VIBRATE
• WAKE_LOCK
    • WRITE_SYNC_SETTINGS
</code></pre><h2 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h2><h3 id="targetSdkVerion"><a href="#targetSdkVerion" class="headerlink" title="targetSdkVerion"></a>targetSdkVerion</h3><blockquote>
<p>申请权限之前必须先说一下tartgetSdkVersion ，目标sdk版本，一般定义在build.gradle文件中。<br>    如果 targetSDKVersion 是22 安装好之后 Android系统就知道这个App在系统API22一下都测试过了并且能正确运行的，假如这个App运行在了Android6.0系统上，Android就会对这个App很”照顾“，兼容它正确运行。6.0系统会把App申请的权限都默认给这个App。<br>但是 ，在6.0系统 ，用户可随时撤销授权给app的权限 ，即使系统默认都授权给你，用户也可以取消掉。这时就没权限了。所以即使是targetSDKVersion &lt; 23 也不是就万事大吉了。Android为我们提供了android.support.v4.content.PermissionChecker 来检测是否具有某些权限</p>
<p>判断 targetSdkVersion</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查targetSDKVersion 是否在 23以上</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkTargetSdkVersion</span><span class="params">()</span></span>&#123;</div><div class="line">    PackageInfo info= <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        info = getPackageManager().getPackageInfo(getPackageName(),<span class="number">0</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> targetSdk=  info.applicationInfo.targetSdkVersion;</div><div class="line">    log(<span class="string">"TargetSdkVersion:"</span>+targetSdk);</div><div class="line">    <span class="keyword">if</span> (targetSdk&gt;=Build.VERSION_CODES.M)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h3><blockquote>
<p>在去请求权限之前 应该先检查一下系统 的版本 如果系统版本在6.0以上再去请求权限，如果不在就不去请求，直接使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查系统版本是否在6.0或者6.0以上</div><div class="line"> * <span class="doctag">@return</span> </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkVersion</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// Build.VERSION.SDK_INT 当前系统版本</span></div><div class="line">    <span class="comment">//Build.VERSION_CODES.M 6.0版本</span></div><div class="line">    <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;=Build.VERSION_CODES.M)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>PermissionChecker.checkSelfPermission()</strong> 方法就是用于检查App自身有没有某一个权限 此方法适用于 targetSdkVersion &lt; 23</p>
<p> <strong>context.checkSelfPermission()</strong>  适用于 targetSDKVersion &gt;=23</p>
<p>返回结果有三种 状态</p>
<ul>
<li>PermissionChecker.PERMISSION_GRANTED; //有权限</li>
<li>PermissionChecker.PERMISSION_DENIED ; //无权限</li>
<li>PermissionChecker.PERMISSION_DENIED_APP_OP;//无权限</li>
</ul>
<p>PermissionChecker.PERMISSION_DENIED 和 PermissionChecker.PERMISSION_DENIED_APP_OP 的区别:</p>
<ul>
<li>targetSDKVersion 小于23没有权限就返回 PermissionChecker.PERMISSION_DENIED_APP_OP</li>
<li>targetSdkVersion23或者以上的返回 PermissionChecker.PERMISSION_DENIED</li>
</ul>
</blockquote>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//检测targetSDKVersion 是否在23以上</span></div><div class="line"><span class="keyword">if</span> (checkTargetSdkVersion())&#123;</div><div class="line">    <span class="comment">//targetSDKVersion &gt;=23</span></div><div class="line">    <span class="comment">//检查是否具有读取短信的权限</span></div><div class="line">    result = checkSelfPermission(permission);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">//targetSDKVersion &lt;23</span></div><div class="line">    <span class="comment">//检查是否具有读取短信的权限</span></div><div class="line">    result= PermissionChecker.checkSelfPermission(<span class="keyword">this</span>,permission);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="请求权限-1"><a href="#请求权限-1" class="headerlink" title="请求权限"></a>请求权限</h3><blockquote>
<p>使用 requestPermissions() 方法去请求权限 参数有两个 权限数组 和请求码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requestPermissions(<span class="keyword">new</span> String[]&#123;<span class="string">"android.permission.READ_SMS"</span>&#125;,<span class="number">10</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>在请求权限之前最好是跟用户解释清楚为什么要使用这个权限 ，用时候用户并不清楚为什么使用权限 就会被拒绝，如果一个权限被请求一次以上 在系统申请权限的Dialog会出现一个不再提醒的复选框 那怎么判断 用户是否勾选了这个 不再提醒呢 ，Android提供了 shouldShowRequestPermissionRationale() 方法;</p>
<p>这个方法 在 第一次请求的时候 和 在用户勾选了不再提醒时  返回false ，其他均返回true</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一次请求就返回false 拒绝过返回true 或者 用户选择不再提示返回false</span></div><div class="line"><span class="keyword">boolean</span> answer=  shouldShowRequestPermissionRationale(permission);</div><div class="line">log(<span class="string">"shouldShowRequestPermissionRationale :"</span>+answer);</div><div class="line"><span class="keyword">if</span> (!answer)&#123;</div><div class="line">    <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).setTitle(<span class="string">"权限说明"</span>)</div><div class="line">            .setMessage(<span class="string">"此功能需要读取短信的权限，没有权限无法使用此功能。请在稍后授权后使用"</span>)</div><div class="line">            .setNegativeButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.M)</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line"></div><div class="line">                    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .setNeutralButton(<span class="string">"取消"</span>,<span class="keyword">null</span>)</div><div class="line">            .show();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="\images\Android\permission\PermissionDescription.png" alt="image"></p>
<hr>
<h2 id="处理用户响应"><a href="#处理用户响应" class="headerlink" title="处理用户响应"></a>处理用户响应</h2><blockquote>
<p>重写 activity的 onRequestPermissionsResult() 的方法 处理权限的响应</p>
<p>权限的申请是可以多个权限一块申请的 ，所以 响应结果也是 数组和 请求的权限数组对应</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  申请权限的响应</div><div class="line"> * <span class="doctag">@param</span> requestCode 请求码</div><div class="line"> * <span class="doctag">@param</span> permissions 权限数组</div><div class="line"> * <span class="doctag">@param</span> grantResults 结果数组</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode)&#123;</div><div class="line">        <span class="keyword">case</span> SMS:</div><div class="line">          LogCheckResult(grantResults[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">if</span> (grantResults.length&gt;<span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>]==PermissionChecker.PERMISSION_GRANTED)&#123;</div><div class="line">                <span class="comment">//TODO 读取短信</span></div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                tv.setText(getSmsInPhone());</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权失败"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">       </div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完整的短信读取权限申请-流程"><a href="#完整的短信读取权限申请-流程" class="headerlink" title="完整的短信读取权限申请 流程"></a>完整的短信读取权限申请 流程</h2><blockquote>
<p>请求权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 请求短信权限</div><div class="line"> */</div><div class="line"><span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.M)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestSms</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 权限</span></div><div class="line">        <span class="keyword">final</span> String permission = <span class="string">"android.permission.READ_SMS"</span>;</div><div class="line">    <span class="comment">//检查当前系统版本是否在6.0以上</span></div><div class="line">    <span class="keyword">if</span> (checkVersion())&#123;</div><div class="line">        <span class="keyword">int</span> result =-<span class="number">1</span>;</div><div class="line">        <span class="comment">//检测targetSDKVersion 是否在23以上</span></div><div class="line">            <span class="keyword">if</span> (checkTargetSdkVersion())&#123;</div><div class="line">                <span class="comment">//targetSDKVersion &gt;=23</span></div><div class="line">                <span class="comment">//检查是否具有读取短信的权限</span></div><div class="line">                result = checkSelfPermission(permission);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//targetSDKVersion &lt;23</span></div><div class="line">                <span class="comment">//检查是否具有读取短信的权限</span></div><div class="line">                result= PermissionChecker.checkSelfPermission(<span class="keyword">this</span>,permission);</div><div class="line">            &#125;</div><div class="line">            LogCheckResult(result);</div><div class="line">            <span class="keyword">if</span>(result==PermissionChecker.PERMISSION_GRANTED)&#123;</div><div class="line">                <span class="comment">//已经有了权限</span></div><div class="line">                <span class="comment">//TODO 读取短信</span></div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                tv.setText(getSmsInPhone());</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//没有权限</span></div><div class="line">                <span class="comment">//TODO 请求权限</span></div><div class="line">                <span class="comment">// 第一次请求就返回false 拒绝过返回true 或者 用户选择不再提示返回false</span></div><div class="line">              <span class="keyword">boolean</span> answer=  shouldShowRequestPermissionRationale(permission);</div><div class="line">                log(<span class="string">"shouldShowRequestPermissionRationale :"</span>+answer);</div><div class="line">                <span class="keyword">if</span> (!answer)&#123;</div><div class="line">                    <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).setTitle(<span class="string">"权限说明"</span>)</div><div class="line">                            .setMessage(<span class="string">"此功能需要读取短信的权限，没有权限无法使用此功能。请在稍后授权后使用"</span>)</div><div class="line">                            .setNegativeButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                                <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.M)</div><div class="line">                                <span class="meta">@Override</span></div><div class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                                    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</div><div class="line">                                &#125;</div><div class="line">                            &#125;)</div><div class="line">                            .setNeutralButton(<span class="string">"取消"</span>,<span class="keyword">null</span>)</div><div class="line">                            .show();</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//无需请求</span></div><div class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">        tv.setText(getSmsInPhone());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>响应处理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (requestCode)&#123;</div><div class="line">        <span class="keyword">case</span> SMS:</div><div class="line">          LogCheckResult(grantResults[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">if</span> (grantResults.length&gt;<span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>]==PermissionChecker.PERMISSION_GRANTED)&#123;</div><div class="line">                <span class="comment">//TODO 读取短信</span></div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                tv.setText(getSmsInPhone());</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权失败"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">       </div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>短信读取 代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSmsInPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">    log(<span class="string">"开始读取短信"</span>);</div><div class="line">    <span class="keyword">final</span> String SMS_URI_ALL = <span class="string">"content://sms/"</span>;</div><div class="line">    <span class="keyword">final</span> String SMS_URI_INBOX = <span class="string">"content://sms/inbox"</span>;</div><div class="line">    <span class="keyword">final</span> String SMS_URI_SEND = <span class="string">"content://sms/sent"</span>;</div><div class="line">    <span class="keyword">final</span> String SMS_URI_DRAFT = <span class="string">"content://sms/draft"</span>;</div><div class="line">    <span class="keyword">final</span> String SMS_URI_OUTBOX = <span class="string">"content://sms/outbox"</span>;</div><div class="line">    <span class="keyword">final</span> String SMS_URI_FAILED = <span class="string">"content://sms/failed"</span>;</div><div class="line">    <span class="keyword">final</span> String SMS_URI_QUEUED = <span class="string">"content://sms/queued"</span>;</div><div class="line"></div><div class="line">    StringBuilder smsBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Uri uri = Uri.parse(SMS_URI_ALL);</div><div class="line">        String[] projection = <span class="keyword">new</span> String[] &#123; <span class="string">"_id"</span>, <span class="string">"address"</span>, <span class="string">"person"</span>, <span class="string">"body"</span>, <span class="string">"date"</span>, <span class="string">"type"</span> &#125;;</div><div class="line">        Cursor cur = getContentResolver().query(uri, projection, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"date desc"</span>);      <span class="comment">// 获取手机内部短信</span></div><div class="line">        log(<span class="string">"cursor:"</span>+cur.getCount());</div><div class="line">        <span class="keyword">if</span> (cur.moveToFirst()) &#123;</div><div class="line">            <span class="keyword">int</span> index_Address = cur.getColumnIndex(<span class="string">"address"</span>);</div><div class="line">            <span class="keyword">int</span> index_Person = cur.getColumnIndex(<span class="string">"person"</span>);</div><div class="line">            <span class="keyword">int</span> index_Body = cur.getColumnIndex(<span class="string">"body"</span>);</div><div class="line">            <span class="keyword">int</span> index_Date = cur.getColumnIndex(<span class="string">"date"</span>);</div><div class="line">            <span class="keyword">int</span> index_Type = cur.getColumnIndex(<span class="string">"type"</span>);</div><div class="line"></div><div class="line">            do &#123;</div><div class="line">                String strAddress = cur.getString(index_Address);</div><div class="line">                <span class="keyword">int</span> intPerson = cur.getInt(index_Person);</div><div class="line">                String strbody = cur.getString(index_Body);</div><div class="line">                <span class="keyword">long</span> longDate = cur.getLong(index_Date);</div><div class="line">                <span class="keyword">int</span> intType = cur.getInt(index_Type);</div><div class="line"></div><div class="line">                SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">                Date d = <span class="keyword">new</span> Date(longDate);</div><div class="line">                String strDate = dateFormat.format(d);</div><div class="line"></div><div class="line">                String strType = <span class="string">""</span>;</div><div class="line">                <span class="keyword">if</span> (intType == <span class="number">1</span>) &#123;</div><div class="line">                    strType = <span class="string">"接收"</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intType == <span class="number">2</span>) &#123;</div><div class="line">                    strType = <span class="string">"发送"</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    strType = <span class="string">"null"</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                smsBuilder.append(<span class="string">"[ "</span>);</div><div class="line">                smsBuilder.append(strAddress + <span class="string">", "</span>);</div><div class="line">                smsBuilder.append(intPerson + <span class="string">", "</span>);</div><div class="line">                smsBuilder.append(strbody + <span class="string">", "</span>);</div><div class="line">                smsBuilder.append(strDate + <span class="string">", "</span>);</div><div class="line">                smsBuilder.append(strType);</div><div class="line">                smsBuilder.append(<span class="string">" ]\n\n"</span>);</div><div class="line">            &#125; <span class="keyword">while</span> (cur.moveToNext());</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!cur.isClosed()) &#123;</div><div class="line">                cur.close();</div><div class="line">                cur = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            smsBuilder.append(<span class="string">"no result!"</span>);</div><div class="line">        &#125; <span class="comment">// end if</span></div><div class="line"></div><div class="line">        smsBuilder.append(<span class="string">"getSmsInPhone has executed!"</span>);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">catch</span> (SQLiteException ex) &#123;</div><div class="line">        log(<span class="string">"SQLiteException in getSmsInPhone"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> smsBuilder.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>读取短信的代码参考这位大神的代码：<a href="http://blog.csdn.net/ithomer/article/details/7328321" target="_blank" rel="external">http://blog.csdn.net/ithomer/article/details/7328321</a></p>
<p>关于这次的Demo，github 地址： <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/permission" target="_blank" rel="external">https://github.com/sky-mxc/AndroidDemo/tree/master/permission</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Animation]]></title>
      <url>http://blog.skymxc.com/2016/10/05/Animation/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/05/Animation" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><ul>
<li>帧动画</li>
<li>补间动画</li>
<li>属性动画</li>
<li>Interpolator</li>
</ul>
<h2 id="帧动画-FrameAnimation"><a href="#帧动画-FrameAnimation" class="headerlink" title="帧动画 FrameAnimation"></a>帧动画 FrameAnimation</h2><blockquote>
<p>其实就是一个Drawable ，将一系列的图片联合起来顺序的播放。形成动画效果。<br>帧动画本质就是一些图片的集合，要播放这个动画就必须将一系列的图片全部加载进内存中，所以帧动画的图片不易过大。</p>
</blockquote>
<h3 id="创建drawable文件"><a href="#创建drawable文件" class="headerlink" title="创建drawable文件"></a>创建drawable文件</h3><ul>
<li>oneshot  ：是否只播放一次，</li>
<li>drawable ：一帧的图片</li>
<li>duration ：一帧播放的时间 毫秒单位<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">android:oneshot</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_01"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_02"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_03"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_04"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_5"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_6"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用刚才的drawable文件做背景"><a href="#使用刚才的drawable文件做背景" class="headerlink" title="使用刚才的drawable文件做背景"></a>使用刚才的drawable文件做背景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/image"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:adjustViewBounds</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@drawable/drawable_frame"</span></div><div class="line">    <span class="attr">android:clickable</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:onClick</span>=<span class="string">"onClick"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="播放动画"><a href="#播放动画" class="headerlink" title="播放动画"></a>播放动画</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FrameAnimation  帧动画</span></div><div class="line">((AnimationDrawable)image.getBackground()).start();</div></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="E:\Study\hexo\source/images/Android/animation/frameAnimation.gif" alt="image"></h2><h2 id="补间动画-tweenAnimation"><a href="#补间动画-tweenAnimation" class="headerlink" title="补间动画 tweenAnimation"></a>补间动画 tweenAnimation</h2><blockquote>
<pre><code>主要是对view的内容完成一系列的图形变换(缩放，透明，旋转，平移）来实现动画效果。
具体来说就是 预先定义一些指令 ，这些指令指定了图形变换的类型，触发时间，持续时间。指令可以预先定义在xml文件中也可以源代码的方式定义。程序沿着时间线执行这些指令就可以实现动画效果。
Android中提供了 Animation，Interpolator，Transformation 等类具体实现Tween动画，
Animation类及其子类是动画的核心模块，它实现了 各种动画效果如 平移 旋转 缩放 改变透明度等等。
Tween动画的每一帧都根据Interpolator对view的内容做一次图像变换，因此Animation的核心工作是做变换（transformation）；
</code></pre><p>Animation是基类 ，它记录了动画的通用属性和方法。主要的属性包括动画持续时间、重复次数、Interpolator等。</p>
</blockquote>
<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ul>
<li>duration    ：动画时间  毫秒</li>
<li>infinite  ：无限次</li>
<li>fillAfter    是否停顿在最后一针</li>
<li>repeatMode  重复模式  值：restart 重新开始   reserve 反复</li>
<li>repeatCount ：重复次数</li>
<li>startOffset  ：开始延迟时间</li>
</ul>
<h3 id="常用Animation子类："><a href="#常用Animation子类：" class="headerlink" title="常用Animation子类："></a>常用Animation子类：</h3><ul>
<li>AlphaAnimation   改变Alpha值</li>
<li>TranslationAnimation  平移动画</li>
<li>RotateAnimation 旋转动画</li>
<li>ScaleAnimation 缩放动画</li>
<li>AnimationSet 动画集合</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p>补间动画 既可以使用 xml文件预先定义 也可以使用代码动态创建;<br>使用xml文件定义必须在 res/anim/目录下创建 文件;<br>可以使用 AnimationUtils的静态方法 loadAnimation()将动画文件加载</p>
</blockquote>
<h4 id="AlphaAnimation-透明度改变动画"><a href="#AlphaAnimation-透明度改变动画" class="headerlink" title="AlphaAnimation  透明度改变动画"></a>AlphaAnimation  透明度改变动画</h4><h5 id="定义-AlphaAnimation-文件"><a href="#定义-AlphaAnimation-文件" class="headerlink" title="定义 AlphaAnimation 文件"></a>定义 AlphaAnimation 文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">alpha</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:fromAlpha</span>=<span class="string">"1"</span></div><div class="line">    <span class="attr">android:toAlpha</span>=<span class="string">"0.1"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></div><div class="line">    <span class="attr">android:repeatCount</span>=<span class="string">"5"</span></div><div class="line">    <span class="attr">android:repeatMode</span>=<span class="string">"reverse"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">alpha</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="加载-动画文件并播放"><a href="#加载-动画文件并播放" class="headerlink" title="加载 动画文件并播放"></a>加载 动画文件并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AlphaAnimation xml定义</span></div><div class="line">AlphaAnimation alphaAnimation = (AlphaAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_alpha);</div><div class="line">view.startAnimation(alphaAnimation);</div></pre></td></tr></table></figure>
<h5 id="代码创建"><a href="#代码创建" class="headerlink" title="代码创建"></a>代码创建</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//AlphaAnimation 代码创建</span></div><div class="line">AlphaAnimation alphaAnimation1 = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.1f</span>,<span class="number">0.8f</span>);</div><div class="line">alphaAnimation1.setDuration(<span class="number">2000</span>);</div><div class="line">alphaAnimation1.setStartOffset(<span class="number">100</span>);</div><div class="line">alphaAnimation1.setFillAfter(<span class="keyword">true</span>);</div><div class="line">alphaAnimation1.setRepeatCount(<span class="number">2</span>);</div><div class="line">alphaAnimation1.setRepeatMode(Animation.REVERSE);</div><div class="line">view.startAnimation(alphaAnimation1);</div></pre></td></tr></table></figure>
<h4 id="TranslationAnimation-平移动画"><a href="#TranslationAnimation-平移动画" class="headerlink" title="TranslationAnimation 平移动画"></a>TranslationAnimation 平移动画</h4><blockquote>
<ul>
<li>fromXDelta  X轴开始坐标</li>
<li>toXDelta    X轴结束坐标</li>
<li>fromYDelta  Y 轴开始坐标</li>
<li>toYDelta    Y轴结束坐标</li>
</ul>
</blockquote>
<h5 id="定义动画文件"><a href="#定义动画文件" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">translate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></div><div class="line">    <span class="attr">android:fromXDelta</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">android:toXDelta</span>=<span class="string">"300"</span></div><div class="line">    <span class="attr">android:repeatMode</span>=<span class="string">"reverse"</span></div><div class="line">    <span class="attr">android:repeatCount</span>=<span class="string">"3"</span></div><div class="line">    <span class="attr">android:fillBefore</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:fromYDelta</span>=<span class="string">"200"</span></div><div class="line">    <span class="attr">android:toYDelta</span>=<span class="string">"100"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">translate</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="加载动画并播放"><a href="#加载动画并播放" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TranslateAnimation translateAnimation = (TranslateAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_translation);</div><div class="line">view.startAnimation(translateAnimation);</div></pre></td></tr></table></figure>
<h5 id="代码创建动画"><a href="#代码创建动画" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TranslateAnimation translateAnimation1 = <span class="keyword">new</span> TranslateAnimation(-<span class="number">10</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">translateAnimation1.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</div><div class="line">translateAnimation1.setDuration(<span class="number">2000</span>);</div><div class="line">view.startAnimation(translateAnimation1);</div></pre></td></tr></table></figure>
<h4 id="RotateAnimation-旋转动画"><a href="#RotateAnimation-旋转动画" class="headerlink" title="RotateAnimation 旋转动画"></a>RotateAnimation 旋转动画</h4><blockquote>
<ul>
<li>fromDegrees:起始角度    </li>
<li>toDegrees:到达角度</li>
<li>pivotX:X轴中心点    </li>
<li>pivotY:Y轴中心点     </li>
</ul>
</blockquote>
<p><strong>中心点取值模式：</strong></p>
<blockquote>
<ul>
<li>固定像素    50</li>
<li>相对于自身    50%</li>
<li>相对于父容器    50%p</li>
</ul>
</blockquote>
<h5 id="定义动画文件-1"><a href="#定义动画文件-1" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line">    <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line">    <span class="attr">android:toDegrees</span>=<span class="string">"90"</span></div><div class="line">    <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></div><div class="line">    <span class="attr">android:fillAfter</span>=<span class="string">"true"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">rotate</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="加载动画并播放-1"><a href="#加载动画并播放-1" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RotateAnimation rotate = (RotateAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_rotate);</div><div class="line">view.startAnimation(rotate);</div></pre></td></tr></table></figure>
<h5 id="代码创建动画-1"><a href="#代码创建动画-1" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在右上角中心，0-180度</span></div><div class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">180</span>);</div><div class="line"><span class="comment">//（100，100）像素位中心</span></div><div class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">180</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">//相对于自身一半为中心</span></div><div class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">180</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>沿中心旋转 45°</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RotateAnimation rotateAnimation = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>,<span class="number">45</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</div><div class="line">rotateAnimation.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line">rotateAnimation.setDuration(<span class="number">2000</span>);</div><div class="line">rotateAnimation.setFillAfter(<span class="keyword">true</span>);</div><div class="line">view.startAnimation(rotateAnimation);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="ScaleAnimation-缩放动画"><a href="#ScaleAnimation-缩放动画" class="headerlink" title="ScaleAnimation 缩放动画"></a>ScaleAnimation 缩放动画</h4><blockquote>
<ul>
<li>fromXScale:X轴起始缩放值        </li>
<li>fromYScale:Y轴起始缩放值</li>
<li>toXScale:X轴到达缩放值            </li>
<li>toYScale:Y轴到达缩放值</li>
<li>缩放值可以是缩放倍数，也可以是缩放到具体尺寸</li>
</ul>
</blockquote>
<h5 id="定义动画文件-2"><a href="#定义动画文件-2" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">scale</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:fromXScale</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">android:toXScale</span>=<span class="string">"2"</span></div><div class="line">    <span class="attr">android:fromYScale</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">android:toYScale</span>=<span class="string">"3"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></div><div class="line">    <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line">    <span class="attr">android:pivotX</span>=<span class="string">"50%"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">scale</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="加载动画并播放-2"><a href="#加载动画并播放-2" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ScaleAnimation scale = (ScaleAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_scale);</div><div class="line">view.startAnimation(scale);</div></pre></td></tr></table></figure>
<h5 id="代码创建动画-2"><a href="#代码创建动画-2" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ScaleAnimation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>);</div><div class="line">ScaleAnimation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ScaleAnimation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>,Animation.RELATIVE_TO_PARENT, <span class="number">0.5f</span>,Animation.RELATIVE_TO_PARENT, <span class="number">0.5f</span>);</div></pre></td></tr></table></figure>
<h4 id="AnimationSet-动画集合"><a href="#AnimationSet-动画集合" class="headerlink" title="AnimationSet 动画集合"></a>AnimationSet 动画集合</h4><h5 id="定义动画文件-3"><a href="#定义动画文件-3" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"2000"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">rotate</span> <span class="attr">android:pivotX</span>=<span class="string">"0"</span></span></div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"0"</span></div><div class="line">        <span class="attr">android:fromDegrees</span>=<span class="string">"-180"</span></div><div class="line">        <span class="attr">android:toDegrees</span>=<span class="string">"0"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">scale</span> <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">android:fromXScale</span>=<span class="string">"0"</span></div><div class="line">        <span class="attr">android:toXScale</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:fromYScale</span>=<span class="string">"0"</span></div><div class="line">        <span class="attr">android:toYScale</span>=<span class="string">"1"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="加载动画并播放-3"><a href="#加载动画并播放-3" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_set);</div><div class="line">view.startAnimation(animation);</div></pre></td></tr></table></figure>
<h5 id="代码创建动画-3"><a href="#代码创建动画-3" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//子动画是否共用差值器</span></div><div class="line">AnimationSet set = <span class="keyword">new</span> AnimationSet(<span class="keyword">true</span>);</div><div class="line">set.addAnimation(<span class="keyword">new</span> RotateAnimation(-<span class="number">180</span>,<span class="number">0</span>));</div><div class="line">set.addAnimation(<span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>));</div><div class="line">set.setDuration(<span class="number">2000</span>);</div><div class="line">set.setFillAfter(<span class="keyword">true</span>);</div><div class="line">view.startAnimation(set);</div></pre></td></tr></table></figure>
<hr>
<h2 id="Interpolator"><a href="#Interpolator" class="headerlink" title="Interpolator"></a>Interpolator</h2><blockquote>
<p> Interpolator 被用来修饰动画效果，定义动画的变化率，可以使存在的动画效果accelerated(加速)，decelerated(减速),repeated(重复),bounced(弹跳)等。</p>
<p>常用的差值器</p>
<ul>
<li>LinearIntepolator 匀速效果</li>
<li>DecelerateInterpolator  减速效果</li>
<li>Accelerateinterpolator  加速效果</li>
<li>CycleInterpolator     循环效果</li>
<li>BouncedInterpolator   弹跳效果</li>
</ul>
<hr>
<h2 id="Property-Animation-属性动画"><a href="#Property-Animation-属性动画" class="headerlink" title="Property Animation 属性动画"></a>Property Animation 属性动画</h2><p>属性动画的用处有很多很多，我就列几个常用的方式把；具体参考官网文档：<a href="https://developer.android.com/guide/topics/graphics/prop-animation.html" target="_blank" rel="external">https://developer.android.com/guide/topics/graphics/prop-animation.html</a></p>
<p>补间动画并不能改变view真实的位置，只是形式上的位置改变。而属性动画会将view的真实位置改变。</p>
<p>属性动画定义必须在 res/animator目录下</p>
</blockquote>
<h3 id="ValueAnimation"><a href="#ValueAnimation" class="headerlink" title="ValueAnimation"></a>ValueAnimation</h3><blockquote>
<p>valueType 常用三种取值：</p>
<ul>
<li>intType整数值、</li>
<li>floatType浮点值、</li>
<li>colorType颜色值、</li>
</ul>
</blockquote>
<h4 id="定义动画文件-4"><a href="#定义动画文件-4" class="headerlink" title="定义动画文件"></a>定义动画文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">animator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:valueFrom</span>=<span class="string">"2"</span></div><div class="line">    <span class="attr">android:valueTo</span>=<span class="string">"200"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></div><div class="line">    <span class="attr">android:valueType</span>=<span class="string">"intType"</span></div><div class="line">    <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/linear"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">animator</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="加载动画-并添加-动画监听"><a href="#加载动画-并添加-动画监听" class="headerlink" title="加载动画 并添加 动画监听"></a>加载动画 并添加 动画监听</h4><blockquote>
<p>属性动画 就是在 监听中去改变控件的属性的值 ，让控件 位置和形态的属性都发生真正的变化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">                ValueAnimator animator = (ValueAnimator) AnimatorInflater.loadAnimator(<span class="keyword">this</span>,R.animator.animator_value);</div><div class="line">                animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                        <span class="comment">//intType</span></div><div class="line">                      <span class="keyword">int</span> value= (<span class="keyword">int</span>) animation.getAnimatedValue();</div><div class="line">                        image.setTranslationY(value);</div><div class="line">                      <span class="comment">//  image.setTranslationX(value);</span></div><div class="line"></div><div class="line">                        <span class="comment">//floatType</span></div><div class="line"><span class="comment">//                        float alpha = (float) animation.getAnimatedValue();</span></div><div class="line"><span class="comment">//                        image.setAlpha(alpha);</span></div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="代码创建-1"><a href="#代码创建-1" class="headerlink" title="代码创建"></a>代码创建</h4><blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//   ValueAnimator valueAnimator = ValueAnimator.ofFloat(1f,0.5f,0f);</span></div><div class="line">PropertyValuesHolder alphaHolder = PropertyValuesHolder.ofFloat(<span class="string">"alpha"</span>,<span class="number">1f</span>,<span class="number">0.5f</span>);</div><div class="line">PropertyValuesHolder widthHolder = PropertyValuesHolder.ofInt(<span class="string">"width"</span>,<span class="number">1</span>,<span class="number">200</span>);</div><div class="line">PropertyValuesHolder rotateHolder = PropertyValuesHolder.ofFloat(<span class="string">"rotate"</span>,<span class="number">0</span>,<span class="number">180</span>);</div><div class="line">ValueAnimator valueAnimator = ValueAnimator.ofPropertyValuesHolder(alphaHolder,widthHolder,rotateHolder);</div><div class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line"><span class="comment">//                       float value= (float) animation.getAnimatedValue();</span></div><div class="line"><span class="comment">//                        image.setAlpha(value);</span></div><div class="line"></div><div class="line">      <span class="keyword">float</span> alpha= (<span class="keyword">float</span>) animation.getAnimatedValue(<span class="string">"alpha"</span>);</div><div class="line">        <span class="keyword">int</span> width = (<span class="keyword">int</span>) animation.getAnimatedValue(<span class="string">"width"</span>);</div><div class="line">        <span class="keyword">float</span> rotate = (<span class="keyword">float</span>) animation.getAnimatedValue(<span class="string">"rotate"</span>);</div><div class="line">        Log.e(<span class="string">"MainActivity"</span>,<span class="string">"alpha:"</span>+alpha);</div><div class="line">        Log.e(<span class="string">"MainActivity"</span>,<span class="string">"width:"</span>+width);</div><div class="line"></div><div class="line">        image.setAlpha(alpha);</div><div class="line">       image.setMaxWidth(width);</div><div class="line">        image.setMinimumWidth(width);</div><div class="line">        image.setRotation(rotate);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">valueAnimator.setDuration(<span class="number">2000</span>);</div><div class="line">valueAnimator.start();</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h3><blockquote>
<p>大部分属性都和ValueAnimator相同，只多了对要控制改变的控件的属性的声明<br>propertyName：要控制的控件的属性名;<br>动画会直接修改制定属性名的属性</p>
<p>需要注意：设置了getter/setter方法的属性才能生效</p>
</blockquote>
<h4 id="定义动画文件-5"><a href="#定义动画文件-5" class="headerlink" title="定义动画文件"></a>定义动画文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:propertyName</span>=<span class="string">"rotation"</span></div><div class="line">    <span class="attr">android:valueFrom</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">android:valueTo</span>=<span class="string">"45"</span></div><div class="line">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></div><div class="line">    <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>&gt;</div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">    rotation</div><div class="line">        rotationY</div><div class="line">        rotationX</div><div class="line"></div><div class="line">    --&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="加载动画并设置播放动画的对象"><a href="#加载动画并设置播放动画的对象" class="headerlink" title="加载动画并设置播放动画的对象"></a>加载动画并设置播放动画的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator object = (ObjectAnimator) AnimatorInflater.loadAnimator(<span class="keyword">this</span>,R.animator.animator_object);</div><div class="line">object.setTarget(image);</div><div class="line">object.start();</div></pre></td></tr></table></figure>
<h4 id="代码创建动画-4"><a href="#代码创建动画-4" class="headerlink" title="代码创建动画"></a>代码创建动画</h4><blockquote>
<p>凡是 有get/set方法的属性都可以设置值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(image,"alpha",1f,0.2f);</span></div><div class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofInt(view,<span class="string">"backgroundColor"</span>, Color.RED,Color.YELLOW,Color.BLUE,Color.GREEN);</div><div class="line">objectAnimator.setDuration(<span class="number">2000</span>);</div><div class="line">objectAnimator.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</div><div class="line">objectAnimator.start();</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p>完整代码github地址：<a href="https://github.com/sky-mxc/AndroidDemo/tree/master/animation" target="_blank" rel="external">https://github.com/sky-mxc/AndroidDemo/tree/master/animation</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ContentProvider]]></title>
      <url>http://blog.skymxc.com/2016/10/03/ContentProvider/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h1><blockquote>
<p>内容提供者，应用程序间的数据交互，是为存储和获取数据提供的统一接口。<br>Contentprovider为应用间数据交互提供了安全的环境，它允许把自己的应用数据开放给其他应用进行 CRUD。怎么样进行操作可以自己规定，不用担心权限的问题。</p>
</blockquote>
<p><br></p>
<blockquote>
<p>当然如果不想被被人读取自己应用的数据就不需要这个内容提供者。<br><br><br>ContentResolver来访问和操作我们的数据。<br>ContentResolver 通过我们注册的uri就可以找到我们开放的数据。</p>
</blockquote>
<p>关于uri 参考这篇文章：<a href="http://blog.csdn.net/dlutbrucezhang/article/details/8917303" target="_blank" rel="external">http://blog.csdn.net/dlutbrucezhang/article/details/8917303</a></p>
<h2 id="创建一个ContentProvider"><a href="#创建一个ContentProvider" class="headerlink" title="创建一个ContentProvider"></a>创建一个ContentProvider</h2><blockquote>
<p>创建自己的内容提供程序 只需继承ContentProvider即可。<br>这里就以insert 和 query 为例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.skymxc.demo.contentprovider.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.ContentProvider;</div><div class="line"><span class="keyword">import</span> android.content.ContentUris;</div><div class="line"><span class="keyword">import</span> android.content.ContentValues;</div><div class="line"><span class="keyword">import</span> android.content.UriMatcher;</div><div class="line"><span class="keyword">import</span> android.database.Cursor;</div><div class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</div><div class="line"><span class="keyword">import</span> android.net.Uri;</div><div class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</div><div class="line"><span class="keyword">import</span> android.text.TextUtils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by sky-mxc</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DBHelper dbHelper;</div><div class="line">    <span class="keyword">private</span> UriMatcher uriMatcher;</div><div class="line"></div><div class="line">    <span class="comment">//匹配结果是一张表</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STUDENTS = <span class="number">1</span>;</div><div class="line">    <span class="comment">//匹配结果是一个条数据</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STUDENT = <span class="number">2</span>;</div><div class="line">    <span class="comment">//一般是包名 避免重复</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.skymxc.demo"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        dbHelper = <span class="keyword">new</span> DBHelper(getContext());</div><div class="line">        <span class="comment">//初始化 uri匹配者   UriMatcher.NO_MATCH：匹配不上时返回</span></div><div class="line">        uriMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</div><div class="line"></div><div class="line">        <span class="comment">//添加能够匹配的uri格式 参数1authorities 匹配住机。  参数2 匹配路径   参数3 code ： match success  return this code；</span></div><div class="line">        <span class="comment">// 代表这个uri 操作的是一个表，匹配码是 STUDENTS</span></div><div class="line">        uriMatcher.addURI(AUTHORITY,<span class="string">"student"</span>, STUDENTS);</div><div class="line">        <span class="comment">//代表这个uri 操作的是一条数据 匹配成功后返回 STUDENT</span></div><div class="line">        uriMatcher.addURI(AUTHORITY,<span class="string">"student/#"</span>,STUDENT);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  查询操作</div><div class="line">     * <span class="doctag">@param</span> uri</div><div class="line">     * <span class="doctag">@param</span> projection 要查询的列</div><div class="line">     * <span class="doctag">@param</span> condition 查询条件</div><div class="line">     * <span class="doctag">@param</span> values 查询参数</div><div class="line">     * <span class="doctag">@param</span> sortOrder 排序</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String condition, String[] values, String sortOrder)</span> </span>&#123;</div><div class="line">        Cursor cursor =<span class="keyword">null</span>;</div><div class="line">        SQLiteDatabase db= dbHelper.getDB();</div><div class="line">        <span class="comment">//匹配这个uri 要查询一张表还是 某条数据</span></div><div class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</div><div class="line">            <span class="keyword">case</span> STUDENT:</div><div class="line">                <span class="comment">//查询某条数据  ContentUris  :工具类 可以解析出id</span></div><div class="line">                <span class="keyword">long</span> id= ContentUris.parseId(uri);</div><div class="line">                String where =<span class="string">"_id ="</span>+id+<span class="string">" "</span>;</div><div class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(condition))&#123;</div><div class="line">                    where+= <span class="string">" and "</span>+condition;</div><div class="line">                &#125;</div><div class="line">               cursor= db.query(DBHelper.TABLE_NAME,projection,where,values,<span class="keyword">null</span>,<span class="keyword">null</span>,sortOrder);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> STUDENTS:</div><div class="line">                <span class="comment">//查询一张表</span></div><div class="line">                cursor = db.query(DBHelper.TABLE_NAME,projection,condition,values,<span class="keyword">null</span>,<span class="keyword">null</span>,sortOrder);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"match fail 。uri:"</span>+uri+<span class="string">""</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cursor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</div><div class="line">        String type=<span class="string">"unKnow"</span>;</div><div class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</div><div class="line">            <span class="keyword">case</span> STUDENT:</div><div class="line">                type=<span class="string">"vnd.android.cursor.item/student"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> STUDENTS:</div><div class="line">                type= <span class="string">"vnd.android.cursor.dir/student"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">        SQLiteDatabase db = dbHelper.getDB();</div><div class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</div><div class="line">            <span class="keyword">case</span> STUDENT:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> STUDENTS:</div><div class="line">                db.insert(DBHelper.TABLE_NAME,<span class="string">"_id"</span>,values);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> uri;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>创建完之后还需要在manifest文件中注册 才能被其他应用看到，通过 <provider>元素注册一个内容提供者</provider></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">    android:exported 设置此provider是否可以被其他应用使用。</div><div class="line">    android:readPermission 该provider的读权限的标识</div><div class="line">    android:writePermission 该provider的写权限标识</div><div class="line">    android:permission provider读写权限标识</div><div class="line">    android:grantUriPermissions 临时权限标识</div><div class="line"></div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">provider</span></span></div><div class="line">    <span class="attr">android:authorities</span>=<span class="string">"com.skymxc.demo"</span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".util.StudentProvider"</span></div><div class="line">    <span class="attr">android:exported</span>=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
<p><strong>关于临时权限标识 grantUriPermissions :true时，意味着该provider下所有数据均可被临时使用；false时，则反之，但可以通过设置<grant-uri-permission>标签来指定哪些路径可以被临时使用。这么说可能还是不容易理解，我们举个例子，比如你开发了一个邮箱应用，其中含有附件需要第三方应用打开，但第三方应用又没有向你申请该附件的读权限，但如果你设置了此标签，则可以在start第三方应用时，传入FLAG_GRANT_READ_URI_PERMISSION或FLAG_GRANT_WRITE_URI_PERMISSION来让第三方应用临时具有读写该数据的权限。</grant-uri-permission></strong><br><br></p>
<blockquote>
<p>到这里 一个简单的内容提供者就创建完成了</p>
</blockquote>
<hr>
<h2 id="ContentResolver"><a href="#ContentResolver" class="headerlink" title="ContentResolver"></a>ContentResolver</h2><blockquote>
<p>可以看做是客户端 与ContentProvider 对应 ，ContentProvider 负责提供数据操作接口 ，ContentResolver 可以调用ContentProvider的数据接口对数据进行操作</p>
</blockquote>
<p>为了测试上面定义的ContentProvider  ，另创建一个Module 进行读取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">    ContentResolver resolver= getContentResolver() ;</div><div class="line">    String uriStr =<span class="string">"content://com.skymxc.demo/student"</span>;</div><div class="line">   Cursor cursor= resolver.query(Uri.parse(uriStr),<span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>,<span class="string">"name"</span>,<span class="string">"age"</span>&#125;,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">"age"</span>);</div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"============student==================\n"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (cursor !=<span class="keyword">null</span> &amp;&amp;cursor.moveToNext())&#123;</div><div class="line"></div><div class="line">            <span class="keyword">long</span> id = cursor.getLong(cursor.getColumnIndex(<span class="string">"_id"</span>));</div><div class="line">            String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">            <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(<span class="string">"age"</span>));</div><div class="line">            sb.append(<span class="string">"==="</span>+id+<span class="string">"===\n"</span>);</div><div class="line">            sb.append(<span class="string">"name:"</span>+name+<span class="string">"\n"</span>);</div><div class="line">            sb.append(<span class="string">"age:"</span>+age+<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    sb.append(<span class="string">"============================"</span>);</div><div class="line">        tv.setText(sb.toString());</div><div class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)&#123;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>insert<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</div><div class="line">    String name = etName.getText().toString();</div><div class="line">    String  age = etAge .getText().toString();</div><div class="line"></div><div class="line">    ContentResolver resolver = getContentResolver();</div><div class="line">    String uriStr=<span class="string">"content://com.skymxc.demo/student"</span>;</div><div class="line">    ContentValues cv = <span class="keyword">new</span> ContentValues();</div><div class="line">    cv.put(<span class="string">"name"</span>,name);</div><div class="line">    cv.put(<span class="string">"age"</span>,age);</div><div class="line">    resolver.insert(Uri.parse(uriStr),cv);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ContentResolver 还可以用来操作 短信,联系人，多媒体等 数据，这里写个读取短信的实例</p>
<p>读取短信的权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;<span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_SMS"</span>/&gt;</span></div><div class="line">&gt;`</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 短信查询</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">querySms</span><span class="params">()</span> </span>&#123;</div><div class="line">    String[] projection = <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>,<span class="string">"address"</span>,<span class="string">"person"</span>,<span class="string">"body"</span>,<span class="string">"type"</span>&#125;;</div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"短信数据=============\n"</span>);</div><div class="line">    ContentResolver resolver= getContentResolver();</div><div class="line">    Cursor cursor = resolver.query(Uri.parse(<span class="string">"content://sms/"</span>),projection,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">    <span class="keyword">while</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToNext())&#123;</div><div class="line">        sb.append(<span class="string">"id:"</span>+cursor.getInt(cursor.getColumnIndex(<span class="string">"_id"</span>)));</div><div class="line">        sb.append(<span class="string">"\naddress:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"address"</span>)));</div><div class="line">        sb.append(<span class="string">"\nperson:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"person"</span>)));</div><div class="line">        sb.append(<span class="string">"\nbody:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"body"</span>)));</div><div class="line">        sb.append(<span class="string">"\ntype:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"type"</span>)));</div><div class="line">        sb.append(<span class="string">"\n================================================="</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tv.setText(sb.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="ContentObserver"><a href="#ContentObserver" class="headerlink" title="ContentObserver"></a>ContentObserver</h2><blockquote>
<p>内容观察者，可以给某些数据注册观察者，当数据改变时做出有些操作</p>
<p>初始化观察者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ContentObserver  observer = <span class="keyword">new</span> ContentObserver(<span class="keyword">new</span> Handler()) &#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onChange(selfChange);</div><div class="line">       Log.e(<span class="string">"MainActivity"</span>,<span class="string">"======数据改变了==="</span>);</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>注册观察者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Uri uri = Uri.parse(<span class="string">"content://"</span>+StudentProvider.AUTHORITY+<span class="string">"/student"</span>);</div><div class="line"><span class="comment">//为student 注册观察者</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * parameter1 观察的uri</div><div class="line"> * parameter2 uri的后代是否连带 观察</div><div class="line"> * parameter3 observer</div><div class="line"> */</div><div class="line">getContentResolver().registerContentObserver(uri,<span class="keyword">true</span>,observer);</div></pre></td></tr></table></figure></p>
<p>内容改变时 通知观察者</p>
</blockquote>
<p>系统会首先查找 uri 扫描（手机上）所有的注册的observer 的uri  匹配之后执行 observer的onChange 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</div><div class="line">    SQLiteDatabase db = dbHelper.getDB();</div><div class="line">    <span class="keyword">int</span> line=<span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</div><div class="line">        <span class="keyword">case</span> STUDENT:</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> STUDENTS:</div><div class="line">          line= (<span class="keyword">int</span>) db.insert(DBHelper.TABLE_NAME,<span class="string">"_id"</span>,values);</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (line&gt;<span class="number">0</span>)&#123;</div><div class="line">        getContext().getContentResolver().notifyChange(uri,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> uri;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当在另一个应用插入数据时 change()调用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E/MainActivity: ======数据改变了===</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACTION_SEND]]></title>
      <url>http://blog.skymxc.com/2016/10/01/ACTION-SEND/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/01/ACTION-SEND" target="_blank" rel="external">https://sky-mxc.github.io</a></p>
</blockquote>
<hr>
<h1 id="不使用第三方-SDK-实现简单分享"><a href="#不使用第三方-SDK-实现简单分享" class="headerlink" title="不使用第三方 SDK 实现简单分享"></a>不使用第三方 SDK 实现简单分享</h1><blockquote>
<p>现在在Android系统中进行分享，主要有两种手段，一种是通过系统自带的来启动分享功能；第二种是通过第三方的SDK插件进行分享；今天先来看看系统自带的分享功能:Intent.ACTOIN_SEND;</p>
<ul>
<li>分享文本</li>
<li>分享图片+文本 （QQ和微信不支持，只能将图片和文本分两次分享，目前来看只有新浪微博支持）</li>
<li>分享多图片 （和上面一样 ，目前只有新浪微博可以同时分享图片和文本）</li>
<li>分享图片+文本至微信朋友圈 </li>
<li>检查是否有intent要启动的activity</li>
</ul>
</blockquote>
<h2 id="分享存文本内容"><a href="#分享存文本内容" class="headerlink" title="分享存文本内容"></a>分享存文本内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 简单分享</div><div class="line">     * 让用户去选择分享平台</div><div class="line">     * 只分享简单的文子</div><div class="line">     */</div><div class="line">    String context = etContext.getText().toString();</div><div class="line">    intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line">    intent.setType(<span class="string">"text/plain"</span>);</div><div class="line">    intent.putExtra(Intent.EXTRA_TEXT,context);</div><div class="line">    <span class="keyword">if</span>(hasApplication(intent))&#123;</div><div class="line">        <span class="comment">//没有默认选项 可以自定义dialog标题</span></div><div class="line">        startActivity(Intent.createChooser(intent,<span class="string">"分享一下"</span>));</div><div class="line">        <span class="comment">//系统默认主题</span></div><div class="line">        <span class="comment">//   startActivity(intent);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在分享之前可以先查看一下手机上是否有分享平台，如果没有就给出提示可以增加用户友好度，通过 PackageManager的queryIntentActivities()查看是否有匹配intent的Activity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断是否存在intent要启动的Activity</div><div class="line"> * <span class="doctag">@param</span> intent</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasApplication</span><span class="params">(Intent intent)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//查询是否有该intent要启动的Activity</span></div><div class="line">    List&lt;ResolveInfo&gt; resolveInfos= getPackageManager().queryIntentActivities(intent,<span class="number">0</span>);</div><div class="line">    log(resolveInfos.size()+<span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span>  resolveInfos.size()&gt;<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另外 使用  Intent.createChooser()可以避免出现默认程序的可能，还可以定义弹出框的标题 ，友好程度更好一些,下面看一下两者的区别</p>
<blockquote>
<p>系统默认的主题( startActivity(intent))<br><img src="\images\Android\share_ACTION_SEND\system.png" alt="系统默认"><br><strong>使用 Intent.createChooser()</strong><br><img src="\images\Android\share_ACTION_SEND\createChooser.png" alt="Intent.createChooser()"></p>
</blockquote>
<hr>
<h2 id="分享文本-图片"><a href="#分享文本-图片" class="headerlink" title="分享文本+图片"></a>分享文本+图片</h2><blockquote>
<p>图片和文本一起分享 目前我测试的只有微博好使 ，QQ和微信 都只能分享图片，不接受文本<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 分享图片 和文本</div><div class="line"> * QQ 微信 不能图片和文本一起分享</div><div class="line"> * 微博可以实现图片和文本一起分享</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shareChooser</span><span class="params">()</span> </span>&#123;</div><div class="line">    String context = etContext.getText().toString();</div><div class="line"></div><div class="line">    intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line">    intent.setType(<span class="string">"image/*"</span>);</div><div class="line">    intent.putExtra(Intent.EXTRA_TEXT,context);</div><div class="line">    intent.putExtra(Intent.EXTRA_STREAM,uri);</div><div class="line">    <span class="keyword">if</span> (hasApplication(intent))&#123;</div><div class="line">        startActivity(Intent.createChooser(intent,<span class="string">"选择要分享到的平台吧"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="分享多张图片"><a href="#分享多张图片" class="headerlink" title="分享多张图片"></a>分享多张图片</h2><blockquote>
<p>和上面一样 我测试 只有微博能同时分享图片和文本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 分享多个图片</div><div class="line"> * 目前来看 只有微博能同时分享文本和内容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sharePhototMult</span><span class="params">()</span> </span>&#123;</div><div class="line">    ArrayList&lt;Uri&gt; uris =<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    uris.add(uri);</div><div class="line">    uris.add(uri);</div><div class="line">    intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND_MULTIPLE);</div><div class="line">    intent.setType(<span class="string">"image/*"</span>);</div><div class="line">    intent.putExtra(Intent.EXTRA_TEXT,<span class="string">"分享内容测试"</span>);</div><div class="line">    intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);</div><div class="line">    <span class="keyword">if</span>(hasApplication(intent))&#123;</div><div class="line">        startActivity(Intent.createChooser(intent,<span class="string">"选择分享平台"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="分享-图片-文本到微信朋友圈"><a href="#分享-图片-文本到微信朋友圈" class="headerlink" title="分享 图片+文本到微信朋友圈"></a>分享 图片+文本到微信朋友圈</h2><blockquote>
<p>这个方式可以实现 图片+ 文本同时分享</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 分享图片去微信朋友圈</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sharePhotoToWX</span><span class="params">()</span> </span>&#123;</div><div class="line">    String wxPackage = <span class="string">"com.tencent.mm"</span>;</div><div class="line">    <span class="keyword">if</span> (checkPackage(wxPackage))&#123;</div><div class="line">        intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line"></div><div class="line">        intent.setClassName(wxPackage,<span class="string">"com.tencent.mm.ui.tools.ShareToTimeLineUI"</span>);</div><div class="line">        intent.setType(<span class="string">"image/*"</span>);</div><div class="line">        intent.putExtra(<span class="string">"Kdescription"</span>,<span class="string">"朋友圈分享测试"</span>);</div><div class="line">        intent.putExtra(Intent.EXTRA_STREAM,uri);</div><div class="line">        startActivity(intent);</div><div class="line"></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"微信不存在"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="检查是否有隐式intent要启动的activity"><a href="#检查是否有隐式intent要启动的activity" class="headerlink" title="检查是否有隐式intent要启动的activity"></a>检查是否有隐式intent要启动的activity</h2><blockquote>
<p>有时候使用 隐式分享 ，并不知道是否存在分享平台 ，就可以通过以下代码测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断是否存在intent要启动的Activity</div><div class="line"> * <span class="doctag">@param</span> intent</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasApplication</span><span class="params">(Intent intent)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//查询是否有该intent要启动的Activity</span></div><div class="line">    List&lt;ResolveInfo&gt; resolveInfos= getPackageManager().queryIntentActivities(intent,<span class="number">0</span>);</div><div class="line">    log(resolveInfos.size()+<span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span>  resolveInfos.size()&gt;<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity]]></title>
      <url>http://blog.skymxc.com/2016/09/30/activity/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/09/30/activity" target="_blank" rel="external">https://sky-mxc.github.io/2016/09/30/activity</a></p>
</blockquote>
<h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><ul>
<li>什么是Activity</li>
<li>创建Activity</li>
<li>启动Activity</li>
<li>保存Activity状态</li>
<li>Activity的生命周期</li>
</ul>
<hr>
<h2 id="acitivyt-是什么"><a href="#acitivyt-是什么" class="headerlink" title="acitivyt 是什么"></a>acitivyt 是什么</h2><blockquote>
<p>引用官方的说法：<br><em>是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上</em></p>
</blockquote>
<h2 id="创建Activity"><a href="#创建Activity" class="headerlink" title="创建Activity"></a>创建Activity</h2><p>要创建Activity 必须继承自Activity或者Activity的子类。在Activity的各个生命阶段实现对应的方法；</p>
<blockquote>
<p>其中重要的两个方法:</p>
<p>onCreate() ,系统在创建Activity时调用此方法；在此方法实现视图绑定；一些 控件的初始化</p>
<p>onPuase();  用户离开当前Activity调用的第一个方法 ，</p>
<p>创建完成后必须在Manifest文件中 声明此Activity 系统才会知道有这个Activity</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".ExampleActivity"</span> /&gt;</span></div><div class="line">      ...</div><div class="line">  <span class="tag">&lt;/<span class="name">application</span> <span class="attr">...</span> &gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span> &gt;</span></div></pre></td></tr></table></figure>
<p>如果有需要也可以为此Activity添加IntentFilter(IntentFilter稍后我会再做总结),以供外部程序来启动，一般同一应用中不会用到隐式启动。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".AActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x2"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c2"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>最简单的Activity 只绑定了一个视图<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="启动Activity"><a href="#启动Activity" class="headerlink" title="启动Activity"></a>启动Activity</h2><blockquote>
<p>可以通过一个intent 来启动 一个Activity ,关于intent稍后会做总结</p>
</blockquote>
<h3 id="明确目标启动"><a href="#明确目标启动" class="headerlink" title="明确目标启动"></a>明确目标启动</h3><p>在明确的指导要启动的Activity的时候可以显示使用intent来启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(this, SignInActivity.class);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<h3 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h3><p>如果需要传递数据，可以在intent中放入数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</div><div class="line">intent.putExtra(<span class="string">"origin"</span>, <span class="string">"哈哈"</span>);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p>
<p>获取数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = getIntent();<span class="comment">//获取启动此activity的intent</span></div><div class="line">String origin = intent.getStringExtra(<span class="string">"origin"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="不明确启动目标"><a href="#不明确启动目标" class="headerlink" title="不明确启动目标"></a>不明确启动目标</h3><p>在不明确要启动的Activity的时候 可以在intent中添加关于启动目标的描述和类型,系统会过滤所有的Activity的intentFilter来匹配 ；一般 在同一个应用中不必使用隐式Intent；</p>
<blockquote>
<p>例如 我在为A Activity添加这样的IntentFilter：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".AActivity"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x2"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c2"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>要启动上面的Activity可以这样写 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Intent in = <span class="keyword">new</span> Intent();</div><div class="line"><span class="comment">////要执行的动作的描述 所有的action中 有一个匹配行</span></div><div class="line">in.setAction(<span class="string">"com.skymxc.action.x2"</span>);</div><div class="line"><span class="comment">//附加信息的描述 这里的描述只要在intentFilter中声明了就能匹配上，</span></div><div class="line"><span class="comment">// 如果有一项未声明则匹配不上，如果intentFilter中没有可以不添加，会使用默认的category</span></div><div class="line">in.addCategory(<span class="string">"com.skymxc.catagory.c2"</span>);</div><div class="line"><span class="comment">//对数据进行描述 C中定义了协议为 file</span></div><div class="line">in.setDataAndType(Uri.parse(<span class="string">"http://"</span>),<span class="string">"audio/13"</span>);</div><div class="line"><span class="keyword">if</span> (in.resolveActivity(getPackageManager())!=<span class="keyword">null</span>)&#123;</div><div class="line">    <span class="comment">//启动</span></div><div class="line">    startActivity(in);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    Toast.makeText(<span class="keyword">this</span>,<span class="string">"系统中不存在可以执行此操作的程序"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为某个结果启动一个Activity"><a href="#为某个结果启动一个Activity" class="headerlink" title="为某个结果启动一个Activity"></a>为某个结果启动一个Activity</h3><p>如果启动一个Activit只为获得某个结果 可以 使用 startActivityForResult() 来启动一个Activity ，在获得结果后会回调 方法：onActivityResult();</p>
<blockquote>
<p>去图库获取图片 第二个参数是请求码 在onActivityResult()中区分结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent intent1 = <span class="keyword">new</span> Intent(Intent.ACTION_PICK);</div><div class="line">intent1.setData(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</div><div class="line"><span class="comment">//为了结果去启动一个Activity</span></div><div class="line">startActivityForResult(intent1,<span class="number">50</span>);</div></pre></td></tr></table></figure></p>
<p>onActivityResult()中获取到取得的图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> requestCode 启动时的 requestCode</div><div class="line"> * <span class="doctag">@param</span> resultCode 跳转的activity给的</div><div class="line"> * <span class="doctag">@param</span> data 跳转的activity给的 返回的数据</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">    <span class="keyword">if</span> (requestCode== <span class="number">50</span> &amp;&amp; resultCode ==RESULT_OK &amp;&amp; data != <span class="keyword">null</span>)&#123;</div><div class="line">       Uri uri = data.getData(); <span class="comment">//返回是标识符指定图片所在的位置的统一资源标识符</span></div><div class="line">        img.setImageURI(uri);  <span class="comment">//设置给 ImageView</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="保存Activity的状态"><a href="#保存Activity的状态" class="headerlink" title="保存Activity的状态"></a>保存Activity的状态</h2><p>当用户 离开Activity去往另一个Activity时；Activity会被压入返回栈，如果内存不够就会被销毁 ，当Activity被销毁后其中的数据当然就没了，如果需要保留这些数据可调用 方法 onSaveInstanceState()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState, PersistableBundle outPersistentState)</span> </span>&#123;</div><div class="line">    <span class="comment">//存入数据</span></div><div class="line">   outState.putBoolean(<span class="string">"checked"</span>,<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当此Activity被创建时 就能取出数据了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    <span class="keyword">if</span> (savedInstanceState!=<span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">boolean</span> checked = savedInstanceState.getBoolean(<span class="string">"checked"</span>);</div><div class="line">    &#125;</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><p>看一张图描述了整个Activity由生到死的一套回调方法<br><img src="\images\Android\activity\activitlifcycle.png" alt="生命周期"></p>
<h3 id="回调方法说明"><a href="#回调方法说明" class="headerlink" title="回调方法说明"></a>回调方法说明</h3><blockquote>
<p>先说一下上图的方法：</p>
<ul>
<li>onCreate() :创建Activity ，可以在这里进行初始一些视图和数据 </li>
<li>onStart():   启动Activity ，这里你就可以看到 这个activity了</li>
<li>onResume(): 调用这个方法前 只能看到Activity 并不能进行交互 ，执行完此方法才可以进行交互 ，整个Activity就彻底的运行起来了</li>
<li>onPause()   :停止用户交互 你可以看到 但是 不能交互了  比如 启动另一个透明的Dialog Activity 你可以看到原本的Activity ，但是已经失去了焦点 ，无法交互</li>
<li>onStop() ：当前Activity被覆盖时调用 例如 当前activity1跳往到activity2 ，activity就会把activity1覆盖，这时就调用了此方法</li>
<li>onRestart();  重新启动</li>
<li>onDestroy():activity再结束前调用的最后一个方法;这里可以进行一些释放资源的操作</li>
</ul>
</blockquote>
<h3 id="三种阶段"><a href="#三种阶段" class="headerlink" title="三种阶段"></a>三种阶段</h3><blockquote>
<ul>
<li>完整生命周期：<br> 从调用的第一个方法 onCreate()  到最后调用一个的方法onDestroy()  ，在onCreate()方法中可以进行一些全局的配置，UI的引用，数据的初始化，也可以从savedInstanceState中读取 保存在设备中或者执行reCreate方法前保存的数据等前提savedInstanceSate不为null，在onDestroy(）方法中可以 释放资源等</li>
</ul>
<ul>
<li><p>可视周期：在执行onStart()和onStop(）之间  在这期间 你可以在屏幕上看到这个Activity但是 不能再前台跟用户交互 。只能看，可以理解为于禁用状态</p>
</li>
<li><p>前台周期：在执行onResume() 和 onPause() 之间，在这期间，用户就可以在前台和activity交互了。</p>
</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>关于这里提到的intent ，intentFilter 我会在之后总结。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[seekbar]]></title>
      <url>http://blog.skymxc.com/2016/09/30/SeekBar/</url>
      <content type="html"><![CDATA[<h1 id="SeekBar-可拖动进度条"><a href="#SeekBar-可拖动进度条" class="headerlink" title="SeekBar 可拖动进度条"></a>SeekBar 可拖动进度条</h1><blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/09/30/SeekBar" target="_blank" rel="external">https://sky-mxc.github.io/2016/09/30/SeekBar</a></p>
</blockquote>
<ul>
<li>常用属性</li>
<li>常用方法</li>
<li>自定义样式</li>
</ul>
<h2 id="常用的属性"><a href="#常用的属性" class="headerlink" title="常用的属性"></a>常用的属性</h2><ul>
<li>max            最大值</li>
<li>progress        进度值</li>
<li>secondaryProgress        第二进度条</li>
<li>progressDrawable        进度图片</li>
<li>thumb        拖拽按钮</li>
<li>thumbOffset        拖拽按钮位置补偿</li>
<li>maxHeight/maxWidth        最大宽高</li>
<li>minHeight/minWidth        最小宽高</li>
</ul>
<blockquote>
<p>可通过 maxHeight ，minHeight 控制 高度</p>
</blockquote>
<hr>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li>setProgress()        设置进度值</li>
<li>getProgress()        获取进度值</li>
<li>setSecondaryProgress()        设置第二进度值</li>
<li>getSecondaryProgress()        获取第二进度值</li>
<li>setSeekBarChangeListener()        设置seekbar拖动改变监听</li>
</ul>
<hr>
<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><ul>
<li>自定义 背景</li>
<li>自定义进度样式</li>
<li>自定义滑块</li>
</ul>
<blockquote>
<p>自定义背景和进度样式 这里使用简单的shape图片 通过 progressDrawable 属性设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/background"</span>&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#353b35"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/progress"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#10b410"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>自定义滑块 通过 属性thumb 设置 这里也是通过shape图形绘制，滑块的高度 是可以自定义的 在这里就可以设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--按下--&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#b31395"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"40dp"</span></span></div><div class="line">                    <span class="attr">android:width</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_focused</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#362d35"</span>/&gt;</span></div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"40dp"</span></span></div><div class="line">                <span class="attr">android:width</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> &gt;</span></div><div class="line"></div><div class="line">           <span class="tag">&lt;<span class="name">shape</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#362d35"</span>/&gt;</span></div><div class="line"></div><div class="line">               <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"40dp"</span></span></div><div class="line">                   <span class="attr">android:width</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line">           <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>高度通过 minHeight maxHeight 设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">SeekBar</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/seek_bar_0"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:max</span>=<span class="string">"100"</span></div><div class="line">    <span class="attr">android:progress</span>=<span class="string">"20"</span></div><div class="line">    <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></div><div class="line">    <span class="attr">android:maxHeight</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">android:minHeight</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">android:thumb</span>=<span class="string">"@drawable/selector_seek_thumb_bg"</span></div><div class="line">    <span class="attr">android:progressDrawable</span>=<span class="string">"@drawable/selector_seekbar_bg"</span>/&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>实例图<br><img src="\images\Android\SeekBar\Seekbar.png" alt="实例图"></p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
