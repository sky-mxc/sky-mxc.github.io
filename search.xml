<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Gradle-Groovy语法]]></title>
      <url>http://blog.skymxc.com/2019/08/18/groovy-basic/</url>
      <content type="html"><![CDATA[<p><img src="/images/Gradle/Groovy-basic-topic.png" alt="先来一张思维导图"></p>
<h1 id="Groovy-简介"><a href="#Groovy-简介" class="headerlink" title="Groovy 简介"></a>Groovy 简介</h1><p>Groovy 是一种基于 JVM 的动态语言，他的语法和 Java 相似，最终也是要编译 .class 在JVM上运行。</p>
<p>Groovy 完全兼容 Java 并且在此基础上添加了很多动态类型和灵活的特性，比如支持闭包，支持DSL，是一门非常灵活的动态脚本语言。</p>
<p><strong>这篇文章是为了能看懂在 Gradle脚本中的代码，知道怎么写。所以不会深入Groovy。</strong></p>
<p>每个 build 脚本配置文件都是一个 Groovy脚本文件。在里面可以写任何符合 Groovy 语法的代码。<br>例如定义类，方法，变量等。又因为Groovy 是完全兼容Java的，故也可以写任何Java代码，是完全兼容的。</p>
<h1 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h1><p>DSL（Domain Specific Language) 中文意思是 领域特定语言，专门关注某一领域，在于专而不是全。所以才是领域特定的。</p>
<p>Gradle 的脚本就是基于 Groovy 的DSL，专门解决自动化构建的DSL。<br>我们只需要按照相应的语法，配置相应的 Gradle 脚本就可以达到自动化构建的目的，这也是 DSL 的初衷。</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这里是注释</span><br><span class="line">def name = &quot;佛系编码&quot;</span><br></pre></td></tr></table></figure>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* 这里是多行注释</span><br><span class="line">   啦啦啦啦 */</span><br></pre></td></tr></table></figure>
<h3 id="doc-注释"><a href="#doc-注释" class="headerlink" title="doc 注释"></a>doc 注释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 这里是 doc 注释</span><br><span class="line"> * 啦啦啦啦</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Java中的基本数据类型，对象它都支持；另外还有<br>闭包<br>加强的 List，Map的集合<br>加强的File，Stream等IO类型</p>
<p>类型可以显式声明，也可以用 def 来声明，用 def 声明的类型Groovy将会进行类型推断。</p>
<p>基本数据类型都是和Java 中的一致，就不拿出来说了。下面说一下，对象，字符串，闭包等;</p>
<p>另外：Groovy 中的分号是可以省略的；</p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>使用单引号和双引号都可以定义一个字符串常量。</p>
<p>差别是 单引号只是单纯的字符串，不能使用表达式，运算，求值，正则等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task character()&#123;</span><br><span class="line">  doLast&#123;</span><br><span class="line">      def name = &apos;张三&apos;</span><br><span class="line">      def address =&quot;北京市&quot;</span><br><span class="line">      def age = 19</span><br><span class="line">      println &quot;单引号双引号都是字符串 name is $&#123;name&#125;; age is $age ; address is $&#123;address&#125;&quot;</span><br><span class="line">      println &apos;单引号里无法运算表达式例如 name is $&#123;name&#125;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行 character<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle character</span><br></pre></td></tr></table></figure></p>
<p>得到结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单引号双引号都是字符串 name is 张三; age is 19 ; address is 北京市</span><br><span class="line">单引号里无法运算表达式例如 name is $&#123;name&#125;</span><br></pre></td></tr></table></figure>
<p>双引号的字符串可以直接进行表达式计算，规则是一个美元符号紧跟一个花括号: ${expression} ，如果只有一个变量可以省略花括号。例如上面的 $age</p>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合默认是 java.util.ArrayList 类型的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def nums = [1,2,4,5,6]</span><br><span class="line">println &quot;nums is $&#123;nums.getClass().getName()&#125; size = $&#123;nums.size()&#125;&quot;</span><br></pre></td></tr></table></figure></p>
<p>输出结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums is java.util.ArrayList size = 5</span><br></pre></td></tr></table></figure></p>
<p>也可以显式指定集合类型 使用 as 关键字；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def nums1 = [0,&quot;23&quot;,4,5,62,false] as LinkedList</span><br><span class="line">println &quot;nums1 is $&#123;nums1.getClass().getName()&#125;;size = $&#123;nums1.size()&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>输出为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums1 is java.util.LinkedList;size = 6</span><br></pre></td></tr></table></figure>
<p>或者在前面显式指定类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinkedList otherLinked = [3, 4, 5]</span><br></pre></td></tr></table></figure>
<h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><p>元素的访问是通过下标访问的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println &quot;第三个元素是 $&#123;nums1[2]&#125;,倒数第一个是 $&#123;nums1[-1]&#125;;第一个和倒数第一个：$&#123;nums1[0,-1]&#125;&quot;</span><br><span class="line">println &quot;第二个到第四个：$&#123;nums1[1..3]&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第三个元素是 4,倒数第一个是 false;第一个和倒数第一个：[0, false]</span><br><span class="line">第二个到第四个：[23, 4, 5]</span><br></pre></td></tr></table></figure>
<h2 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h2><p>使用 each 方法遍历集合 参数默认是 it</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//遍历</span><br><span class="line">nums1.each &#123;</span><br><span class="line">  print &quot;$it, &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0, 23, 4, 5, 62, false,</span><br></pre></td></tr></table></figure>
<p>带有下标的遍历：使用 eachWithIndex 方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numList.eachWithIndex &#123; int value ,int index-&gt;</span><br><span class="line">    println &quot;list[$index] = $value&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组的定义要明确的指定数组类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String [] strings = [&quot;I&quot;,&quot;&apos;&quot;,&quot;m&quot;,&quot;is&quot;,&quot;a&quot;,&quot;dog&quot;,&quot;.&quot;]</span><br><span class="line">println &quot;\n 数组 :$&#123;strings.getClass().getName()&#125;&quot;</span><br><span class="line">strings.each&#123;</span><br><span class="line">   print &quot;$it &quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def multi = [5,7,5,8,54,87] as int[]</span><br><span class="line"></span><br><span class="line">println &quot;\n使用 as 显式指定类型: $&#123;multi.getClass().getName()&#125;&quot;</span><br><span class="line">multi.each&#123;</span><br><span class="line">   print &quot;$it &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组 :[Ljava.lang.String;</span><br><span class="line">I &apos; m is a dog .</span><br><span class="line">使用 as 显式指定类型: [I</span><br><span class="line">5 7 5 8 54 87</span><br></pre></td></tr></table></figure>
<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p>使用 List.add() 添加元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numList.add(-11)</span><br></pre></td></tr></table></figure>
<p>使用 可以使用 &lt;&lt; 操作符添加一个</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numList &lt;&lt; 13</span><br></pre></td></tr></table></figure>
<h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numList[0] = 0</span><br></pre></td></tr></table></figure>
<p>不用担心下标越界；Groovy就自动增加到所需的下标,中间的会设置为 null</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def numList = [0,1,2,3,4,5] as LinkedList</span><br><span class="line"></span><br><span class="line">numList.each&#123;</span><br><span class="line">    print &quot;$it &quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println &quot;\n 在 10位置添加一个 11&quot;</span><br><span class="line"></span><br><span class="line">numList[10] =11</span><br><span class="line"></span><br><span class="line">println &quot;添加后的：&quot;</span><br><span class="line"></span><br><span class="line">numList.each&#123;</span><br><span class="line">    print &quot;$it &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :collect1</span><br><span class="line">0 1 2 3 4 5</span><br><span class="line"> 在 10位置添加一个 11</span><br><span class="line">添加后的：</span><br><span class="line">0 1 2 3 4 5 null null null null 11</span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br></pre></td></tr></table></figure>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>使用 List.remove() 移除元素 参数可以是 下标，可以是值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numList.remove 0</span><br><span class="line">numList.remove((Object)10)</span><br></pre></td></tr></table></figure>
<p>使用 List.removeLast() 移除最后一个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numList.removeLast()</span><br></pre></td></tr></table></figure>
<h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><p>使用 List.find() 查找第一个符合条件的元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &quot;\n list.find() 查找第一个符合条件的元素 numList.find &#123; it%2==0&#125;&quot;</span><br><span class="line">print numList.find &#123; it%2==0&#125;</span><br></pre></td></tr></table></figure>
<p>使用 List.findAll() 查找所有符合条件的元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &quot;\n list.findAll() 查找所有符合条件的元素 numList.findAll &#123;it % 2 ==0 &#125;&quot;</span><br><span class="line">print numList.findAll &#123; it % 2 ==0&#125;</span><br></pre></td></tr></table></figure>
<p>使用 List.any() 查找元素，只要有一个元素符合就返回 true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &quot;\n list.any() 只要有一个元素符合条件就返回 true numList.any &#123; it % 2 ==1&#125; &quot;</span><br><span class="line">print numList.any &#123; it % 2 ==1&#125;</span><br></pre></td></tr></table></figure>
<p>使用 List.every() 查找元素，必须所有元素都符合条件才会返回 true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &quot;\n list.every() 必须所有元素都符合条件才会返回 true numList.every &#123;it % 2 == 0&#125; &quot;</span><br><span class="line">print numList.every &#123; it % 2 == 0&#125;</span><br></pre></td></tr></table></figure>
<h2 id="统计元素"><a href="#统计元素" class="headerlink" title="统计元素"></a>统计元素</h2><p>统计符合条件的元素个数：使用 List.count()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print numList.count &#123; it % 2 ==0 &#125;</span><br></pre></td></tr></table></figure>
<p>统计最大值：List.max()，最小值：List.min()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print &quot;\n 最大值是 $&#123;numList.max()&#125; ,最小值是 $&#123;numList.min()&#125;， 最小的绝对值是 &quot;</span><br><span class="line">print numList.min &#123; Math.abs it&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map 的定义是键值对的方式，使用逗号隔开</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def colors = [red:&apos;#FF0000&apos;,green:&apos;#00FF00&apos;,blue:&apos;#0000FF&apos;]</span><br></pre></td></tr></table></figure>
<p>访问 Map 中的元素有三种方式：</p>
<ul>
<li>map.key</li>
<li>map[key]</li>
<li>map.get(key)</li>
</ul>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task map&#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        def colors = [red:&apos;#FF0000&apos;,green:&apos;#00FF00&apos;,blue:&apos;#0000FF&apos;]</span><br><span class="line">        println &quot; map calss is $&#123;colors.getClass().getName()&#125;&quot;</span><br><span class="line">        println &quot;通过 map.key 的方式访问 colors.red = $&#123;colors.red&#125;&quot;</span><br><span class="line">        println &quot;通过 map[key] 的方式访问 colors[&apos;red&apos;] = $&#123;colors[&apos;red&apos;]&#125;&quot;</span><br><span class="line">        println &quot;通过 map.get(key) 的方式访问 colors.get(red) = $&#123;colors.get(&apos;red&apos;)&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :map</span><br><span class="line"> map calss is java.util.LinkedHashMap</span><br><span class="line">通过 map.key 的方式访问 colors.red = #FF0000</span><br><span class="line">通过 map[key] 的方式访问 colors[&apos;red&apos;] = #FF0000</span><br><span class="line">通过 map.get(key) 的方式访问 colors.get(red) = #FF0000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<h2 id="添加元素-1"><a href="#添加元素-1" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//添加元素</span><br><span class="line">colors[&apos;pink&apos;] = &apos;#FF00FF&apos;</span><br><span class="line">colors.yellow = &apos;#FFFF00&apos;</span><br></pre></td></tr></table></figure>
<h2 id="修改元素-1"><a href="#修改元素-1" class="headerlink" title="修改元素"></a>修改元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//修改元素</span><br><span class="line">colors.red = &apos;red&apos;</span><br><span class="line">colors[&apos;blue&apos;] = &apos;blue&apos;</span><br><span class="line">println &quot;修改后的元素是 colors.red = $&#123;colors.red&#125;,colors.blue = $&#123;colors.blue&#125;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//删除元素</span><br><span class="line">colors.remove(&apos;red&apos;)</span><br></pre></td></tr></table></figure>
<h2 id="遍历元素-1"><a href="#遍历元素-1" class="headerlink" title="遍历元素"></a>遍历元素</h2><p>和上面的一样 使用 each 方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//遍历</span><br><span class="line">colors.each&#123;</span><br><span class="line">    println &quot;$&#123;it.key&#125; :$&#123;it.value&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查找元素-1"><a href="#查找元素-1" class="headerlink" title="查找元素"></a>查找元素</h2><p>查找的方法 和 上面的都一样，只是 参数换成了 Map.Entry 或者 key,value ;<br>这里只用 find 做一个示例：</p>
<p>find 方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def green = colors.find &#123; key ,value -&gt;</span><br><span class="line">  if(key.equals(&apos;green&apos;)) &#123;</span><br><span class="line">      return colors[key]</span><br><span class="line">  &#125;</span><br><span class="line">  return null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println &quot;查找结果是 $&#123;green&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def blue = colors.find &#123; Map.Entry entry -&gt;</span><br><span class="line">    if(entry.key.equals(&apos;blue&apos;))&#123;</span><br><span class="line">        return entry.value</span><br><span class="line">    &#125;</span><br><span class="line">    return null</span><br><span class="line">&#125;</span><br><span class="line">println &quot;查找的结果是 $&#123;blue&#125;&quot;</span><br></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法也是使用 def 定义的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 返回大的那个</span><br><span class="line"> */</span><br><span class="line">def max(int a ,int b)&#123;</span><br><span class="line">    if(a&gt;b)&#123;</span><br><span class="line">      return   a</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      return   b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="return-是可以省略的"><a href="#return-是可以省略的" class="headerlink" title="return 是可以省略的"></a>return 是可以省略的</h3><p>Groovy 会把执行过程中的最后一句代码作为返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 返回大的那个</span><br><span class="line"> */</span><br><span class="line">def max(int a ,int b)&#123;</span><br><span class="line">    if(a&gt;b)&#123;</span><br><span class="line">         a</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">       b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="括号是可以省略的；"><a href="#括号是可以省略的；" class="headerlink" title="括号是可以省略的；"></a>括号是可以省略的；</h3><p>在调用方法时括号是可以省略的；使用 空格间隔开参数即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def printMaximum(int a,int b)&#123;</span><br><span class="line">    if(a&gt;b)&#123;</span><br><span class="line">        println &quot;The maximum value of $a and $b is $a&quot;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        println &quot;The maximum value of $a and $b is $b&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task method &#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        println &quot;max is $&#123;max(0,1)&#125;&quot;</span><br><span class="line">        printMaximum 10,20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :method</span><br><span class="line">max is 1</span><br><span class="line">The maximum value of 10 and 20 is 20</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<h3 id="代码块是可以作为参数传递的"><a href="#代码块是可以作为参数传递的" class="headerlink" title="代码块是可以作为参数传递的"></a>代码块是可以作为参数传递的</h3><p>代码块就是一段被花括号包围的代码，其实就是闭包；</p>
<p>例如 each 方法</p>
<p>最原始的应该是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colors.each(&#123;println it&#125;)</span><br></pre></td></tr></table></figure>
<p>格式化后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colors.each(&#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Groovy 规定最后一个参数是闭包,可以将闭包放在方法外面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colors.each()&#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用时方法的括号是可以省略的 就成了这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colors.each &#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包是 Groovy 的一个重要特性，可以说是 DSL 的基础。</p>
<p>闭包其实就是一段匿名代码块。</p>
<p>闭包在 Groovy 中是 groovy.lang.Closure 类的实例，这使得闭包可以赋值给变量或字段。</p>
<p>定义一个闭包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def hello = &#123; println &quot;Hello 佛系编码&quot; &#125;</span><br></pre></td></tr></table></figure>
<p>调用这个闭包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello.call()</span><br></pre></td></tr></table></figure>
<p>另一种调用方式 直接在后面跟上 ()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello()</span><br></pre></td></tr></table></figure>
<p>下面模拟一个 each 的执行，定一个方法迭代集合中的元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">  * closure 就是 闭包参数</span><br><span class="line">  */</span><br><span class="line">def customEach(closure)&#123;</span><br><span class="line">    //迭代元素</span><br><span class="line">    for(int i in 1..10)&#123;</span><br><span class="line">    //在闭包后跟上 () 就是调用了 括号里的参数就是闭包要接收的参数</span><br><span class="line">        closure(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用这个方法，传入一个闭包打印元素; 如果闭包只有一个参数，那么默认就是 it</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 如果只有一个参数 默认就是 it</span><br><span class="line">customEach &#123;</span><br><span class="line">     println it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果闭包要接收多个参数，那就必须把参数显式的列出来，使用 -&gt; 将参数和主体分开</p>
<p>再次模拟一个 map 的 迭代:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def eachMap(closure)&#123;</span><br><span class="line">    def map1 = [name:&apos;佛系编码&apos;,age:666]</span><br><span class="line">    map1.each &#123;</span><br><span class="line">        closure(it.key,it.value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">·····</span><br><span class="line"></span><br><span class="line">//如果有多个参数，就必须要把参数列出来，使用 -&gt; 将 参数和主体分开</span><br><span class="line">eachMap &#123; key,value -&gt;</span><br><span class="line">    println &quot;$key:$value&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="闭包委托"><a href="#闭包委托" class="headerlink" title="闭包委托"></a>闭包委托</h2><p>Groovy 闭包的强大之处在于它支持闭包方法的委托。</p>
<p>Groovy 的闭包有三个重要属性</p>
<ul>
<li>thisObject 闭包定义所在的类</li>
<li>owner 表示闭包定义所在的对象或闭包（闭包内还是可以定义闭包的），这个是最近原则，下面会做说明</li>
<li>delegate 默认和 owner 一致，可以手动修改。</li>
</ul>
<p>如果将闭包定义在一个类中，默认三个属性都是相等的；</p>
<p>举个例子： 在 Person 类中 定义了 一个 act 闭包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    private String name</span><br><span class="line"></span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">       12</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Closure act =&#123;</span><br><span class="line">         println &quot;thisObject:$&#123;thisObject.getClass()&#125;&quot;</span><br><span class="line">        println &quot;owner:$&#123;owner.getClass()&#125;&quot;</span><br><span class="line">        println &quot;delegate:$&#123;delegate.getClass()&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用这个闭包，将会有下面的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :test</span><br><span class="line">thisObject:class Person</span><br><span class="line">owner:class Person</span><br><span class="line">delegate:class Person</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<p>如果将 闭包定义在一个 闭包里，那么 thisOjbect 就和 其他两个不一样，因为 thisObject 是表示的定义闭包所在的类，而 owner 表示 类或闭包</p>
<p>这次在 一个闭包里再定一个闭包看一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    private String name</span><br><span class="line"></span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">       12</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Closure act =&#123;</span><br><span class="line">        println &quot;thisObject:$thisObject&quot;</span><br><span class="line">        println &quot;owner:$owner&quot;</span><br><span class="line">        println &quot;delegate:$delegate&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Closure eat = &#123;</span><br><span class="line">        def test = &#123;</span><br><span class="line">            println &quot;thisObject:$&#123;thisObject.getClass()&#125;&quot;</span><br><span class="line">            println &quot;owner:$&#123;owner.getClass()&#125;&quot;</span><br><span class="line">            println &quot;delegate:$&#123;delegate.getClass()&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        test()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行这个 eat 闭包，将会得到以下结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :test</span><br><span class="line">thisObject:class Person</span><br><span class="line">owner:class Person$_closure2</span><br><span class="line">delegate:class Person$_closure2</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<p>可以看到 thisObject 和 owner 已经不一样了，因为 thisObject 表示的是 所在的类，而 owner 表示的定义所在的类或闭包（最近原则）</p>
<p>三个属性已经很明白了吧，</p>
<h2 id="委托策略"><a href="#委托策略" class="headerlink" title="委托策略"></a>委托策略</h2><p>无论什么时候在闭包中访问某属性或调用某方法时，若没有明确的设置对象，那么就会调用一个委托策略。通过这个委托策略来决定如果访问属性或调用方法。</p>
<p>有以下几个策略，可以通过 闭包的属性更改：resolveStrategy</p>
<ul>
<li><a href="https://docs.groovy-lang.org/latest/html/gapi/groovy/lang/Closure.html#OWNER_FIRST" target="_blank" rel="noopener">Closure.OWNER_FIRST</a> 默认策略，首先在 owner 上寻找属性和方法，找不到则在 delegate 上找。</li>
<li><a href="https://docs.groovy-lang.org/latest/html/gapi/groovy/lang/Closure.html#DELEGATE_FIRST" target="_blank" rel="noopener">Closure.DELEGATE_FIRST</a> 和上面的相反，首先在 delegate 上寻找，找不到则在 owner 上找</li>
<li><a href="https://docs.groovy-lang.org/latest/html/gapi/groovy/lang/Closure.html#OWNER_ONLY" target="_blank" rel="noopener">Closure.OWNER_ONLY</a> 只在 owner 上找，忽略 delegate</li>
<li><a href="https://docs.groovy-lang.org/latest/html/gapi/groovy/lang/Closure.html#DELEGATE_ONLY" target="_blank" rel="noopener">Closure.DELEGATE_ONLY</a> 只在 delegate 上找 忽略 owner</li>
<li><a href="https://docs.groovy-lang.org/latest/html/gapi/groovy/lang/Closure.html#TO_SELF" target="_blank" rel="noopener">Closure.TO_SELF</a> 高级选项，开发者自己定义策略</li>
</ul>
<p>下面通过一个嵌套类演示一下 策略更改的实际应用。</p>
<p>定义两个类 Person 和 内部类 Foot ，并且两者都有 name 属性。Person 多一个 age 属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    private String name</span><br><span class="line"></span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">       12</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Foot &#123;</span><br><span class="line">      String name</span><br><span class="line">      Closure walk = &#123; it -&gt;</span><br><span class="line">          println &quot;name is $name,age is $age ,delegate is $&#123;delegate.getClass()&#125;&quot;</span><br><span class="line">          //设置 delegate 属性</span><br><span class="line">          delegate = it;</span><br><span class="line">          resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class="line">          println &quot;修改策略为 Closure.DELEGATE_FIRST delegate 优先&quot;</span><br><span class="line">          println &quot;name is $name, age is $age ,delegate is $&#123;delegate.getClass()&#125;&quot;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void walk()&#123;</span><br><span class="line">        Foot foot = new Foot(name:&apos;脚&apos;);</span><br><span class="line">        foot.walk(this)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用 Person 的 walk 方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person person = new Person()</span><br><span class="line">person.name =&quot;佛系编码&quot;</span><br><span class="line">person.walk()</span><br></pre></td></tr></table></figure>
<p>将会得到下面的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :test</span><br><span class="line">name is 脚,age is 12 ,delegate is class Person$Foot</span><br><span class="line">修改策略为 Closure.DELEGATE_FIRST delegate 优先</span><br><span class="line">name is 佛系编码, age is 12 ,delegate is class Person</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<p>我来解释一下这个输出</p>
<p>第一个name 是 脚 ；这是因为默认策略是 Closure.OWNER_FIRST 是在 owner 寻找属性的；owner 当然是 Foot了。</p>
<p>第二个 name 是 佛系编码;这是因为 策略改为了 Clousre.DELEGATE_FIRST 是优先在 delegate 上寻找的，而又把 delegate 属性修改为了传进去的 Person 实例，他的值在上面已经明确声明为了 佛系编码 。</p>
<p>而 age 只有在 Person 中声明了 getAge() 方法，明确返回了 12.所以即使更改了策略，换了delegate 的值，仍然是 12.</p>
<p>注：三个属性中 只有 delegate 属性可以修改。</p>
<p>在 Gradle 中，我们一般会指定 delegate 为当前的 it,这样在闭包中就可以对 it 进行配置</p>
<p>定义一个 User 类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class User&#123;</span><br><span class="line"></span><br><span class="line">    String name</span><br><span class="line">    int age</span><br><span class="line"></span><br><span class="line">    def dumpUser()&#123;</span><br><span class="line"></span><br><span class="line">        println &quot;name is $name,age is $age .&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在构建配置脚本中定义一个方法，传入一个闭包参数用来配置 User 类</p>
<p>将闭包委托策略更改，并设置 delegate 属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def user(Closure&lt;User&gt; closure)&#123;</span><br><span class="line">    User user = new User()</span><br><span class="line">    closure.delegate = user</span><br><span class="line">    closure.resolveStrategy = Closure.DELEGATE_FIRST</span><br><span class="line">    closure(user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在使用的时候就是这样的了，Gradle 中就有很多这种的 DSL 配置，例如我们创建的 task</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">task configClosure()&#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">      user &#123;</span><br><span class="line">        name = &apos;佛系编码&apos;</span><br><span class="line">        age = 0</span><br><span class="line">        dumpUser()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :configClosure</span><br><span class="line">name is 佛系编码,age is 0 .</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.groovy-lang.org/latest/html/gapi/groovy/lang/Closure.html" target="_blank" rel="noopener">闭包 API 传送门</a></p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>这里只介绍和 Java 中不同的地方.</p>
<p>先看段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">task obj&#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        Person p = new Person()</span><br><span class="line">        println &quot;没赋值前的 ：$&#123;p.name&#125;&quot;</span><br><span class="line">        p.name = &apos;佛系编码&apos;</span><br><span class="line">        println &quot;赋值后的 ：$&#123;p.name&#125;&quot;</span><br><span class="line"></span><br><span class="line">        println &quot;age is $&#123;p.age&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">    private String name</span><br><span class="line"></span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">       12</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行 obj 任务的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Task :obj</span><br><span class="line">没赋值前的 ：null</span><br><span class="line">赋值后的 ：佛系编码</span><br><span class="line">age is 12</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<p>在 Person 类中并没有定义 name 属性的 get/set 方法；却可以设置和修改它的值；</p>
<p>这是因为 Groovy 帮我们搞定了 get/set 方法。</p>
<p> age 属性也没有在 Person 类中定义，只是定义了一个 getAge() 方法却可以使用 age 属性。</p>
<p> 但是,因为没有定义 set 方法，所以 age 属性只能访问。</p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>这里只列出来和 Java 不同且常用的运算符</p>
<h3 id="可空运算符"><a href="#可空运算符" class="headerlink" title="可空运算符"></a>可空运算符</h3><p>对象非空时使用对象本身，对象为空时使用给定值；常用于给定某个可空变量的默认值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">task operator &#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        Person person = new Person();</span><br><span class="line">        //person.name 为 null 所以会使用 佛系编码</span><br><span class="line">        def name = person.name ? person.name:&apos;佛系编码&apos;</span><br><span class="line">        // getAge 返回 12 不为空 所以使用本身</span><br><span class="line">        def age = person.age ?:10</span><br><span class="line">        println &quot;name is $name , age is $age&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :operator</span><br><span class="line">name is 佛系编码 , age is 12</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<h3 id="安全导航运算符"><a href="#安全导航运算符" class="headerlink" title="安全导航运算符"></a>安全导航运算符</h3><p>当调用一个对象上的属性或方法时，如果对象是空的，就会抛出空异常，这个使用 ?. 运算符，当对象为空时，表达式的值也是空，就不会抛出异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task operator &#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        User user</span><br><span class="line">        println &quot;user.name is $&#123;user?.name&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Task :operator</span><br><span class="line">user.name is null</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 0s</span><br><span class="line">1 actionable task: 1 executed</span><br></pre></td></tr></table></figure>
<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><p>断言是用于验证假设条件是否为真，在Groovy的断言中，如果假设的条件不为真，那么就会抛出java.lang.AssertionError异常。</p>
<p>Groovy断言和Java断言完全不同。Groovy断言是一项语言功能，一直处于开启状态，和JVM的断言功能-ea完全无关。所以它是我们进行单元测试的首选方式。</p>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert 1==2 :&quot;1不等于2&quot;</span><br></pre></td></tr></table></figure>
<p>会抛出以下异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">······</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Execution failed for task &apos;:operator&apos;.</span><br><span class="line">&gt; 1不等于2. Expression: (1 == 2)</span><br></pre></td></tr></table></figure>
<p>当然不给出消息也是可以的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert 1==2</span><br></pre></td></tr></table></figure>
<p>那么异常就是这样的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Execution failed for task &apos;:operator&apos;.</span><br><span class="line">&gt; assert 1==2</span><br><span class="line">          |</span><br><span class="line">          false</span><br></pre></td></tr></table></figure>
<p>在使用断言时最好是给出一条消息，此消息可以帮助其他人理解和维护你的代码，理清你的意图。</p>
<h1 id="Groovy-API-查询方式"><a href="#Groovy-API-查询方式" class="headerlink" title="Groovy API 查询方式"></a>Groovy API 查询方式</h1><p>对于闭包的参数，只能在 API 查询了，没有什么好的办法。</p>
<p>这里把 Groovy 文档地址列出来，方便大家查询相关 API</p>
<ul>
<li><a href="http://www.groovy-lang.org/syntax.html" target="_blank" rel="noopener">语法</a></li>
<li><a href="http://docs.groovy-lang.org/latest/html/groovy-jdk/java/lang/Object.html" target="_blank" rel="noopener">API 文档</a></li>
</ul>
<h1 id="运行须知"><a href="#运行须知" class="headerlink" title="运行须知"></a>运行须知</h1><p>要使用 gradle 或者 ./gradle 或者 gradlew 命令，必须是要安装Gradle 并设置过环境变量的，当然在Gradle所在的目录也是可以的。</p>
<p>build.gradle 是Gradle 的默认构建脚本文件，在执行 Gradle 命令的时候会默认找在当前目录下的 build.gradle 文件。</p>
<p>也可以通过 -b 参数指定加载执行的文件。</p>
<p>例如 要执行 groovu-basic.build 里的 operator 任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -b groovy-basic.gradle operator</span><br></pre></td></tr></table></figure>
<p>如果要执行上面的测试代码，步骤是</p>
<ol>
<li>新建一个 build.grale 文件 或者是通过 gradle 新建一个项目 看这篇</li>
<li>定义一个任务，添加动作</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task test&#123;</span><br><span class="line">    doLast&#123;</span><br><span class="line">        //这里是代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>粘贴代码</li>
<li>运行任务</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle test</span><br></pre></td></tr></table></figure>
<p>附上我的 Gradle 版本</p>
<p><img src="/images/Gradle/gradle-version.png" alt="Gradle 版本"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle-构建生命周期]]></title>
      <url>http://blog.skymxc.com/2019/08/10/gradle-lifecycle/</url>
      <content type="html"><![CDATA[<h2 id="两个重要的概念"><a href="#两个重要的概念" class="headerlink" title="两个重要的概念"></a>两个重要的概念</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>实际上，一个项目是什么取决于你要用 Gradle 做什么？项目通常代表的是构建内容。 例如在 Android 中，一个 module 就是一个项目；</p>
<ul>
<li>项目是注册在 setting.gradle 中的</li>
<li>通常一个项目有一个 build.gradle</li>
</ul>
<p>Gradle 构建就是由一个或多个项目组成的。</p>
<h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>任务 顾名思义就是一个在构建阶段被执行的操作。它是 Gradle 构建的原子工作单位。例如 编译 Java 源代码；</p>
<p>任务是定义在项目的构建脚本中，并且可以彼此依赖。</p>
<p>一个项目就是由一个个任务组成的。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote>
<p>每一个 Gradle 构建都会按照相同的顺序经历三个不同的阶段：</p>
</blockquote>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>Gradle 支持单项目构建和多项目构建。<br>在这个阶段 Gradle 会确认哪些项目将会参与构建。Gradle 会通过 setting.gradle 确定是多项目还是单项目构建。<br>Gradle 会为每个项目创建 Project 实例。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在这个阶段执行在初始化阶段中确定的每一个项目的配置脚本，但是并不会执行其中的任务，只会评估任务的依赖性，根据其依赖性创建任务的有向无环图。</p>
<p>Gradle引入了一个称为随需求变配置的特性，该特性使它能够在构建过程中只配置相关和必要的项目。这在大型多项目构建中非常有用，因为它可以大大减少构建时间。</p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>在这个阶段，Gradle 会识别在配置阶段创建的任务的有向无环图。并按照他们的依赖顺序开始执行。<br>所有的构建工作都是在这个阶段执行的。如编译源码，生成 .class 文件，复制文件等。</p>
<h2 id="setting-gradle"><a href="#setting-gradle" class="headerlink" title="setting.gradle"></a>setting.gradle</h2><p>这个文件是由 Gradle 约定命名的，默认名为 setting.gradle ，在初始化阶段被执行。</p>
<p>对于多项目构建，必须在这里声明要参与构建的所有项目。对于单项目构建就是可选的了，可有可无。</p>
<p>Gradle 是如何寻找 setting.gradle 的？</p>
<ol>
<li>在当前目录寻找</li>
<li>没有找到的话就去父目录寻找</li>
<li>仍然没有找到就是是单项目构建了</li>
<li>如果找到了就是确定其中的项目，如果当前执行的项目在 setting.gradle 有定义就执行多项目构建，否则就执行单项目构建。</li>
</ol>
<p>一个脚本的属性访问和方法调用是委托给 Project 类的实例的，类似的 setting.gradle 的属性访问和方法调用是委托给 Settings 类的实例对象的。</p>
<h2 id="单项目构建"><a href="#单项目构建" class="headerlink" title="单项目构建"></a>单项目构建</h2><p>对于单项目构建，在初始化后的工作流程很简单，构建脚本针对初始化阶段创建的项目对象执行。查找在命令行传入的任务名称相同的任务。<br>如果任务存在则作为一个单独的构建按照命令行传递的顺序执行。</p>
<h2 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h2><p>多项目构建是在 Gradle 的单个执行过程中构建多个项目的构建。必须把参与构建的项目声明在 setting.gradle 里</p>
<h3 id="项目位置"><a href="#项目位置" class="headerlink" title="项目位置"></a>项目位置</h3><p>可以把多项目构建看作一个单根的树。每一个项目都是树上的一个节点。一个项目有一个路径表示在树中的位置。<br>通常情况下项目的路径和在文件系统中的位置是一致的，当然了这个路径也是可以配置的。<br>项目树是 setting.gradle 生成的，默认情况下 setting.gradle 的位置就是根项目的位置。但是你可以在 setting.gradle 文件中更改。</p>
<h3 id="构建项目树"><a href="#构建项目树" class="headerlink" title="构建项目树"></a>构建项目树</h3><p>在 setting.gradle 设置文件中你可以使用一些列的方法配置构建项目树。分层和平面物理布局都支持。</p>
<h4 id="分层布局"><a href="#分层布局" class="headerlink" title="分层布局"></a>分层布局</h4><p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &apos;project1&apos;, &apos;project2:child&apos;, &apos;project3:child1&apos;</span><br></pre></td></tr></table></figure></p>
<p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;project1&quot;, &quot;project2:child&quot;, &quot;project3:child1&quot;)</span><br></pre></td></tr></table></figure></p>
<p>include 方法使用项目路径作为参数，假定项目路径与相对物理文件系统路径相等。<br>例如 “project2:child” 默认对应的是相对于根目录的 “project2/child”。<br>这也意味着包含路径 “services:hotels:api” 将创建3个项目:</p>
<ul>
<li>“services”</li>
<li>“services:hotels”</li>
<li>“services:hotels:api”</li>
</ul>
<p>更详细的说明可以 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]" target="_blank" rel="noopener">DSL文档</a>)</p>
<h4 id="平面布局"><a href="#平面布局" class="headerlink" title="平面布局"></a>平面布局</h4><p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">includeFlat &apos;project3&apos;, &apos;project4&apos;</span><br></pre></td></tr></table></figure></p>
<p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">includeFlat(&quot;project3&quot;, &quot;project4&quot;)</span><br></pre></td></tr></table></figure></p>
<p>includeFlat 也是目录名字作为参数。这些目录要和根项目目录同级。<br>这些目录的位置在项目树中是根项目的子项目。</p>
<h3 id="更改项目树的元素"><a href="#更改项目树的元素" class="headerlink" title="更改项目树的元素"></a>更改项目树的元素</h3><p>在设置文件中创建的多项目树由所谓的项目描述符组成。这些项目符号可以随时更改。<br>可以通过下面这种方式访问描述符</p>
<blockquote>
<p>查找项目树的元素</p>
</blockquote>
<p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println rootProject.name</span><br><span class="line">println project(&apos;:projectA&apos;).name</span><br></pre></td></tr></table></figure></p>
<p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(rootProject.name)</span><br><span class="line">println(project(&quot;:projectA&quot;).name)</span><br></pre></td></tr></table></figure></p>
<p>使用这个描述符你可以一个项目的名字，项目目录和构建文件</p>
<blockquote>
<p>更改项目树元素</p>
</blockquote>
<p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = &apos;main&apos;</span><br><span class="line">project(&apos;:projectA&apos;).projectDir = new File(settingsDir, &apos;../my-project-a&apos;)</span><br><span class="line">project(&apos;:projectA&apos;).buildFileName = &apos;projectA.gradle&apos;</span><br></pre></td></tr></table></figure></p>
<p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rootProject.name = &quot;main&quot;</span><br><span class="line">project(&quot;:projectA&quot;).projectDir = File(settingsDir, &quot;../my-project-a&quot;)</span><br><span class="line">project(&quot;:projectA&quot;).buildFileName = &quot;projectA.gradle&quot;</span><br></pre></td></tr></table></figure></p>
<p>更详细的信息可以查看 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/initialization/ProjectDescriptor.html" target="_blank" rel="noopener">ProjectDescriptor</a> 类的 API 文档。</p>
<h2 id="接收生命周期事件"><a href="#接收生命周期事件" class="headerlink" title="接收生命周期事件"></a>接收生命周期事件</h2><p>构建脚本可以接收生命周期构建进度的通知。</p>
<p>接收这些通知一般是两种形式</p>
<ul>
<li>实现详细的监听接口</li>
<li>在发送通知时提供一个闭包来执行</li>
</ul>
<h3 id="项目评估事件"><a href="#项目评估事件" class="headerlink" title="项目评估事件"></a>项目评估事件</h3><p>可以在项目评估后马上接到事件通知 使用的是 Project.afterEvaluate 方法，传入一个闭包，Gradle会将评估的项目和状态传递进闭包里。<br>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123;</span><br><span class="line">      println(&quot;$&#123;project.getName()&#125; 评估结果：$&#123;state.getExecuted()&#125;&quot;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate&#123; project,state-&gt;</span><br><span class="line">    println &quot;$project 评估成功否：$&#123;state.failure==null&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果是在多项目构建里，可以在 allprojects 的闭包里使用，这样每个项目的评估事件就都接受到了<br>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    afterEvaluate&#123; project,state-&gt;</span><br><span class="line">    println &quot;$project 评估成功否：$&#123;state.failure==null&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>评估前的事件通知使用 Project.beforeEvaluate 照样是传入一个闭包，Gradle会将要评估的项目传递进闭包里</p>
<p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">allprojects&#123;</span><br><span class="line">    afterEvaluate&#123; project,state-&gt;</span><br><span class="line">        println &quot;$project 评估成功否：$&#123;state.failure==null&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   beforeEvaluate &#123; project -&gt;</span><br><span class="line">       println &quot;开始评估 $project&quot;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里列出了使用的 api文档。</p>
<ul>
<li><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html" target="_blank" rel="noopener">Project</a></li>
<li><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#allprojects-groovy.lang.Closure-" target="_blank" rel="noopener">Project.allprojects</a></li>
<li><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#afterEvaluate-groovy.lang.Closure-" target="_blank" rel="noopener">Project.afterEvaluate</a></li>
<li><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#beforeEvaluate-groovy.lang.Closure-" target="_blank" rel="noopener">Project.beforeEvaluate</a></li>
<li><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/ProjectState.html" target="_blank" rel="noopener">ProjectState</a></li>
</ul>
<h3 id="任务-1"><a href="#任务-1" class="headerlink" title="任务"></a>任务</h3><h4 id="任务被添加到项目"><a href="#任务被添加到项目" class="headerlink" title="任务被添加到项目"></a>任务被添加到项目</h4><p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasks.whenTaskAdded &#123; task -&gt;</span><br><span class="line">   println &quot;$task 被添加到项目了。&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Kotlin</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.whenTaskAdded &#123;</span><br><span class="line">    extra[&quot;srcDir&quot;] = &quot;src/main/java&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val a by tasks.registering</span><br><span class="line"></span><br><span class="line">println(&quot;source dir is $&#123;a.get().extra[&quot;srcDir&quot;]&#125;&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="有向无环图填充完毕"><a href="#有向无环图填充完毕" class="headerlink" title="有向无环图填充完毕"></a>有向无环图填充完毕</h4><p>使用的是 TaskExecutionGraph.whenReady 方法</p>
<p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gradle.taskGraph.whenReady&#123; graph-&gt;</span><br><span class="line">   println &quot;任务图准备好了：\n&quot;</span><br><span class="line">   graph.allTasks.each &#123;</span><br><span class="line">       print &quot;$it , &quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/execution/TaskExecutionGraph.html#whenReady-groovy.lang.Closure-" target="_blank" rel="noopener">TaskExecutionGraph</a></li>
</ul>
<h4 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h4><p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">task ok</span><br><span class="line"></span><br><span class="line">task broken(dependsOn: ok) &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        throw new RuntimeException(&apos;broken&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.taskGraph.beforeTask &#123; Task task -&gt;</span><br><span class="line">    println &quot;executing $task ...&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.taskGraph.afterTask &#123; Task task, TaskState state -&gt;</span><br><span class="line">    if (state.failure) &#123;</span><br><span class="line">        println &quot;FAILED&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        println &quot;done&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/execution/TaskExecutionGraph.html#whenReady-groovy.lang.Closure-" target="_blank" rel="noopener">TaskExecutionGraph</a></li>
</ul>
<p>这里留一个<a href="https://docs.gradle.org/current/javadoc/index.html" target="_blank" rel="noopener">Gradle API 的查询地址</a></p>
<p>文档参考</p>
<ul>
<li><a href="https://docs.gradle.org/current/userguide/build_lifecycle.html" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/build_lifecycle.html</a></li>
<li><a href="https://proandroiddev.com/understanding-gradle-the-build-lifecycle-5118c1da613f" target="_blank" rel="noopener">https://proandroiddev.com/understanding-gradle-the-build-lifecycle-5118c1da613f</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle—创建简单的项目]]></title>
      <url>http://blog.skymxc.com/2019/08/04/gradle-basic-project/</url>
      <content type="html"><![CDATA[<h2 id="项目-amp-任务"><a href="#项目-amp-任务" class="headerlink" title="项目 &amp; 任务"></a>项目 &amp; 任务</h2><p>Gradle 的一切都是基于项目和任务的。</p>
<p>构建由一个或多个项目组成。项目的概念很抽象，它取决于你要用Gradle 做什么 。项目可以是 一个 Jar 库或者一个 web 程序。也可以是一个 zip 压缩包，也可以是将项目部署到生产环境等等；</p>
<p>一个项目是由一个或多个任务组成的；任务是构建工作的原子单位，最小的工作单元。例如：编译字节码，创建 jar 。</p>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>创建一个简单的任务，输出 Hello World!.</p>
<p>Groovy</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">task hello&#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">	    println &apos;Hello World.&apos;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Kotlin</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tasks.register(&quot;hello&quot;)&#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">		println (&quot;Hello World.&quot;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入命令 运行该任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle hello</span><br></pre></td></tr></table></figure>
<p><img src="/images/Gradle/basic-execult-result.png" alt="运行结果"></p>
<h2 id="创建一个简单的构建"><a href="#创建一个简单的构建" class="headerlink" title="创建一个简单的构建"></a>创建一个简单的构建</h2><p>新建一个目录</p>
<p>使用 init 命令创建构建项目</p>
<p>Gradle 现在支持两种–Kotlin DSL 和 Groovy DSL .默认是 基于Groovy的，如果要使用 Kotlin 可以 使用 <code>--dsl kotlin</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle init --dsl kotlin</span><br></pre></td></tr></table></figure>
<p><img src="/images/Gradle/basic_init.png" alt="初始化"></p>
<p>会生成如下目录</p>
<p><img src="/images/Gradle/basic-execult-result.png" alt="生成的目录"></p>
<p>其中 .gitigonre 是 git 忽略文件；.gradle 是 gradle 的一些信息。</p>
<p>需要我们关注的是下面这些文件</p>
<p>├── gradle</p>
<p>│   └── wrapper</p>
<p>│       ├── gradle-wrapper.jar  </p>
<p>│       └── gradle-wrapper.properties  </p>
<p>├── build.gradle.kts   </p>
<p>├── gradlew  </p>
<p>├── gradlew.bat</p>
<p>└── settings.gradle.kts  </p>
<ul>
<li>warpper 是 Gradle Wrapper 使用的目录</li>
<li>gradle-wrapper.jar 是执行 Gradle Wrapper 使用的</li>
<li>gradle-wrapper.properties 是 配置 Gradle Wrapper 属性的</li>
<li>build.gradle.kts 用于配置当前项目的Gradle构建脚本</li>
<li>gradlew 是 Unix 机器上的 执行脚本</li>
<li>gradlew.bat 是 window 上的执行脚本</li>
<li>settings.gradle.kts 是 用于配置Gradle构建的Gradle设置脚本</li>
</ul>
<h2 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h2><p>Gradle提供了通过Groovy或基于kotlin的DSL创建和配置任务的api。项目包含一组任务，每个任务执行一些基本操作。</p>
<p>Gradle提供了一个任务库，我们可以在自己的项目中配置这些任务。例如，有一个核心类型的 Copy 任务，它可以复制文件。<br>下面我们就配置这个 任务来使用一下。</p>
<p>创建一个目录 src<br>在 src 下创建一个文件名称任意，例如 myFile.txt。添加任意内容，例如 Hello World!<br>在 配置脚本（build.gradle.kts） 添加 一个 Copy 类型的 copy 任务，从 src 目录复制到 dest 目录</p>
<p>Gradle 在执行时会自动创建 dest 目录。</p>
<p>Kotlin</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.register&lt;Copy&gt;(&quot;copy&quot;)&#123;</span><br><span class="line">    description = &quot;Copies sources to the dest directory&quot;</span><br><span class="line">    group = &quot;Custom&quot;</span><br><span class="line">    from(&quot;src&quot;)</span><br><span class="line">    into(&quot;dest&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Groovy</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task copy(type: Copy, group: &quot;Custom&quot;, description: &quot;Copies sources to the dest directory&quot;) &#123;</span><br><span class="line">    from &quot;src&quot;</span><br><span class="line">    into &quot;dest&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>description 和 group 都是可选的，可以随便你定义；也是可以省略的；</em></p>
<p>执行 copy 任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle copy</span><br></pre></td></tr></table></figure>
<p>检查里面的 myFile.txt 是否复制完成。</p>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>Gradle 提供了大量的插件，在 <a href="https://plugins.gradle.org/" target="_blank" rel="noopener">Gradle 插件站</a> 可以查到</p>
<p>今天使用 一个 base 插件 结合它的核心类型 Zip 任务，实现打包压缩包的任务。</p>
<p>使用 base 插件</p>
<p>Kotlin</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(&quot;base&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... rest of the build file ...</span><br></pre></td></tr></table></figure>
<p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &quot;base&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... rest of the build file ...</span><br></pre></td></tr></table></figure></p>
<p>创建一个 zip 任务，扩展自 核心类型 Zip</p>
<p>Kotlin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.create&lt;Zip&gt;(&quot;zip&quot;) &#123;</span><br><span class="line">    description = &quot;Archives sources in a zip file&quot;</span><br><span class="line">    group = &quot;Archive&quot;</span><br><span class="line"></span><br><span class="line">    from(&quot;src&quot;)</span><br><span class="line">    setArchiveName(&quot;basic-demo-1.0.zip&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Groovy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">task zip(type: Zip, group: &quot;Archive&quot;, description: &quot;Archives sources in a zip file&quot;) &#123;</span><br><span class="line">    from &quot;src&quot;</span><br><span class="line">    setArchiveName &quot;basic-demo-1.0.zip&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行 zip</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle zip</span><br></pre></td></tr></table></figure>
<p>至此，一个简单的构建完成了。</p>
<h2 id="分析构建过程"><a href="#分析构建过程" class="headerlink" title="分析构建过程"></a>分析构建过程</h2><p>Gradle 提供了一个基于 web的构建视图——构建扫描</p>
<p>在执行时 使用 –scan 选项或者明确使用构建扫描插件都可以免费的在 <a href="https://scans.gradle.com" target="_blank" rel="noopener">https://scans.gradle.com</a> 创建一个扫描视图分析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle zip --scan</span><br></pre></td></tr></table></figure>
<p>在同一服务条款后会直接发送到 构建扫描的平台，复制下面的连接打开即可。</p>
<p><img src="/images/Gradle/basic-scan-execute.png" alt="构建扫描"></p>
<p>打开之后会有详细的项目构建分析</p>
<p><img src="/images/Gradle/basic-scan-result.png" alt="构建分析"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gardle 是什么]]></title>
      <url>http://blog.skymxc.com/2019/08/04/WhatIsGradle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>写在前面的话，最近在系统的学习Gradle,本来想写一篇关于 Gradle 的介绍。<br>但在官网发现了这篇关于 Gradle 的介绍，已经介绍的很好了，我就很直接翻译过来了。<br>原文地址 <a href="https://docs.gradle.org/current/userguide/what_is_gradle.html" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/what_is_gradle.html</a></p>
</blockquote>
<h2 id="Gradle-的几个优点"><a href="#Gradle-的几个优点" class="headerlink" title="Gradle 的几个优点"></a>Gradle 的几个优点</h2><p>Gradle 是开源的自动化构建工具，它的设计足够灵活，可以构建几乎任何软件。</p>
<p>它有以下几个显著的优点：</p>
<h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>Gradle 只运行那些输入和输出有改变的任务，从而避免无效的工作。另外，还可以通过缓存开关重用之前的任务输出（其他的机器上的缓存也是可以的）。<br>Gradle还实现了许多其他优化，开发团队会持续不断地改进Gradle的性能。</p>
<h3 id="基于-JVM"><a href="#基于-JVM" class="headerlink" title="基于 JVM"></a>基于 JVM</h3><p>Gradle 是运行在 JDK上的，必须安装 JDK 才能运行。因为是运行在 JDK 上，这对于使用 Java 的用户是个额外的好处，可以在构建脚本中使用标准的 Java API，例如 自定义任务和插件，另外，因为是基于JDK的，它可以很好的跨平台运行。<br>Gradle 并不限于构建JVM项目，甚至还附带了对于构建本地项目的支持。</p>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>Gradle 借鉴 Mavean 的做法，通过实现约定，使常见类型的项目(比如Java项目)易于构建。使用适当的插件可以很容易的为许多项目生成构建脚本。<br>约定并没有什么限制，可以覆盖原有的约定，添加自定义任务等来实现自己的构建模型。</p>
<h3 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h3><p>Gradle有很好的扩展性，可以添加定义自己的任务，覆盖已有的任务类型甚至定义自己的构建模型。Android 支持插件就是个很好的例子，在原有的基础上 增加了 flavor 和 buildType 约定。</p>
<h3 id="IDE-支持"><a href="#IDE-支持" class="headerlink" title="IDE 支持"></a>IDE 支持</h3><p>常见的几个主流 IDE 都支持导入 Gradle项目，并可以与之交互，例如 Android studio,Eclipse ， IntelliJ IDEA，NetBeans等。Gradle 也有将项目文件加载进 Visual studio 的解决方案。</p>
<h3 id="Insight"><a href="#Insight" class="headerlink" title="Insight"></a>Insight</h3><p>构建扫描 提供了构建运行的大量信息，可以使用它去定位构建问题。它可以帮你定位构建性能问题。也可以把它分享给其他人，这样在交流问题的时候就很有用了。更详细的构建扫描可以查看这个文档 <a href="https://scans.gradle.com/?_ga=2.3508848.1142716506.1563790305-874993899.1553652374" target="_blank" rel="noopener">https://scans.gradle.com/?_ga=2.3508848.1142716506.1563790305-874993899.1553652374</a></p>
<h2 id="Gradle-的五个重要概念"><a href="#Gradle-的五个重要概念" class="headerlink" title="Gradle 的五个重要概念"></a>Gradle 的五个重要概念</h2><p>Gradle 是一个灵活而强大的工具，在刚使用的时候很容易望而生畏。理解下面几个核心原则后就会觉得Gradle还是很好理解的，这会帮助你更好的使用Gradle。</p>
<h3 id="Gradle-是一个通用构建工具"><a href="#Gradle-是一个通用构建工具" class="headerlink" title="Gradle 是一个通用构建工具"></a>Gradle 是一个通用构建工具</h3><p>因为Gradle 不对要做的构建或者如何构建做任何设想，所以Gradle几乎可以构建任务软件。</p>
<p>目前最大的限制就是依赖管理只支持 Maven 和 lvy 的编译库和文件。<br>虽然有这样的限制，但是在用的时候也不麻烦，对常见类型的项目都是很容易构建的-例如 Java编译库，通过添加一层约定和插件预构建功能，可以将自己的约定和功能封装成一个插件，当然也可以发布这个插件。</p>
<h3 id="Gradle-的核心是基于任务"><a href="#Gradle-的核心是基于任务" class="headerlink" title="Gradle 的核心是基于任务"></a>Gradle 的核心是基于任务</h3><p>Gradle 将其构建建模为任务（工作单元）的有向无环图。意思是构建实际上是配置一组任务，并根据他们的依赖性创建一个有向无环图。一旦图创建完成，Gradle 将确定哪些任务以何种顺序运行，然后执行它们。<br>下面是两个任务图，一个是简单的，一个是很详细的，任务的依赖关系通过箭头表示。</p>
<p><img src="/images/Gradle/task-dag-examples.png" alt="image"></p>
<p>几乎所有的构建过程都可以建模为任务图,这也是Gradle如此灵活的原因之一。任务图可以通过插件和你自己的脚本定义,关于任务依赖性可以看文档  <a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:task_dependencies" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:task_dependencies</a></p>
<p>任务由三部分构成</p>
<ul>
<li>操作 ——做一些工作，例如复制文件或者编译源码</li>
<li>输入 ——值，行为能够操作的值，文件或者目录。</li>
<li>输出 ——行为修改或产生的值，文件或目录</li>
</ul>
<p>实际上根据现实情况以上都是可选的，例如在Gradle 的生命周期里任务就有的什么也没做，只是将多个任务组合起来。<br>另外 Gradle 的增量编译是很强大可靠的，为了快速编译除非真的需要执行 clean 任务之外没必要执行 clean 操作。</p>
<p>你可以选择运行哪些任务。通过指定执行所需任务来节省时间，但也仅此而已。如果你想运行单元测试，就应该执行 test任务。如果您想打包应用程序，大多数构建都有相应的 assemble 任务。</p>
<p>最后一件事:Gradle的增量构建支持是健壮和可靠的，所以除非您真的想执行一个clean任务，否则通过避免clean任务来保持构建的快速运行</p>
<h3 id="Gradle有几个固定的构建阶段"><a href="#Gradle有几个固定的构建阶段" class="headerlink" title="Gradle有几个固定的构建阶段"></a>Gradle有几个固定的构建阶段</h3><p>理解Gradle在三个阶段评估和执行构建脚本是很重要的：</p>
<ol>
<li>初始化<br> 创建构建环境并确定哪些项目参与构建</li>
<li>配置<br>为构建构造和配置任务图，根据用户想要运行的任务确定以何种顺序执行哪些任务。</li>
<li>执行<br> 运行配置阶段结束时选择的任务。</li>
</ol>
<p>这些阶段就构成了 Gradle 的生命周期。</p>
<blockquote>
<p>与Apache Maven术语的比较：<br>Gradle的构建阶段不像Maven的阶段。Maven的构建阶段将构建分为多个阶段。它们的作用类似于Gradle的任务图，尽管不那么灵活。<br>Maven的构建生命周期概念与Gradle的生命周期任务大致相似。</p>
</blockquote>
<p>好的设计构建脚本主要由声明式配置而非命令逻辑组成。在配置阶段可以理解地评估该配置。即便如此，许多此类构建还具有任务操作 - 例如通过doLast {}和doFirst {}块 - 在执行阶段进行评估。这很重要，因为在配置阶段评估的代码不会看到在执行阶段发生的更改。</p>
<p>配置阶段另一个重要的方面是每次构建都会对其中涉及的所有内容做评估。这也是为什么应该在配置阶段避免多余的工作。构建扫描可以帮助你识别这样的事情。</p>
<h3 id="Gradle-的扩展方式"><a href="#Gradle-的扩展方式" class="headerlink" title="Gradle 的扩展方式"></a>Gradle 的扩展方式</h3><p>如果Gradle 附带的构建逻辑无法满足我们的构建需求，而往往通常是这样。大部分的构建都有特定的需求，需要我们添加自己的构建逻辑。</p>
<p>Gradle 提供了以下几个主要方式去扩展它。</p>
<ol>
<li><p>自定义任务类型</p>
<p>当 Gradle 本身的任务无法满足你的时候，你可以编写自己的任务类型。最好将编写的任务源文件放在 buildSrc 目录或者打包一个插件，然后你就可以像使用其他的Gradle 任务那样使用了。<br>参考 <a href="https://docs.gradle.org/current/userguide/custom_tasks.html" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/custom_tasks.html</a></p>
</li>
<li><p>自定义任务操作</p>
<p> 你可以将自己的构建逻辑附加在任务的 开始之前 Task.doFirst() 和 结束之后 Task.doLast() 的方法里。</p>
</li>
<li><p>项目和任务的额外属性</p>
<p> Gradle 允许你为项目或者任务添加自己的属性，你可以在自定义行为或者其他构建逻辑中使用。额外的属性甚至可以应用于你没有显式创建的任务，比如由Gradle的核心插件创建的任务。</p>
</li>
<li><p>自定义约定</p>
<p> 约定是一种简化构建的强大方法，这样用户就可以更容易地理解和使用它们。这可以在使用标准项目结构和命名约定(如Java构建)的构建中看到。<br> 你可以编写自己的插件来提供约定——它们只需要为构建的相关方面配置默认值。</p>
</li>
<li><p>自定义模型</p>
<p> Gradle允许你引进除任务，文件和依赖配置之外的概念。可以在大多数语言插件中看到这一点，它们将源集的概念添加到构建中。对构建过程进行适当的建模可以极大地提高构建的易用性和效率。</p>
</li>
</ol>
<h3 id="脚本对API进行操作"><a href="#脚本对API进行操作" class="headerlink" title="脚本对API进行操作"></a>脚本对API进行操作</h3><p>   构建脚本其实就是可执行代码。好的脚本描述了构建软件需要哪些步骤，而不是这些步骤应该怎么工作。那是定制任务和插件应该做的。</p>
<p>   有一个常见的误解是Gradle的强大和灵活是因为它的脚本是代码，其实并不是。提供这种的能力的是底层模型和API。就像我们在实践中建议的那样，你不应该放太多命令式逻辑在脚本里。然而，将构建脚本视为可执行代码有一个方面是有用的:理解构建脚本的语法如何映射到Gradle的API。由Groovy DSL引用和 Javadocs组成的API文档列出了方法和属性，并引用了闭包和操作。这些在构建脚本上下文中意味着什么? 查看Groovy构建脚本入门，了解这个问题的答案，以便能够有效地使用API文档。    <a href="https://docs.gradle.org/current/userguide/groovy_build_script_primer.html#groovy_build_script_primer" target="_blank" rel="noopener">https://docs.gradle.org/current/userguide/groovy_build_script_primer.html#groovy_build_script_primer</a></p>
<blockquote>
<p>因为Gradle运行在 JVM上，所以脚本中也可以使用标准的Java API，Groovy 脚本可以使用 Groovy API，Kotlin 脚本可以使用 Kotlin API。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dagger2使用攻略-基础部分]]></title>
      <url>http://blog.skymxc.com/2018/09/26/Dagger2-basic/</url>
      <content type="html"><![CDATA[<p>在这篇文章中，我会介绍 什么是依赖注入，Dagger2是什么，解决什么问题以及基础注解的使用</p>
<p><img src="http://devpicture.oss-cn-beijing.aliyuncs.com/18-9-26/50831786.jpg" alt="Dagger2"></p>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><h3 id="什么是-依赖。"><a href="#什么是-依赖。" class="headerlink" title="什么是 依赖。"></a>什么是 依赖。</h3><p>举个例子</p>
<p>有一个 A 类 它里面定了一个 B 类型的 属性 b; 这里 A 就依赖了 B；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        b = <span class="keyword">new</span> B();</span><br><span class="line">        b.print();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就意味着 A 离开 B 不能单独运行，也就是说 A 在哪里工作，B就会跟到哪里，A 无法离开 B 被复用。</p>
<p>这种情况下 A 就是 依赖者，B就是依赖。依赖者依赖于它的依赖。</p>
<p>两个相互使用的类称为耦合；耦合有强有弱。耦合总是有方向性的。可能 A 依赖 B，但 B 不一定依赖 A。</p>
<h3 id="依赖类型"><a href="#依赖类型" class="headerlink" title="依赖类型"></a>依赖类型</h3><ul>
<li>类 / 接口 依赖</li>
<li>属性 / 方法 依赖</li>
<li>间接 / 直接 依赖</li>
</ul>
<h3 id="硬编码依赖的不好"><a href="#硬编码依赖的不好" class="headerlink" title="硬编码依赖的不好"></a>硬编码依赖的不好</h3><p>在依赖者内部构建或者由依赖者寻找依赖这种就称为 硬编码依赖</p>
<ul>
<li>降低复用性</li>
<li>不好测试</li>
<li>强耦合</li>
<li>增加维护成本</li>
</ul>
<p>关于 什么是依赖，更详细的硬编码依赖的缺点这部分，更详细的可以参考这篇文章，我就是从篇文章学习来的。</p>
<p><a href="https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-introduction-be6580cb3edb" target="_blank" rel="noopener">https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-introduction-be6580cb3edb</a></p>
<h4 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h4><p>依赖注入：一个对象提供另一个对象的依赖的技术；</p>
<p>依赖是个能被使用的对象（一个服务）；注入是将依赖传递给要使用它的对象（客户端 / 依赖者）。</p>
<p>服务作为客户端的一部分。将服务传递给客户端而不是客户端构建或者寻找服务，这是模式（依赖注入）的基本要求。</p>
<p>换句话说：</p>
<p>依赖作为依赖者的一部分。将依赖传递给依赖者而不是由依赖者构建或者寻找依赖，这是依赖注入的基本要求。</p>
<p>也就是说 依赖从来原来的由依赖者构建，改为现在由外部注入，也可以称为 控制反转。</p>
<p>这样的好处是很明显的，提高可测试性，解偶，降低维护成本等等。</p>
<p>更详细的解释 可以看一下这篇文章，解释的超级棒，如果你看过权力的游戏，就更棒了。</p>
<p><a href="https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-di-part-i-f5cc4e5ad878" target="_blank" rel="noopener">https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-di-part-i-f5cc4e5ad878</a></p>
<p>Dagger2 就是 Android 平台的一个依赖注入框架，它现在由 Google 维护开发。</p>
<p>Dagger2 是编译时框架，会在编译时根据你的注解配置生成需要的代码。</p>
<hr>

<p>下面是我对 Dagger2 中的常用注解的理解。理解了这些注解的意思和作用，基本就学会了 Dagger2 的基本用法了。</p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="Inject"><a href="#Inject" class="headerlink" title="@Inject"></a>@Inject</h3><p>这个注解有两个作用：</p>
<ul>
<li>修饰需要注入的属性，Dagger2 会自动注入</li>
<li>修饰被注入的类的构造方法上；Dagger2 会在需要的时候通过这个注解找到构造函数自动构造对象注入</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBManager</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>这个注解的作用 是连接提供依赖和注入依赖的。相当与一个注射器的角色，将依赖注入到需要的地方。</p>
<p>刚刚通过上面的 <code>@Inject</code> 注解 了  提供依赖的构造方法 和 需要注入的属性，而这样还是不够的，需要使用 <code>@Comnponent</code> 连接起来。</p>
<p>创建一个接口，并定义一个方法，定义要往哪里注入；在编译时期 Dagger2 就会自动生成这个接口的实现类 并以 Dagger 开头。</p>
<p>还可以定义 向外提供实例的方法；Dagger2  都会在编译时期生成相应的代码。</p>
<p>下面是 示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">DBManager <span class="title">getDBManager</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在需要被注入的类中注入 例如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 注入</span></span><br><span class="line">        DaggerMainComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>@Component</code> 有两个属性 <code>modules</code> and <code>dependencies</code> ；</p>
<ul>
<li><code>modules</code> 的作用是引用 <code>Module</code> 的，下面 <code>@Module</code> 会继续说</li>
<li><code>dependencies</code> 的作用是 引用其他 <code>Component</code> 使用的，相当于 把其他的 <code>Component</code> 当作组件一样引用过来；</li>
</ul>
<h3 id="SubComponent"><a href="#SubComponent" class="headerlink" title="@SubComponent"></a>@SubComponent</h3><p>顾名思义 就是 Comnponent 的儿子，它也表示一个注射器的角色，不过它可以继承 Component的全部 属性。</p>
<p>Dagger2 不会生成 Dagger开头的 DaggerSubComponent 这种类，所以，SubComponent 需要在 Component 注册和维护。这样的也好统一管理维护，Dagger2 会在生成 Component的时候自动实现生成在内定义的方法。</p>
<p>举个例子 我的 ApplicationComponent 是个全局单例的，有 NetModule， APPModule,等等很多全局性依赖，如果我的 Activity 的注射器 使用 <code>@SubComnponent</code> ，那么就可以使用Application的全部依赖。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScoped</span></span><br><span class="line"><span class="meta">@Subcomponent</span>(modules = MainModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@APPScoped</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;APPModule.class, APIModule.class&#125; )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APPComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">MainComponent <span class="title">plus</span><span class="params">(MainModule <span class="keyword">module</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SecondComponent <span class="title">plus</span><span class="params">(SecondModule <span class="keyword">module</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注入</span></span><br><span class="line"></span><br><span class="line">     DaggerAPPComponent.builder()</span><br><span class="line">     .aPPModule(<span class="keyword">new</span> APPModule(getApplication()))</span><br><span class="line">     .build()</span><br><span class="line">     .plus(<span class="keyword">new</span> SecondModule())</span><br><span class="line">     .inject(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>当然还有另外一种方法不用 <code>@SubComponent</code>，使用 <code>Component</code> 并使用 <code>denpendencies</code> 引用上 <code>ApplicationComponent</code> 这样就相当于将 <code>ApplicationComponent</code> 组合进来。</p>
<h3 id="Module-amp-amp-Provides"><a href="#Module-amp-amp-Provides" class="headerlink" title="@Module &amp;&amp; @Provides"></a>@Module &amp;&amp; @Provides</h3><p><code>@Module</code> 这个注解用来标注提供依赖的工厂。对的，工厂，我是这么理解的。</p>
<p><code>@Provides</code> 这个注解用在提供定义提供依赖的方法上，表示向外提供依赖。方法的返回类型就是提供的依赖类型。</p>
<p>前面提到的 <code>@Inject</code> 可以在注解在构造函数以用来提供依赖；而在 <code>@Inject</code> 不能满足需要的时候这个就派上用场了。</p>
<p>例如 我注入一个 字符串，数字或一个 第三方依赖的对象 例如 Retrofit ,<code>@Inject</code> 已经满足不了啦。</p>
<p>这个时候可以创建一个类 专门用来提供这些依赖，并使用 <code>@Module</code> 注解，然后在 <code>Component</code> 的属性 <code>modules</code> 引用上就可以使用了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要注入的 Activity</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    OkHttpClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_third);</span><br><span class="line"></span><br><span class="line">        DaggerThirdComponent.create().inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Log.e(ThirdActivity.class.getSimpleName(), <span class="string">"onCreate: name-"</span>+name+<span class="string">";age-"</span>+age+<span class="string">";client-"</span>+client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供依赖的 工厂</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"skymxc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">provideOkHttpClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder().build();</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接 依赖和注入方 ,在这里引用 依赖提供方。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(modules = ThirdModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThirdComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(ThirdActivity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Named"><a href="#Named" class="headerlink" title="@Named"></a>@Named</h3><p>在依赖迷失时给出方向。</p>
<p>解释一下 <em>依赖迷失</em>：</p>
<p>依旧是上面那个例子，现在 都是根据返回值类型来注入的，现在都是不同的类型所以还没有出现迷失的情况；<br>现在我如果要加上 地址 属性；如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// activity内</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    OkHttpClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> String address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// module 中</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"skymxc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">provideAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"北京"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个时候 在 module 中 有两个返回 String 类型的 方法，Dagger2 这个时候就不知道注入哪一个了，所以就会出现 <em>依赖迷失</em> 的情况；</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误: [Dagger/DuplicateBindings] java.lang.String is bound multiple times:</span><br><span class="line">@Provides String com.skymxc.example.dagger2.di.module.ThirdModule.provideAddress()</span><br><span class="line">@Provides String com.skymxc.example.dagger2.di.module.ThirdModule.provideName()</span><br></pre></td></tr></table></figure>
<p>简单的解决方法就是在 属性和提供依赖上 加上 <code>@Named</code> 注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Named</span>(<span class="string">"name"</span>)</span><br><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">provideName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"skymxc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line"><span class="meta">@Named</span>(<span class="string">"address"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">provideAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"北京"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 属性上也加上</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"name"</span>)</span><br><span class="line"><span class="meta">@Inject</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Named</span>(<span class="string">"address"</span>)</span><br><span class="line"><span class="meta">@Inject</span> String address;</span><br></pre></td></tr></table></figure>
<p>这样就可以解决了 依赖迷失。</p>
<h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p><code>@Named</code> 的元注解，解决依赖迷失的大 Boss；看一下 <code>@Named</code> 的源码,<code>@Named</code> 就是被 <code>@Qualifier</code> 注解的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Named &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The name. */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果怕通过 <code>@Named</code> 写字符串的方式容易出错就可以通过 <code>@Qualifier</code> 自定义注解来实现。</p>
<p>下面举个例子，再加一个 身高属性。定义两个注解来区分 <code>@Age</code> and <code>@Height</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Height &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Age &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在 module 和 属性上使用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Age</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Height</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">provideHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">175</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Age</span></span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Height</span></span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">int</span> height;</span><br></pre></td></tr></table></figure>
<h3 id="Singleton"><a href="#Singleton" class="headerlink" title="@Singleton"></a>@Singleton</h3><p> 配合 <code>@Component</code> 实现 <strong>范围内单例</strong> </p>
<p> <code>@Singleton</code> 必须和 <code>@Component</code> 配合才能实现单例，而且只能保证在 <code>@Component</code> 范围内单例，如果要实现全局单例，就必须要保证   <code>@Component</code> 的实例在全局范围内只有一个，类似 Application 。</p>
<p> 举个例子，我要 <code>DBManager</code> 在全局单例，需要以下几个步骤</p>
<ol>
<li>在 DBManger 上使用 <code>@Singleton</code> 或者 在 @Provides 修饰的方法上加。</li>
<li>然后在 AppComponent 也加上（）</li>
<li>在 Application 中 获取 AppComponent 实例，让其全局唯一。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.DBManager 标注 @Singleton</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBManager</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;APPModule.class, APIModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APPComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function">MainComponent <span class="title">plus</span><span class="params">(MainModule <span class="keyword">module</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SecondComponent <span class="title">plus</span><span class="params">(SecondModule <span class="keyword">module</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可有可无 为了测试</span></span><br><span class="line"> <span class="function">DBManager <span class="title">getDBManager</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 在 Application 中获取 实例，并保证唯一实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> APPComponent appComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        appComponent = DaggerAPPComponent.builder()</span><br><span class="line">                .aPPModule(<span class="keyword">new</span> APPModule(<span class="keyword">this</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> APPComponent <span class="title">getAppComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试，在 MainActivity 注入两个。</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> DBManager dbManager1;</span><br><span class="line">    </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用 Application 获取 AppComponent </span></span><br><span class="line">         ((MApplication)getApplication()).getAppComponent()</span><br><span class="line">                .plus(<span class="keyword">new</span> MainModule())</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: appdb--&gt;"</span>+((MApplication)getApplication()).getAppComponent().getDBManager().hashCode());</span><br><span class="line">        <span class="comment">//是否是全局范围内单例</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (dbManager==dbManager1) &#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager-sintleton-&gt;"</span>+dbManager.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager:"</span>+dbManager.hashCode());</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager1:"</span>+dbManager1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 SecondActivity 注入两个看看是否和 Main 中的是一个实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager1;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        </span><br><span class="line">        ((MApplication)getApplication()).getAppComponent()</span><br><span class="line">                .plus(<span class="keyword">new</span> SecondModule())</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dbManager==dbManager1) &#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager-singleton-&gt;"</span>+dbManager.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager:"</span>+dbManager.hashCode());</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager1:"</span>+dbManager1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果必须是全局唯一单例，看一下 log</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: onCreate: appdb--&gt;192114699</span><br><span class="line">    onCreate: dbmanager-sintleton-&gt;192114699</span><br><span class="line">    </span><br><span class="line">E/SecondActivity: onCreate: dbmanager-singleton-&gt;192114699</span><br></pre></td></tr></table></figure>
<p><code>@Singleton</code> 的作用域 始终是跟随所在的 <code>Component</code> 的实例的，如果超出它的范围就无法保证单例。</p>
<p>就拿上个例子举例，如果每次 在 Activity 注入的时候 不从 Application 获取实例而是每次都是使用 DaggerAppComponent 创建一个新的 实例 ，那么就无法保证两个 Activity 内的 DBManager 都是一个实例了，因为每个 Activity 都是获取新的 AppComponent 的实例，它的作用范围只能在单个实例内。</p>
<p>下面我实现一个 只在 Activity 范围实现单例的 例子，就是把上面的代码改改，在Activity注入的时候 创建新的 Component 实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager1;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        </span><br><span class="line">  <span class="comment">//      ((MApplication)getApplication()).getAppComponent()</span></span><br><span class="line">  <span class="comment">//              .plus(new SecondModule())</span></span><br><span class="line">   <span class="comment">//             .inject(this);</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 获取新实例</span></span><br><span class="line">        DaggerAPPComponent.builder().aPPModule(<span class="keyword">new</span> APPModule(getApplication())).build().plus(<span class="keyword">new</span> MainModule()).inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dbManager==dbManager1) &#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager-singleton-&gt;"</span>+dbManager.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager:"</span>+dbManager.hashCode());</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager1:"</span>+dbManager1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> DBManager dbManager1;</span><br><span class="line">    </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">      <span class="comment">// 获取新实例</span></span><br><span class="line">        DaggerAPPComponent.builder().aPPModule(<span class="keyword">new</span> APPModule(getApplication())).build().plus(<span class="keyword">new</span> MainModule()).inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dbManager==dbManager1) &#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager-sintleton-&gt;"</span>+dbManager.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager:"</span>+dbManager.hashCode());</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager1:"</span>+dbManager1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// log </span></span><br><span class="line"></span><br><span class="line"><span class="number">09</span>-<span class="number">23</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">52.937</span> E/DBHelper: DBHelper: </span><br><span class="line"><span class="number">09</span>-<span class="number">23</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">52.937</span> E/MainActivity: onCreate: dbmanager-sintleton-&gt;<span class="number">115289709</span></span><br><span class="line"><span class="number">09</span>-<span class="number">23</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">57.097</span> E/DBHelper: DBHelper: </span><br><span class="line"><span class="number">09</span>-<span class="number">23</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">57.097</span> E/SecondActivity: onCreate: dbmanager-singleton-&gt;<span class="number">64826129</span></span><br></pre></td></tr></table></figure>
<p>总结 ： Dagger2 实现单例要 <code>@Singleton</code> 和 <code>@Component</code> || <code>@SubComponent</code> 配合使用，只能实现范围内(实例内)单例，所以范围要控制好。只要范围控制好，随意 Activity 或者 Application 范围。</p>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><p>作用域 上面说到的 <code>@Singleton</code> 就是它的默认实现，也是唯一一个默认实现。</p>
<p>看一下 <code>@Singleton</code> 的源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Identifies a type that the injector only instantiates once. Not inherited.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.inject.Scope <span class="doctag">@Scope</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Singleton &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Singleton</code> 能够实现范围内单例 主要是 <code>@Scope</code> 在起作用。默认实现叫 <code>Singleton</code> 也是为了更好的理解。</p>
<p>我们可以根据自己的情况，自定义我们自己的依赖作用域，就像我们上面说的 跟随 Application 生命周期的，跟随 Activity 生命周期的，或者 User 生命周期的等等。</p>
<p>举个例子 我们定义俩个  AppScoped, ActivityScoped. 分别让我们的依赖实现 全局单例和Activity内单例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * APP全局单例</span></span><br><span class="line"><span class="comment"> * 此注解使用的 Component 要全局范围内唯一 ，不然无法实现全局单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> APPScoped &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * activity 内单例</span></span><br><span class="line"><span class="comment"> * 使用 此注解的Component 生命周期要跟随 Activity 的生命周期。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScoped &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>创建一个类 SingletonObj 让其在 Activity范围内 单例,  让 DBManager 全局单例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScoped</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObj</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonObj</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@APPScoped</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> DBHelper helper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBManager</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>定义 Component ，注意 AppScoped , ActivityScoped 的位置</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@APPScoped</span></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123; APIModule.class,APPModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APPComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">MainComponent <span class="title">plus</span><span class="params">(MainModule <span class="keyword">module</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SecondComponent <span class="title">plus</span><span class="params">(SecondModule <span class="keyword">module</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DBManager <span class="title">getDBManager</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScoped</span></span><br><span class="line"><span class="meta">@Subcomponent</span>(modules = MainModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MainComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScoped</span></span><br><span class="line"><span class="meta">@Subcomponent</span>(modules = SecondModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SecondComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(SecondActivity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>获取 Component 并开始注入</li>
</ol>
<p>在 Application 获取 AppComponent 的实例 ，并保持唯一。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> APPComponent appComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        appComponent = DaggerAPPComponent.builder()</span><br><span class="line">                .aPPModule(<span class="keyword">new</span> APPModule(<span class="keyword">this</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> APPComponent <span class="title">getAppComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在 MainActivity 获取到 MainComponent 的实例 并注入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span> DBManager dbManager1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    SingletonObj mainSingleton;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    SingletonObj mainSingleton1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        findViewById(R.id.bt_to_second).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.bt_to_third).setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        ((MApplication)getApplication()).getAppComponent()</span><br><span class="line">                .plus(<span class="keyword">new</span> MainModule())</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: appdb--&gt;"</span>+((MApplication)getApplication()).getAppComponent().getDBManager().hashCode());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//查看 是否和 second的一致，是否是全局范围内单例</span></span><br><span class="line">        <span class="keyword">if</span> (dbManager==dbManager1) &#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager-sintleton-&gt;"</span>+dbManager.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager:"</span>+dbManager.hashCode());</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager1:"</span>+dbManager1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//主要看 这个 和 second的是否一致，是否是activity范围内单例。</span></span><br><span class="line">        <span class="keyword">if</span> (mainSingleton==mainSingleton1)&#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: main-singleton-&gt;"</span>+mainSingleton.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: main:"</span>+mainSingleton.hashCode());</span><br><span class="line">            Log.e(MainActivity.class.getSimpleName(), <span class="string">"onCreate: main1:"</span>+mainSingleton1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 SecondActivity 获取到 SecondComponent 的实例 并注入 ，这里就可以看出来 是否是 范围内单例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DBManager dbManager1;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    SingletonObj mainSingleton;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    SingletonObj mainSingleton1;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        </span><br><span class="line">        ((MApplication)getApplication()).getAppComponent()</span><br><span class="line">                .plus(<span class="keyword">new</span> SecondModule())</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dbManager==dbManager1) &#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager-singleton-&gt;"</span>+dbManager.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager:"</span>+dbManager.hashCode());</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: dbmanager1:"</span>+dbManager1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mainSingleton==mainSingleton1)&#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: main-singleton&gt;"</span>+mainSingleton.hashCode());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: main:"</span>+mainSingleton.hashCode());</span><br><span class="line">            Log.e(SecondActivity.class.getSimpleName(), <span class="string">"onCreate: main1:"</span>+mainSingleton1.hashCode());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>log 可以看出 范围内单例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: onCreate: appdb--&gt;<span class="number">229426894</span></span><br><span class="line">   onCreate: dbmanager-sintleton-&gt;<span class="number">229426894</span></span><br><span class="line">   onCreate: main-singleton-&gt;<span class="number">142055919</span></span><br><span class="line">   </span><br><span class="line">E/SecondActivity: onCreate: dbmanager-singleton-&gt;<span class="number">229426894</span></span><br><span class="line">   onCreate: main-singleton&gt;<span class="number">241744847</span></span><br></pre></td></tr></table></figure>
<p>总结 ：我们可以通过 <code>@Scope</code> 随意自定义我们自己的作用域，当然不是说我们定义了 ActivityScoped 他就能保证 Activity内单例了，要配合 Component 范围并用对位置。</p>
<hr>

<p>这些Demo 的代码 我放在了 <a href="https://github.com/skymxc/Example" target="_blank" rel="noopener">Github</a> </p>
<blockquote>
<p>基础部分就先介绍这些吧，接下来我会继续 Dagger2-Android 的分享。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://google.github.io/dagger/" target="_blank" rel="noopener">https://google.github.io/dagger/</a></li>
<li><a href="https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-introduction-be6580cb3edb" target="_blank" rel="noopener">https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-introduction-be6580cb3edb</a></li>
<li><a href="https://proandroiddev.com/how-to-dagger-2-with-android-part-1-18b5b941453f" target="_blank" rel="noopener">https://proandroiddev.com/how-to-dagger-2-with-android-part-1-18b5b941453f</a></li>
<li><a href="https://blog.csdn.net/briblue/article/details/75578459" target="_blank" rel="noopener">https://blog.csdn.net/briblue/article/details/75578459</a></li>
<li><a href="https://juejin.im/entry/593cee56ac502e006b3dc9c2" target="_blank" rel="noopener">https://juejin.im/entry/593cee56ac502e006b3dc9c2</a></li>
<li><a href="https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-dagger-2-part-i-f2de5564ab25" target="_blank" rel="noopener">https://medium.com/@harivigneshjayapalan/dagger-2-for-android-beginners-dagger-2-part-i-f2de5564ab25</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java线程基础操作]]></title>
      <url>http://blog.skymxc.com/2018/06/24/thread-basic/</url>
      <content type="html"><![CDATA[<p><img src="http://devpicture.oss-cn-beijing.aliyuncs.com/18-6-24/9377001.jpg" alt="脑图"></p>
<h1 id="进程和线程的概念"><a href="#进程和线程的概念" class="headerlink" title="进程和线程的概念"></a>进程和线程的概念</h1><blockquote>
<p>进程 比较好理解,打开Windows 的任务管理器进程页里的一个个 <code>exe</code> 就可以理解为一个进程。</p>
<p>线程可以理解是在进程中独立运行的子任务 ，具体见百度百科 <a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B</a></p>
</blockquote>
<h1 id="使用线程"><a href="#使用线程" class="headerlink" title="使用线程"></a>使用线程</h1><p>创建一个线程主要有两种方式</p>
<ul>
<li>继承 Thread 类</li>
<li>实现 Runnable 接口</li>
</ul>
<blockquote>
<p>Note: Thread 类其实是实现了 Runnable 接口的。使用继承 Thread 的方式创建线程时，最大的局限就是不支持多继承，因为 Java 是单根继承，为了支持多继承，完全可以实现 Runnable 接口的方法。两种方式在工作时的性质是一样的，没有本质的区别。</p>
</blockquote>
<h2 id="继承-Thread-的方式"><a href="#继承-Thread-的方式" class="headerlink" title="继承 Thread 的方式"></a>继承 Thread 的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadWithThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadWithThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        setName(<span class="keyword">this</span>.getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--&gt;"</span>+<span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现-Runnable-的方式"><a href="#实现-Runnable-的方式" class="headerlink" title="实现 Runnable 的方式"></a>实现 Runnable 的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadWithRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---&gt;"</span>+<span class="keyword">this</span>.getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThreadWithThread threadWithThread = <span class="keyword">new</span> MyThreadWithThread();</span><br><span class="line">        MyThreadWithRunnable threadWithRunnable = <span class="keyword">new</span> MyThreadWithRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(threadWithRunnable);</span><br><span class="line">        System.out.println(<span class="string">"---begin"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        threadWithThread.start();</span><br><span class="line">        System.out.println(<span class="string">"---stop"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note: 如果多次调用 start() 方法 会出现异常 <code>Exception in thread &quot;main&quot; java.lang.IllegalThreadStateException</code><br>Console </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---begin</span><br><span class="line">---stop</span><br><span class="line">--&gt;MyThreadWithThread</span><br><span class="line">---&gt;MyThreadWithRunnable</span><br></pre></td></tr></table></figure>
<p><img src="http://devpicture.oss-cn-beijing.aliyuncs.com/18-6-24/13886619.jpg" alt="运行结果"><br>通过结果可以看到 代码的结果和代码的顺序是不一样的。</p>
<p>使用多线程时，代码的运行结果与代码执行顺序或者调用顺序是无关的。</p>
<p>线程是一个子任务，CPU 以不确定的方式，或者说以随机的时间来调用线程中的 run 方法。</p>
<h2 id="数据共享和非线程安全"><a href="#数据共享和非线程安全" class="headerlink" title="数据共享和非线程安全"></a>数据共享和非线程安全</h2><p>线程共享数据的情况就是多个线程访问同一个变量。<br>多个线程在访问同一个变量的时候会出现非线程安全问题。</p>
<p>非线程安全主要是指多个线程对同一个对象中的同一个实例变量进行操作时会出现值被更改、值不同步的情况，进而影响程序的执行流程。</p>
<p>可以通过给代码上锁的方式解决这个问题。在方法上加上 synchronized 关键字。</p>
<p>当一个线程调用一个方法前会先判断这个方法有没有上锁，如果上锁了说明有其他线程正在调用此方法。必须等其他线程对run()方法调用结束后才能执行run()。在等待的同时线程会不断尝试去拿这个锁，而且是多个线程同时去拿，谁拿到谁 执行。这样就实现了排队调用run()方法。</p>
<p>synchronized 可以在任意对象及方法上枷锁，而加锁的这段代码成为“互斥区”或者“临界区”。</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li>Thread.currentThread() 当前代码运行所在的线程</li>
<li>getName() 当前线程的名字</li>
<li>isAlive() 测试当前线程是否处于活动状态。什么是活动状态呢？活动状态就是线程已经启动且尚未终止。线程处于正在运行或准备开始运行的状态，就是认为线程是“存活”的。</li>
<li>sleep() 作用是在指定的毫秒数内让当前“正在执行的线程”休眠（暂停执行）。这个正在执行的线程就是 “Thread.currentThread()” 返回的线程</li>
<li>getId() 作用是放回线程唯一id</li>
</ul>
<h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>停止线程意味着在线程处理完任务之前停掉正在做的操作，也就是放弃当前的操作。<br>停止一个线程可以使用 Thread.stop()方法，但最好不用它，虽然它可以停止一个正在运行的线程，但是这个方法是不安全的，而且已经被废弃。</p>
<p>大多数停止一个线程的操作使用 Thread.interrupt()方法，尽管方法的名称是“停止，终止”的意思，当这个方法不会终止一个正在运行的线程，还需要加入一个判断才能完成线程的停止。</p>
<p>Java中有三种方法可以停止正在运行的线程</p>
<ol>
<li>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</li>
<li>使用 stop 方法强行终止线程，但是不推荐使用，因为 stop 和 suspend 及 resume 一样，都是作废过期的方法，使用它们产生不可预料的后果</li>
<li>使用 interrupt 停止线程</li>
</ol>
<h3 id="判断线程是否停止"><a href="#判断线程是否停止" class="headerlink" title="判断线程是否停止"></a>判断线程是否停止</h3><ol>
<li>Thread.interrupted()（静态方法） 作用是测试当前线程是否已经中断 执行后将停止状态清除为false</li>
<li>isInterrupted() 作用是测试线程是否已经中断。执行后不会清除状态标志。</li>
</ol>
<blockquote>
<p>先看一下 <code>Thread.interrupted()</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether the current thread has been interrupted.  The</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;interrupted status&lt;/i&gt; of the thread is cleared by this method.  In</span></span><br><span class="line"><span class="comment"> * other words, if this method were to be called twice in succession, the</span></span><br><span class="line"><span class="comment"> * second call would return false (unless the current thread were</span></span><br><span class="line"><span class="comment"> * interrupted again, after the first call had cleared its interrupted</span></span><br><span class="line"><span class="comment"> * status and before the second call had examined it).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A thread interruption ignored because a thread was not alive</span></span><br><span class="line"><span class="comment"> * at the time of the interrupt will be reflected by this method</span></span><br><span class="line"><span class="comment"> * returning false.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if the current thread has been interrupted;</span></span><br><span class="line"><span class="comment"> *          &lt;code&gt;false&lt;/code&gt; otherwise.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isInterrupted()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@revised</span> 6.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试当前线程是否已经中断。 线程的 中断状态 通过此方法清除。换句话说就是，这个方法入如果连续两次调用，第二次将会返回 false（在第一次调用已清除了其中断状态后，且第二次调用检验完中断状态前，当前线程再次中断的情况除外）</p>
<p>线程中断被忽略是因为没有在存活的时候中断，这个方法将会返回 false</p>
<p>如果当前线程已经被中断了 将会返回 true</p>
<blockquote>
<p>再看一下 <code>isInterrupted</code> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests whether this thread has been interrupted.  The &lt;i&gt;interrupted</span></span><br><span class="line"><span class="comment"> * status&lt;/i&gt; of the thread is unaffected by this method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;A thread interruption ignored because a thread was not alive</span></span><br><span class="line"><span class="comment"> * at the time of the interrupt will be reflected by this method</span></span><br><span class="line"><span class="comment"> * returning false.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if this thread has been interrupted;</span></span><br><span class="line"><span class="comment"> *          &lt;code&gt;false&lt;/code&gt; otherwise.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     #interrupted()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@revised</span> 6.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试该线程是否已经中断。线程的中断状态不受此方法影响。</p>
<p>可以看到两个方法的源码都是调用了 <code>isInterrupted()</code> 不同的是 <code>interrupted()</code> 是先调用 <code>currentThread()</code>获取到当前代码运行所在的线程。然后让当前线程调用<code>isInterrupted()</code>。而 <code>isInterrupted</code> 这是直接调用，所以判断的是这个实例线程的状态。</p>
<p>再看一下 <code>isInterrupted()</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests if some Thread has been interrupted.  The interrupted state</span></span><br><span class="line"><span class="comment"> * is reset or not based on the value of ClearInterrupted that is</span></span><br><span class="line"><span class="comment"> * passed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;</span><br></pre></td></tr></table></figure>
<p>测试某些线程是否被中断。中断状态根据传递的ClearInterrupted的值决定重置或不重置。</p>
<p><code>Thread.interrupted()</code> 传入了 false 所以会重置中断状态。</p>
<h3 id="异常法停止"><a href="#异常法停止" class="headerlink" title="异常法停止"></a>异常法停止</h3><p>这里的所谓异常法停止就是对你想中断的线程调用<code>interrupt()</code>打上中断标识。在你执行操作的线程中一定要在某个地方检测 <strong>中断状态</strong> 如果中断状态为 true 了就停止操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"---》begin"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500000</span>;i++)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;"</span>+i);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.isInterrupted())&#123;</span><br><span class="line">                    System.out.println(<span class="string">"检测到当前线程实例中断标志("</span>+<span class="keyword">this</span>.getName()+<span class="string">")--&gt;"</span>+<span class="keyword">this</span>.isInterrupted());</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span>  InterruptedException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"for循环后执行-当前线程实例（"</span>+<span class="keyword">this</span>.getName()+<span class="string">"）中断标识-&gt;"</span>+<span class="keyword">this</span>.isInterrupted()+<span class="string">";当前代码运行线程("</span>+Thread.currentThread().getName()+<span class="string">")中断标志--》"</span>+Thread.interrupted());</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"----end---&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"异常法中断--》"</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread myThread  =<span class="keyword">new</span> MyThread(<span class="string">"myThread"</span>);</span><br><span class="line">        myThread.start();</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">"中断myThread"</span>);</span><br><span class="line">        myThread.interrupt();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" ====end---&gt;"</span>+myThread.isInterrupted());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Console</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">myThread--&gt;7665</span><br><span class="line">myThread--&gt;7666</span><br><span class="line">myThread--&gt;7667</span><br><span class="line">myThread--&gt;7668</span><br><span class="line">myThread--&gt;7669</span><br><span class="line">myThread--&gt;7670</span><br><span class="line">myThread--&gt;7671</span><br><span class="line">myThread--&gt;7672</span><br><span class="line">myThread--&gt;7673</span><br><span class="line">myThread--&gt;7674</span><br><span class="line">myThread--&gt;7675</span><br><span class="line">myThread--&gt;7676</span><br><span class="line">中断myThread</span><br><span class="line">myThread--&gt;7677</span><br><span class="line">检测到当前线程实例中断标志(myThread)--&gt;true</span><br><span class="line">异常法中断--》null</span><br><span class="line">java.lang.InterruptedException</span><br><span class="line">	at com.skymxc.example.multithreading.stop.MyThread.run(MyThread.java:17)</span><br><span class="line">main ====end---&gt;false</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<p>当然，这里是用的抛出异常的方法强行中断。也可使用 break 然后继续一个收尾工作。</p>
<p>关于 stop（）方法 参考这篇文章 <a href="https://blog.csdn.net/jiangwei0910410003/article/details/19900007" target="_blank" rel="noopener">https://blog.csdn.net/jiangwei0910410003/article/details/19900007</a> </p>
<h2 id="暂停线程"><a href="#暂停线程" class="headerlink" title="暂停线程"></a>暂停线程</h2><p>暂停线程意味着还可以恢复线程的执行，在 Java 中使用 <code>suspend()</code> 暂停线程的执行，使用 <code>ressume()</code> 恢复线程的执行。</p>
<blockquote>
<p>用一个例子看看这两个方法怎么用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"countThread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setI</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss.SSS"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line"><span class="comment">//            System.out.println(dateFormat.format(new Date())+"---&gt;"+i++);</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isInterrupted())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dateFormat.format(<span class="keyword">new</span> Date())+<span class="string">"---停止--》"</span>+<span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuspendTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss.SSS"</span>);</span><br><span class="line">        CountThread countThread = <span class="keyword">new</span> CountThread();</span><br><span class="line">        countThread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//阶段 A 1000ms 后</span></span><br><span class="line">        countThread.suspend();</span><br><span class="line">        System.out.println( dateFormat.format(<span class="keyword">new</span> Date())+<span class="string">"--A-&gt;"</span>+countThread.getI()+<span class="string">";isInterrupted--&gt;"</span>+countThread.isInterrupted());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//阶段B 1000ms 后</span></span><br><span class="line">        System.out.println( dateFormat.format(<span class="keyword">new</span> Date())+<span class="string">"--B-&gt;"</span>+countThread.getI()+<span class="string">";isInterrupted--&gt;"</span>+countThread.isInterrupted());</span><br><span class="line"></span><br><span class="line">        countThread.resume();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//阶段C</span></span><br><span class="line">        countThread.suspend();</span><br><span class="line">        System.out.println( dateFormat.format(<span class="keyword">new</span> Date())+<span class="string">"--C-&gt;"</span>+countThread.getI()+<span class="string">";isInterrupted--&gt;"</span>+countThread.isInterrupted());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        countThread.resume();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        countThread.interrupt();</span><br><span class="line">        <span class="comment">//阶段D</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println( dateFormat.format(<span class="keyword">new</span> Date())+<span class="string">"--D-&gt;"</span>+countThread.getI()+<span class="string">";isInterrupted--&gt;"</span>+countThread.isInterrupted());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Console</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">17:48:11.934--A-&gt;516318612;isInterrupted--&gt;false</span><br><span class="line">17:48:12.935--B-&gt;516318612;isInterrupted--&gt;false</span><br><span class="line">17:48:13.935--C-&gt;1043644966;isInterrupted--&gt;false</span><br><span class="line">17:48:15.935---停止--》countThread</span><br><span class="line">17:48:16.935--D-&gt;1565065219;isInterrupted--&gt;false</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>
<p>确实达到了暂停和恢复的目的。</p>
<h3 id="suspend-和-resmue-的缺点—-独占"><a href="#suspend-和-resmue-的缺点—-独占" class="headerlink" title="suspend()和 resmue() 的缺点—-独占"></a>suspend()和 resmue() 的缺点—-独占</h3><p>如果你在上面的 CountThread 中打印 i 你就会发现一个问题 在main 线程的 打印都没出来，而且程序已知在运行，没有结束，也没有log。</p>
<p>先看一下 println() 的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Prints a String and then terminate the line.  This method behaves as</span></span><br><span class="line"><span class="comment">  * though it invokes &lt;code&gt;&#123;<span class="doctag">@link</span> #print(String)&#125;&lt;/code&gt; and then</span></span><br><span class="line"><span class="comment">  * &lt;code&gt;&#123;<span class="doctag">@link</span> #println()&#125;&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> x  The &lt;code&gt;String&lt;/code&gt; to be printed.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">         print(x);</span><br><span class="line">         newLine();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到方法里 使用 synchronized 锁住了当前对象。</p>
<p>在例子中我们让 countThread 暂停，虽然它确实暂停了，但是没有释放锁，且一直在占着，这样的结果就是我们在main 线程的 打印一直在等锁，且一直等不到。</p>
<p>虽然 suspend()方法 已经被废弃，但是了解它为什么被废弃还是很有意义的。</p>
<h3 id="suspend-和-resmue-的缺点—-不同步"><a href="#suspend-和-resmue-的缺点—-不同步" class="headerlink" title="suspend()和 resmue() 的缺点—-不同步"></a>suspend()和 resmue() 的缺点—-不同步</h3><p>因为它的独占 所以无法使用 synchronized ，也就无法保证数据同步</p>
<h2 id="priority-线程的优先级"><a href="#priority-线程的优先级" class="headerlink" title="priority  线程的优先级"></a>priority  线程的优先级</h2><p>优先级较高的线程得到的CPU资源较多，也就是CPU优先执行级别较高的线程对象中的任务。</p>
<p>使用 <code>setPriority()</code> 方法设置线程优先级</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setPriority</span><span class="params">(<span class="keyword">int</span> newPriority)</span> </span>&#123;</span><br><span class="line">       ThreadGroup g;</span><br><span class="line">       checkAccess();</span><br><span class="line">       <span class="keyword">if</span> (newPriority &gt; MAX_PRIORITY || newPriority &lt; MIN_PRIORITY) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>((g = getThreadGroup()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (newPriority &gt; g.getMaxPriority()) &#123;</span><br><span class="line">               newPriority = g.getMaxPriority();</span><br><span class="line">           &#125;</span><br><span class="line">           setPriority0(priority = newPriority);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>优先级 分为 1 ~ 10 这10个等级。如果不在范围内就会抛出异常。</p>
<p>JDK预设了三个优先级的值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The minimum priority that a thread can have.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The default priority that is assigned to a thread.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The maximum priority that a thread can have.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>线程优先级的继承特性<br>在 Java 中，线程的优先级具有继承性，例如A线程启动B线程，则B线程的优先级与A是一样的。</li>
<li>优先级具有规则性<br>  CPU会尽量将执行资源让给优先级较高的线程。</li>
<li>优先级具有随机性<br>  虽然CPU会尽量让优先级高的线程得到更多的资源，优先级高的线程不一定每一次都先执行完 run() 方法中的任务，不要把优先级和执行顺序及结果挂钩。</li>
</ul>
<blockquote>
<p>end</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Proguard 常用规则]]></title>
      <url>http://blog.skymxc.com/2018/06/03/Proguard/</url>
      <content type="html"><![CDATA[<p>为了决定哪些代码要被保留哪些代码要出丢弃和混淆，必须指定入口点。这些入口点通常是 main方法，activity，service等。</p>
<ul>
<li><p>在压缩阶段，Proguard从这些入口点开始递归确定哪些类或类成员要被使用，其余的都会被丢弃。</p>
</li>
<li><p>在优化阶段，ProGuard进一步优化代码。在其他优化中，可以将不是入口点的类和方法设为私有，静态或最终，可以删除未使用的参数，并且可以内联一些方法。</p>
</li>
<li><p>在混淆阶段，ProGuard会重新命名不属于入口点的类和类成员。在整个过程中，保持入口点确保它们仍然可以通过其原始名称访问。</p>
</li>
</ul>
<h2 id="检查-Proguard结果"><a href="#检查-Proguard结果" class="headerlink" title="检查 Proguard结果"></a>检查 Proguard结果</h2><p>为了避免引入 bug 我们有必要对 结果进行检查。</p>
<p>在Android中，开启了混淆构建会在 <module-name>/build/outputs/mapping/ 目录下会输出以下文件：</module-name></p>
<ul>
<li><p>dump.txt 描述APK文件中所有类的内部结构</p>
</li>
<li><p>mapping.txt 提供混淆前后类、方法、类成员等的对照表</p>
</li>
<li><p>seeds.txt 列出没有被混淆的类和成员</p>
</li>
<li><p>usage.txt 列出被移除的代码</p>
</li>
</ul>
<p>我们可以根据 seeds.txt 文件检查未被混淆的类和成员中是否已包含所有期望保留的，再根据 usage.txt 文件查看是否有被误移除的代码。</p>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote>
<p>ProGuard为配置的许多不同方面提供了过滤器选项：文件名称，目录，类别，软件包，属性，优化等。</p>
</blockquote>
<p>过滤器是可以包含通配符的逗号分隔名称列表。只有与列表中的项目匹配的名称才会通过过滤器。受支持的通配符取决于使用过滤器的名称类型，但以下通配符是通用的：</p>
<ul>
<li><p>?  匹配名称中的任何单个字符。</p>
</li>
<li><p>*  匹配不包含包分隔符或目录分隔符的名称的任何部分</p>
</li>
<li><p>** 匹配名称的任何部分，可能包含任意数量的包分隔符或目录分隔符。</p>
</li>
</ul>
<p>此外，名称前可以加上否定感叹号’！’排除名称与进一步尝试匹配后续名称。</p>
<p>因此，如果名称与过滤器中的某个项目相匹配，则会立即接受或拒绝该项目，具体取决于项目是否具有否定符。</p>
<p>如果名称与项目不匹配，则会针对下一个项目进行测试，依此类推。</p>
<p>它如果与任何项目不匹配，则根据最后一项是否具有否定符而被接受或拒绝。</p>
<p>如，”!foobar，*.bar” 匹配除了foobar之外的所有以bar结尾的名称。</p>
<p>下面以过滤文件具体举例。</p>
<h3 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h3><blockquote>
<p>像通用过滤器一样，文件过滤器是逗号分隔的文件名列表，可以包含通配符。只有具有匹配文件名的文件被读取（在输入的情况下），或者被写入（在输出的情况下）。支持以下通配符：</p>
</blockquote>
<ul>
<li><p>? 匹配文件名字中的任何单个字符</p>
</li>
<li><p>* 匹配不包含目录分隔符的文件名的任何部分。</p>
</li>
<li><p>** 匹配文件名的任何部分，可以包含任意数目的目录分隔符。</p>
</li>
</ul>
<p>例如 “java/**.class ,javax/**.class” 可以匹配 java和javax目录下所有的 class 文件。</p>
<p>此外，文件名前面可能带有感叹号’！’将文件名排除在与后续文件名匹配上。</p>
<p>例如  “!**.gif,images/**“ 匹配images目录下所有除了 gif 的文件</p>
<p>关于更详细的用法 可以查看官方文档 <a href="https://www.guardsquare.com/en/proguard/manual/examples#filtering" target="_blank" rel="noopener">https://www.guardsquare.com/en/proguard/manual/examples#filtering</a></p>
<h2 id="keep"><a href="#keep" class="headerlink" title="keep"></a>keep</h2><h3 id="keep-modifier-…-class-specification"><a href="#keep-modifier-…-class-specification" class="headerlink" title="-keep [,modifier,…] class specification"></a>-keep [,modifier,…] class specification</h3><blockquote>
<p>指定类和类成员（字段，方法）作为入口点被保留。</p>
</blockquote>
<p>例如，为了保留一个程序，你要指定Main方法和类。为了保留一个库，你应该指定所有被公开访问的元素。</p>
<ul>
<li>保留 main 类和 main 方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keep public class com.example.MyMain &#123; </span><br><span class="line"></span><br><span class="line">      public static void main(java.lang.String[]); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 保留所有被公开访问的元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```proguard</span><br><span class="line"></span><br><span class="line">-keep public class * &#123; </span><br><span class="line"></span><br><span class="line">      public protected *; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note:如果你只保留了类，没有保留类成员，那么你的类成员将不会被保留</strong></p>
<p>例如 有一个实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> A = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> B = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>规则配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 保留 Product类</span><br><span class="line"></span><br><span class="line">-keep class cn.sintoon.camera.Product</span><br></pre></td></tr></table></figure>
<p> usage.txt文件中有以下内容 ，可以看到 类中的成员全部被移除了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cn.sintoon.camera.Product:</span><br><span class="line"></span><br><span class="line">    public static final int A</span><br><span class="line"></span><br><span class="line">    public static final int B</span><br><span class="line"></span><br><span class="line">    private java.lang.String name</span><br><span class="line"></span><br><span class="line">    private java.lang.String url</span><br><span class="line"></span><br><span class="line">    16:16:public java.lang.String getName()</span><br><span class="line"></span><br><span class="line">    20:21:public void setName(java.lang.String)</span><br><span class="line"></span><br><span class="line">    24:24:public java.lang.String getUrl()</span><br><span class="line"></span><br><span class="line">    28:29:public void setUrl(java.lang.String)</span><br></pre></td></tr></table></figure>
<h3 id="keepclassmembers-modifier-…-class-specification"><a href="#keepclassmembers-modifier-…-class-specification" class="headerlink" title="-keepclassmembers [,modifier,…] class specification"></a>-keepclassmembers [,modifier,…] class specification</h3><blockquote>
<p>指定要保留的类成员，<strong>前提是它们的类也被保留了</strong>。</p>
</blockquote>
<p>例如，你想保留实现了 Serializable 接口的类中的所有 serializable 方法和字段。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepclassmembers class * implements java.io.Serializable &#123; </span><br><span class="line"></span><br><span class="line">     private static final java.io.ObjectStreamField[] serialPersistentFields; </span><br><span class="line"></span><br><span class="line">     private void writeObject(java.io.ObjectOutputStream); </span><br><span class="line"></span><br><span class="line">     private void readObject(java.io.ObjectInputStream); </span><br><span class="line"></span><br><span class="line">     java.lang.Object writeReplace(); </span><br><span class="line"></span><br><span class="line">     java.lang.Object readResolve(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note: 注意字段类型带上包名; String 类型为 java.lang.String;另外，如果只保留了类成员没有保留类跟没有保留一样</strong></p>
<p>还是拿上面那个例子，改一下规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepclassmembers class * implements java.io.Serializable&#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">     public String getName();</span><br><span class="line"></span><br><span class="line">     public static final int A;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看 usage.txt 类都被移除了，保留字段没毛线用。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cn.sintoon.camera.Product</span><br></pre></td></tr></table></figure>
<h3 id="keepclasseswithmembers-modifier-…-class-specification"><a href="#keepclasseswithmembers-modifier-…-class-specification" class="headerlink" title="-keepclasseswithmembers [,modifier,…] class specification"></a>-keepclasseswithmembers [,modifier,…] class specification</h3><blockquote>
<p>指定要保留的类和类成员，条件是所有指定的类成员都在。</p>
</blockquote>
<p>例如，你要保留程序中所有的主程序，不用显示的列出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepclasseswithmembers public class * &#123; </span><br><span class="line"></span><br><span class="line">    public static void main(java.lang.String[]); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是用上面那个例子，保留住类和所有的类成员</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepclasseswithmembers class cn.sintoon.camera.Product&#123;</span><br><span class="line"></span><br><span class="line"> public static final int A;</span><br><span class="line"></span><br><span class="line">    public static final int B;</span><br><span class="line"></span><br><span class="line">    private java.lang.String name;</span><br><span class="line"></span><br><span class="line">    private java.lang.String url;</span><br><span class="line"></span><br><span class="line">    public java.lang.String getName();</span><br><span class="line"></span><br><span class="line">    public void setName(java.lang.String);</span><br><span class="line"></span><br><span class="line">    public java.lang.String getUrl();</span><br><span class="line"></span><br><span class="line">    public void setUrl(java.lang.String);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看 seeds.text 中就会出现这个类和类成员</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cn.sintoon.camera.Product</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: int A</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: int B</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: java.lang.String name</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: java.lang.String url</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: java.lang.String getName()</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: void setName(java.lang.String)</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: java.lang.String getUrl()</span><br><span class="line"></span><br><span class="line">cn.sintoon.camera.Product: void setUrl(java.lang.String)</span><br></pre></td></tr></table></figure>
<p><strong>Note:一定要注意指定的类成员必须存在，如果不存在的话，这个规则相当于没有配，一点作用没有</strong></p>
<h3 id="if-class-specification"><a href="#if-class-specification" class="headerlink" title="-if class specification"></a>-if class specification</h3><blockquote>
<p>指定必须存在的类和类成员来激活后续 keep 规则（-keep，-keepclassmembers，…）。条件和随后的 keep 规则可以共享通配符和对通配符的引用。</p>
</blockquote>
<p> 例如，你可以保留类，条件是你的项目中存在具有相关名称的类，就像使用 Dagger 和 Butterknife 等。</p>
<p> 如果你的Android应用程序包含用于依赖注入的Dagger，则需要几行配置，因为Dagger严重依赖反射在运行时将代码绑定在一起。需要保留注释的类成员，生成的类和实用程序类</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepclassmembers,allowobfuscation class * &#123; </span><br><span class="line"></span><br><span class="line">    @dagger.** *; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-keep class **$$ModuleAdapter </span><br><span class="line"></span><br><span class="line">-keep class **$$InjectAdapter </span><br><span class="line"></span><br><span class="line">-keep class **$$StaticInjection</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-if   class **$$ModuleAdapter</span><br><span class="line"></span><br><span class="line">-keep class &lt;1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-if   class **$$InjectAdapter</span><br><span class="line"></span><br><span class="line">-keep class &lt;1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-if   class **$$StaticInjection</span><br><span class="line"></span><br><span class="line">-keep class &lt;1&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-keepnames class dagger.Lazy</span><br></pre></td></tr></table></figure>
<p>这个 规则 我在 studio 中测试 没有被识别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.io.IOException: proguard.ParseException: Unknown option &apos;-if&apos;</span><br></pre></td></tr></table></figure>
<h3 id="keepnames-class-specification"><a href="#keepnames-class-specification" class="headerlink" title="-keepnames class specification"></a>-keepnames class specification</h3><p> -keep,allowshrinking class specification的简写</p>
<blockquote>
<p>指定要保留名称的类成员和类成员（如果它们在压缩阶段未被删除）。</p>
</blockquote>
<p>例如，你可能希望保留实现 Serializable 接口的类的所有类名，以便处理后的代码与任何原始序列化的类保持兼容。</p>
<p>完全不用的类仍然可以删除。只有在混淆时才适用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepnames class * implements java.io.Serializable</span><br></pre></td></tr></table></figure>
<p><strong>Note: 前提是在压缩阶段没有被删除掉，这里相当于使用了修饰符 allowshrinking</strong></p>
<h3 id="keepclassmembernames-class-specification"><a href="#keepclassmembernames-class-specification" class="headerlink" title="-keepclassmembernames class specification"></a>-keepclassmembernames class specification</h3><p>-keepclassmembers,allowshrinking class specification 的简写</p>
<blockquote>
<p>指定要保留名称的类成员（如果它们在压缩阶段未被删除）。</p>
</blockquote>
<p>例如，在处理由JDK 1.2或更早版本编译的库时，您可能希望保留合成类$方法的名称。</p>
<p>所以当处理使用处理过的库的应用程序时，混淆器可以再次检测到它（尽管ProGuard本身不需要这个）。</p>
<p>只有在混淆时才适用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepclassmembernames class * &#123; </span><br><span class="line"></span><br><span class="line">    java.lang.Class class$(java.lang.String); </span><br><span class="line"></span><br><span class="line">    java.lang.Class class$(java.lang.String, boolean); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note: 前提是在压缩阶段没有被删除掉，这里相当于使用了修饰符 allowshrinking</strong></p>
<h3 id="keepclasseswithmembernames-class-specification"><a href="#keepclasseswithmembernames-class-specification" class="headerlink" title="-keepclasseswithmembernames class specification"></a>-keepclasseswithmembernames class specification</h3><p>-keepclasseswithmembers,allowshrinking class specification 的简写</p>
<blockquote>
<p>指定要保留名称的类和类成员，条件是所有指定的类成员都存在于收缩阶段之后。</p>
</blockquote>
<p>例如，可能希望保留所有本机方法名称和类别的名称，以便处理的代码仍可以与本机库代码链接。完全没有使用的本地方法仍然可以被删除。</p>
<p>如果使用了一个类文件，但它的本地方法都不是，它的名字仍然会被混淆。只有在混淆时才适用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-keepclasseswithmembernames,includedescriptorclasses class * &#123; </span><br><span class="line"></span><br><span class="line">    native &lt;methods&gt;; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note: 前提是在压缩阶段没有被删除掉，这里相当于使用了修饰符 allowshrinking</strong></p>
<h3 id="printseeds-filename"><a href="#printseeds-filename" class="headerlink" title="-printseeds [filename]"></a>-printseeds [filename]</h3><blockquote>
<p>指定详尽列出由各种-keep选项匹配的类和类成员。列表打印到标准输出或给定文件。该列表可用于验证是否真的找到了预期的类成员，尤其是在使用通配符的情况下。</p>
</blockquote>
<p>例如，您可能想要列出您保存的所有应用程序或所有小程序。</p>
<p>参考上面说的 seeds.txt</p>
<h3 id="whyareyoukeeping-class-specification"><a href="#whyareyoukeeping-class-specification" class="headerlink" title="-whyareyoukeeping class specification"></a>-whyareyoukeeping class specification</h3><blockquote>
<p>指定打印详细信息，说明为什么给定的类和类成员正在压缩步骤中。</p>
</blockquote>
<p>如果想知道为什么某些给定元素出现在输出中，这会很有用。</p>
<p>一般来说，可能有很多不同的原因。</p>
<p>此选项为每个指定的类和类成员打印最短的方法链到指定的种子或入口点。</p>
<p>在当前的实施中，打印出的最短链有时可能包含循环扣除 - 这些并不反映实际收缩过程。</p>
<p>如果指定了 -verbose 选项，则跟踪包括完整的字段和方法签名。只适用于压缩。</p>
<h2 id="压缩规则"><a href="#压缩规则" class="headerlink" title="压缩规则"></a>压缩规则</h2><h3 id="dontshrink"><a href="#dontshrink" class="headerlink" title="-dontshrink"></a>-dontshrink</h3><blockquote>
<p>指定不被压缩的类文件。</p>
</blockquote>
<p>默认情况下压缩是开启的，除了用各种用 <code>keep</code> 选项直接或间接用到的类或类成员，其他的都会被移除。</p>
<p>压缩步骤通常在优化之后，因为某些优化可能会打开已经删除的类或类成员。 </p>
<h3 id="printusage-filename"><a href="#printusage-filename" class="headerlink" title="-printusage [filename]"></a>-printusage [filename]</h3><blockquote>
<p>指定列出移除的死代码。该列表打印到标准输出或给定文件。</p>
</blockquote>
<p>参考上面说的 usage.txt</p>
<p>例如，您可以列出应用程序的未使用代码。只适用于压缩。</p>
<h2 id="优化规则"><a href="#优化规则" class="headerlink" title="优化规则"></a>优化规则</h2><h3 id="dontoptimize"><a href="#dontoptimize" class="headerlink" title="-dontoptimize"></a>-dontoptimize</h3><blockquote>
<p>指定不优化输入类文件。默认情况下，优化已启用;所有方法都在字节码级别进行了优化</p>
</blockquote>
<h3 id="optimizationpasses-n"><a href="#optimizationpasses-n" class="headerlink" title="-optimizationpasses n"></a>-optimizationpasses n</h3><blockquote>
<p>指定要执行的优化传递的数量。</p>
</blockquote>
<p>默认情况下，执行一次传递。多次通行可能会导致进一步的改进。如果在优化后没有找到改进，则优化结束。只适用于优化。</p>
<h2 id="混淆规则"><a href="#混淆规则" class="headerlink" title="混淆规则"></a>混淆规则</h2><h3 id="dontobfuscate"><a href="#dontobfuscate" class="headerlink" title="-dontobfuscate"></a>-dontobfuscate</h3><blockquote>
<p>指定不混淆输入的类文件。</p>
</blockquote>
<p>默认情况下，混淆是开启的，类和类成员会被改成新的短随机名称，除了各种-keep选项列出的名称外。</p>
<p>内部属性对于调试很有用，例如源文件名，变量名和行号被删除。</p>
<h3 id="printmapping-filename"><a href="#printmapping-filename" class="headerlink" title="-printmapping [filename]"></a>-printmapping [filename]</h3><blockquote>
<p>指定将旧名称映射到已重命名的类和类成员的新名称的映射。映射打印到标准输出或给定文件。</p>
</blockquote>
<p>例如，它是后续增量混淆所必需的，或者如果想再次理解混淆的堆栈跟踪。只有在混淆时才适用。</p>
<p>参考 上面说的 mapping.txt。</p>
<h3 id="useuniqueclassmembernames"><a href="#useuniqueclassmembernames" class="headerlink" title="-useuniqueclassmembernames"></a>-useuniqueclassmembernames</h3><blockquote>
<p>指定将相同的混淆名称分配给具有相同名称的类成员，并将不同混淆名称分配给名称不同的类成员（对于每个给定的类成员签名）。</p>
</blockquote>
<p>没有这个选项，更多的类成员可以被映射到相同的短名称，比如’a’，’b’等等。</p>
<p>这个选项因此稍微增加了结果代码的大小，但是它确保了保存的混淆名称映射总是可以在随后的增量混淆步骤中受到尊重。 </p>
<p>例如，考虑两个不同的接口，它们包含具有相同名称和签名的方法。如果没有此选项，这些方法可能会在第一个混淆步骤中获取不同的混淆名称。</p>
<p>如果添加了包含实现两个接口的类的补丁程序，则ProGuard必须在增量混淆步骤中为这两种方法强制执行相同的方法名称。</p>
<p>原始模糊代码已更改，以保持结果代码的一致性。在最初的混淆步骤中使用此选项，这种重命名将永远不是必需的。</p>
<p>该选项仅适用于混淆。</p>
<p>实际上，如果计划执行增量混淆，则可能希望完全避免压缩和优化，因为这些步骤可能会删除或修改部分代码，这些代码对于以后的添加至关重要。</p>
<h3 id="dontusemixedcaseclassnames"><a href="#dontusemixedcaseclassnames" class="headerlink" title="-dontusemixedcaseclassnames"></a>-dontusemixedcaseclassnames</h3><blockquote>
<p>指定在混淆时不生成混合大小写的类名。</p>
</blockquote>
<p>默认情况下，混淆的类名可以包含大写字符和小写字符的混合。</p>
<p>创建的这个完全可接受和可用的jars 只有在不区分大小写的文件系统（比如Windows）的平台上解压缩jar时，解压缩工具可能会让类似命名的类文件相互覆盖。</p>
<p>解压缩后自毁的代码！真正想在Windows上解压他们的jar的开发人员可以使用这个选项来关闭这种行为。</p>
<p>混淆的jars会因此变得稍大。</p>
<p>只有在混淆时才适用。</p>
<h3 id="keeppackagenames-package-filter"><a href="#keeppackagenames-package-filter" class="headerlink" title="-keeppackagenames [package_filter]"></a>-keeppackagenames [package_filter]</h3><blockquote>
<p>指定不混淆给定的软件包名称。</p>
</blockquote>
<p>可选过滤器是包名称的逗号分隔列表。包名可以包含？，<em>和*</em>通配符，并且它们可以在！否定器。只有在混淆时才适用。</p>
<h3 id="flattenpackagehierarchy-package-name"><a href="#flattenpackagehierarchy-package-name" class="headerlink" title="-flattenpackagehierarchy [package_name]"></a>-flattenpackagehierarchy [package_name]</h3><blockquote>
<p>指定将所有重命名的软件包重新打包，方法是将它们移动到单个给定的父软件包中。如果没有参数或空字符串（’’），程序包将移动到根程序包中。</p>
</blockquote>
<p>该选项是进一步混淆软件包名称的一个示例。它可以使处理后的代码更小，更难理解。</p>
<p>只有在混淆时才适用。</p>
<h3 id="repackageclasses-package-name"><a href="#repackageclasses-package-name" class="headerlink" title="-repackageclasses [package_name]"></a>-repackageclasses [package_name]</h3><blockquote>
<p>指定将所有重命名的类文件重新打包，方法是将它们移动到单个给定的包中。没有参数或者使用空字符串（’’），该软件包将被完全删除。</p>
</blockquote>
<p>该选项将覆盖 -flattenpackagehierarchy 选项。</p>
<p>这是进一步模糊软件包名称的另一个例子。</p>
<p>它可以使处理后的代码更小，更难理解。</p>
<p>其不推荐使用的名称是-defaultpackage。</p>
<p>只有在混淆时才适用。 </p>
<p><strong>警告：如果在别处移动它们，则在其包目录中查找资源文件的类将不再正常工作。如有疑问，请不要使用此选项，以免触及包装。</strong></p>
<h3 id="keepattributes-attribute-filter"><a href="#keepattributes-attribute-filter" class="headerlink" title="-keepattributes [attribute_filter]"></a>-keepattributes [attribute_filter]</h3><blockquote>
<p>指定要保留的任何可选属性。这些属性可以用一个或多个-keepattributes指令来指定。</p>
</blockquote>
<p>可选过滤器是Java虚拟机和ProGuard支持的属性名称的逗号分隔列表。</p>
<p>属性名称可以包含？，*和**通配符，并且可以在之前加上！否定器。</p>
<p>例如，在处理库时，您至少应保留Exceptions，InnerClasses和Signature属性。</p>
<p>您还应该保留SourceFile和LineNumberTable属性以生成有用的混淆堆栈跟踪。</p>
<p>最后，如果你的代码依赖于它们，你可能需要保留注释。</p>
<p>只有在混淆时才适用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 保留Annotation不混淆</span><br><span class="line"></span><br><span class="line">-keepattributes *Annotation*,InnerClasses</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 避免混淆泛型</span><br><span class="line"></span><br><span class="line">-keepattributes Signature</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 抛出异常时保留代码行号</span><br><span class="line"></span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br></pre></td></tr></table></figure>
<h3 id="keepparameternames"><a href="#keepparameternames" class="headerlink" title="-keepparameternames"></a>-keepparameternames</h3><blockquote>
<p>指定保留所保存方法的参数名称和类型。</p>
</blockquote>
<p>该选项实际上保留了调试属性LocalVariableTable和LocalVariableTypeTable的修剪版本。</p>
<p>处理库时它可能很有用。</p>
<p>一些IDE可以使用这些信息来帮助使用该库的开发人员，</p>
<p>例如工具提示或自动完成。</p>
<p>只有在混淆时才适用。</p>
<h3 id="renamesourcefileattribute-string"><a href="#renamesourcefileattribute-string" class="headerlink" title="-renamesourcefileattribute [string]"></a>-renamesourcefileattribute [string]</h3><blockquote>
<p>指定要放入类文件的SourceFile属性（和SourceDir属性）中的常量字符串。请注意，该属性必须首先出现，所以它也必须使用-keepattributes指令明确保留。</p>
</blockquote>
<p>例如，您可能希望让处理过的库和应用程序生成有用的混淆堆栈跟踪。</p>
<p>只有在混淆时才适用</p>
<h2 id="预校验-规则"><a href="#预校验-规则" class="headerlink" title="预校验 规则"></a>预校验 规则</h2><h3 id="dontpreverify"><a href="#dontpreverify" class="headerlink" title="-dontpreverify"></a>-dontpreverify</h3><blockquote>
<p>指定不预先验证已处理的类文件。</p>
</blockquote>
<p>默认情况下，如果类文件针对Java Micro Edition或Java 6或更高版本，则会对其进行预验证。</p>
<p>对于Java Micro Edition，需要进行预验证，因此如果指定此选项，则需要在处理的代码上运行外部预验证程序。</p>
<p>对于Java 6，预验证是可选的，但从Java 7开始，它是必需的。</p>
<p>只有在最终对Android时，它才不是必需的，因此您可以将其关闭以缩短处理时间。</p>
<h3 id="android"><a href="#android" class="headerlink" title="-android"></a>-android</h3><blockquote>
<p>指定已处理的类文件针对Android平台。然后ProGuard确保一些功能与Android兼容。</p>
</blockquote>
<p>例如，如果您正在处理Android应用程序，则应该指定此选项。</p>
<h2 id="一般规则"><a href="#一般规则" class="headerlink" title="一般规则"></a>一般规则</h2><h3 id="verbose"><a href="#verbose" class="headerlink" title="-verbose"></a>-verbose</h3><blockquote>
<p>指定在处理期间写出更多信息。如果程序以异常终止，则此选项将打印出整个堆栈跟踪，而不仅仅是异常消息。</p>
</blockquote>
<h3 id="dontnote-class-filter"><a href="#dontnote-class-filter" class="headerlink" title="-dontnote [class_filter]"></a>-dontnote [class_filter]</h3><blockquote>
<p>指定不打印有关配置中可能的错误或遗漏的注释，</p>
</blockquote>
<p>例如类名中的拼写错误或缺少可能有用的选项。</p>
<p>可选的过滤器是一个正则表达式; </p>
<p>ProGuard不打印有关匹配名称的类的注释。</p>
<h3 id="dontwarn-class-filter"><a href="#dontwarn-class-filter" class="headerlink" title="-dontwarn [class_filter]"></a>-dontwarn [class_filter]</h3><blockquote>
<p>指定不警告有关未解决的引用和其他重要问题。</p>
</blockquote>
<p>可选的过滤器是一个正则表达式; ProGuard不打印关于具有匹配名称的类的警告。忽略警告可能是危险的。</p>
<p>例如，如果处理确实需要未解决的类或类成员，则处理后的代码将无法正常工作。</p>
<p><strong>只有在你知道自己在做什么的情况下才使用此选项！</strong></p>
<h3 id="ignorewarnings"><a href="#ignorewarnings" class="headerlink" title="-ignorewarnings"></a>-ignorewarnings</h3><blockquote>
<p>指定打印任何关于未解决的引用和其他重要问题的警告，但在任何情况下都继续处理，忽略警告。</p>
</blockquote>
<p>忽略警告可能是危险的。</p>
<p>例如，如果处理确实需要未解决的类或类成员，则处理后的代码将无法正常工作。</p>
<p><strong>只有在知道自己在做什么的情况下才使用此选项！</strong></p>
<h3 id="printconfiguration-filename"><a href="#printconfiguration-filename" class="headerlink" title="-printconfiguration [filename]"></a>-printconfiguration [filename]</h3><blockquote>
<p>指定使用包含的文件和替换的变量写出已解析的整个配置。结构打印到标准输出或给定文件。</p>
</blockquote>
<p>这对于调试配置或将XML配置转换为更易读的格式有时会很有用。</p>
<h3 id="dump-filename"><a href="#dump-filename" class="headerlink" title="-dump [filename]"></a>-dump [filename]</h3><blockquote>
<p>指定在任何处理后写出类文件的内部结构。结构打印到标准输出或给定文件。</p>
</blockquote>
<p>例如，可能希望写出给定jar文件的内容，而不进行处理。</p>
<p>参考上面说的 dump.txt。</p>
<h3 id="addconfigurationdebugging"><a href="#addconfigurationdebugging" class="headerlink" title="-addconfigurationdebugging"></a>-addconfigurationdebugging</h3><blockquote>
<p>指定用调试语句来处理已处理的代码，这些语句显示缺少ProGuard配置的建议。</p>
</blockquote>
<p>如果处理后的代码崩溃，那么在运行时获得实用提示可能非常有用，因为它仍然缺少一些反射配置。</p>
<p>例如，代码可能是使用GSON库序列化类，可能需要一些配置。通常可以将控制台的建议复制/粘贴到配置文件中。 </p>
<p><strong>警告：不要在发行版本中使用此选项，因为它将混淆信息添加到已处理的代码中。</strong></p>
<h2 id="keep-规则修饰符"><a href="#keep-规则修饰符" class="headerlink" title="keep 规则修饰符"></a>keep 规则修饰符</h2><h3 id="includedescriptorclasses"><a href="#includedescriptorclasses" class="headerlink" title="includedescriptorclasses"></a>includedescriptorclasses</h3><blockquote>
<p>指定-keep选项所保存的方法和字段的类型描述符中的任何类也应保存。</p>
</blockquote>
<p>在保留方法名称时，这通常很有用，以确保方法的参数类型不会重命名。他们的签名保持完全不变，并与本地库兼容。</p>
<h3 id="includecode"><a href="#includecode" class="headerlink" title="includecode"></a>includecode</h3><blockquote>
<p>指定保持-keep选项所保存的字段的方法的代码属性也应该保留，即可能未被优化或模糊处理。这对于已优化或混淆的类通常很有用，以确保在优化期间未修改其代码。</p>
</blockquote>
<h3 id="allowshrinking"><a href="#allowshrinking" class="headerlink" title="allowshrinking"></a>allowshrinking</h3><blockquote>
<p>指定-keep选项中指定的入口点可能会压缩，即使必须另外保留它们。</p>
</blockquote>
<p>也就是说，可以在压缩步骤中删除入口点，但如果它们是必需的，则它们可能未被优化或混淆。</p>
<h3 id="allowoptimization"><a href="#allowoptimization" class="headerlink" title="allowoptimization"></a>allowoptimization</h3><blockquote>
<p>指定-keep选项中指定的入口点可能会被优化，即使它们必须另外保存。</p>
</blockquote>
<p>也就是说，入口点可能会在优化步骤中被更改，但它们可能不会被删除或混淆。</p>
<p><strong>此修饰符仅用于实现不寻常的要求。</strong></p>
<h3 id="allowobfuscation"><a href="#allowobfuscation" class="headerlink" title="allowobfuscation"></a>allowobfuscation</h3><blockquote>
<p>指定在-keep选项中指定的入口点可能会被混淆，即使它们必须另外保存。</p>
</blockquote>
<p>也就是说，入口点可能在混淆步骤中被重命名，但它们可能不会被删除或优化。</p>
<p><strong>此修饰符仅用于实现不寻常的要求。</strong></p>
<h2 id="keep-规则总结"><a href="#keep-规则总结" class="headerlink" title="keep 规则总结"></a>keep 规则总结</h2><p>压缩和混淆的各种-keep选项起初看起来有点混乱，但实际上它们背后有一个模式。</p>
<p>下表总结了它们之间的关系：</p>
<p>|保留|被删除或重命名|被重命名|</p>
<p>|:—-:|:—-:|:—–:|</p>
<p>| 类和类成员 | -keep| -keepnames |</p>
<p>|只有类成员|-keepclassmembers|-keepclassmembernames|</p>
<p>|类和类成员，入股成员存在|-keepclasseswithmembers|-keepclasseswithmembernames|</p>
<p>如果指定了一个没有类成员的类，ProGuard只保留该类及其无参数的构造函数作为入口点。它可能仍会删除，优化或混淆其他班级成员。</p>
<p>如果指定了一个方法，则ProGuard仅将该方法作为入口点进行保存。其代码可能仍会进行优化和调整。</p>
<h2 id="类规范"><a href="#类规范" class="headerlink" title="类规范"></a>类规范</h2><blockquote>
<p>类规范是类和类成员（字段和方法）的模板。它用于各种-keep选项和-assumenosideeffects选项中。相应的选项仅适用于与模板匹配的类和类成员。</p>
</blockquote>
<p>模板的设计看起来非常类似于Java，并为通配符进行了一些扩展。为了理解语法，你应该看看这些<a href="https://www.guardsquare.com/proguard/manual/examples" target="_blank" rel="noopener">例子</a>，但这是对一个完整的正式定义的尝试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[@annotationtype] [[!]public|final|abstract|@ ...] [!]interface|class|enum classname</span><br><span class="line"></span><br><span class="line">    [extends|implements [@annotationtype] classname]</span><br><span class="line"></span><br><span class="line">[&#123;</span><br><span class="line"></span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static|volatile|transient ...] &lt;fields&gt; |</span><br><span class="line"></span><br><span class="line">                                                                      (fieldtype fieldname);</span><br><span class="line"></span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static|synchronized|native|abstract|strictfp ...] &lt;methods&gt; |</span><br><span class="line"></span><br><span class="line">                                                                                           &lt;init&gt;(argumenttype,...) |</span><br><span class="line"></span><br><span class="line">                                                                                           classname(argumenttype,...) |</span><br><span class="line"></span><br><span class="line">                                                                                           (returntype methodname(argumenttype,...));</span><br><span class="line"></span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static ... ] *;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<p>方括号 “[]” 表示其内容是可选的。</p>
<p>省略号点“…”表示可以指定任意数量的前述项目。</p>
<p>垂直条“|”划定了两种选择。</p>
<p>非粗体括号“（）”只是将属于规范的部分组合在一起。</p>
<p>缩进尝试澄清预期的含义，但在实际配置文件中，空白是不相关的。</p>
<blockquote>
<p>class关键字指的是任何接口或类。interface 关键字限制匹配接口类。 enum关键字限制匹配枚举类。在 interface 或 enum 关键字前加上！将匹配限制为不是接口或枚举的类。</p>
<p>每一个类名字都必须是完全限定名，例如 java.lang.String 内部类用美元符号“$”分隔，例如java.lang.Thread$State。类名可以被指定为包含以下通配符的正则表达式：</p>
</blockquote>
<ul>
<li><p>? 匹配类名称中的任何单个字符，但不匹配包分隔符。例如 “com.example.Test?” 可以匹配 “com.example.Test1” 和 “com.example.Test2” 但不能匹配 “com.example.Test12”</p>
</li>
<li><p>* 匹配不包含包分隔符的类名的任何部分。例如 “com.example.*Test*“ 能够匹配 “com.example.MyTest” 和 “com.example.MyTestProduct” 但不能匹配 “com.example.mxc.MyTest” 或者 “com.example.*“ 能够匹配 “com.example” 但不能匹配 “com.example.mxc”</p>
</li>
<li><p>** 匹配类名称的任何部分，可能包含任意数量的包分隔符。例如，”**.Testz” 匹配除根包以外的所有包中的所有Test类。或者，”com.example.**“ 匹配 “com.example” 中的所有类及其子包。</p>
</li>
<li><p>&lt;n&gt; 在相同的选项中匹配第n个匹配的通配符。例如，”com.example.*Foo&lt;1&gt;” 匹配”com.example.BarFooBar”。</p>
</li>
</ul>
<p>为了获得更多的灵活性，类名实际上可以是逗号分隔的类名列表，可以加!。这个符号看起来不是很像java，所以应该适度使用。</p>
<p>为了方便和向后兼容，类名*指任何类，而不考虑它的包。</p>
<ul>
<li><p><strong>extends</strong> 和 <strong>implements </strong> 通常用来限制使用通配符的类。目前他们是一样的。他们的意思是 只有继承或实现了给定类的类才有资格。给定的类本身不包含在这个集合中。如果需要，应该在单独的选项中指定。</p>
</li>
<li><p>@ 可用于将类和类成员限制为使用指定的注释类型进行注释的类。annotationtype 就像类名一样被指定。</p>
</li>
<li><p>除了方法参数列表不包含参数名称外，字段和方法在Java中的定义非常类似（就像在javadoc和javap等其他工具中一样）。这些规范还可以包含以下通配符通配符：</p>
</li>
</ul>
<p> |通配符|意义|</p>
<p> |:—|:—:|</p>
<p> |&lt;init&gt;|匹配任何构造方法|</p>
<p> |&lt;fields&gt;|匹配任何字段|</p>
<p> |&lt;methods&gt;|匹配任何方法|</p>
<p> |*|匹配任何方法和字段|</p>
<p>请注意，上述通配符没有返回类型。只有&lt;init&gt;通配符才有一个参数列表。</p>
<p>字段和方法也可以使用正则表达式来指定。名称可以包含以下通配符：</p>
<p>|通配符|意义|</p>
<p>|:—|:—|</p>
<p>|?|匹配方法名的任何单个字符|</p>
<p>|*|匹配方法名的任何部分|</p>
<p>|&lt;n&gt;|在相同的选项中匹配第n个匹配的通配符|</p>
<p>类型可以包含以下通配符</p>
<p>|通配符|意义|</p>
<p>|:—|:—|</p>
<p>|%|匹配任何原始类型（boolean,int 等，不包含 void）|</p>
<p>|?|匹配类名中的单个字符|</p>
<p>|*|匹配类名中的任何部分但不包含包分隔符|</p>
<p>|**|匹配类名中的任何部分，可以包含任意包分割符|</p>
<p>|***|匹配任何类型（原始类型或者非原始类型，数组或者非数组）|</p>
<p>|—|匹配任何类型的任意数量的参数|</p>
<p>|&lt;i&gt;|在相同的选项中匹配第n个匹配的通配符。|</p>
<p>请注意，？，*和**通配符永远不会匹配基本类型。而且，只有***通配符才能匹配任何维度的数组类型。例如，“** get *（）”匹配“java.lang.Object getObject（）”，但不匹配“float getFloat（）”和“java.lang.Object [] getObjects（）”。</p>
<ul>
<li><p>也可以使用短类名（无包）或使用完整的类名来指定构造函数。和Java语言一样，构造函数规范有一个参数列表，但没有返回类型。</p>
</li>
<li><p>类访问修饰符和类成员访问修饰符通常用于限制通配类和类成员。它们指定必须为成员设置相应的访问标志以匹配。前面加 “!” 决定相应的访问标志应该被取消设置。</p>
</li>
</ul>
<p>允许组合多个标志（例如，public static）。这意味着必须设置两个访问标志（例如 public static ），除非它们有冲突，在这种情况下，至少必须设置其中一个（例如至少public或 protected）。</p>
<p>ProGuard支持可能由编译器设置的其他修饰符synthetic，bridge和varargs。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://www.guardsquare.com/en/proguard/manual/introduction" target="_blank" rel="noopener">https://www.guardsquare.com/en/proguard/manual/introduction</a></p>
</li>
<li><p><a href="https://www.diycode.cc/topics/380" target="_blank" rel="noopener">https://www.diycode.cc/topics/380</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[创建管理通知渠道]]></title>
      <url>http://blog.skymxc.com/2018/04/27/CreateAndManageNotificationChannel/</url>
      <content type="html"><![CDATA[<h1 id="创建-和管理-通知渠道"><a href="#创建-和管理-通知渠道" class="headerlink" title="创建 和管理 通知渠道"></a>创建 和管理 通知渠道</h1><p>从Android8.0（API26）开始，所有的通知必须分配一个渠道。每一个渠道，你都可以设置渠道中所有通知的视觉和听觉行为。然后，用户能够随意修改这些设置来决定通知的行为。</p>
<p>视频说明<br><a href="https://youtu.be/zGIw4MIJn5o" target="_blank" rel="noopener">https://youtu.be/zGIw4MIJn5o</a></p>
<p>用户能够设置每个App的通知渠道行为</p>
<p><img src="https://developer.android.google.cn/images/ui/notifications/channel-settings_2x.png" alt="更改渠道行为"></p>
<p><em>在用户界面渠道显示为 “类别”</em></p>
<p>渠道创建后就不能更改通知行为了，用户能够完全控制通知的行为，但我们还是可以更改说明和渠道名称</p>
<p>我们可以为每个不同类型的通知创建一个渠道；</p>
<p>如果 target&gt;=26 就必须使用渠道。如果target是在26以下，但是运行在了26及以上了，不要怕，还是会和往常一样，不会抛出异常。</p>
<p><strong>如果 target&gt;=26； 在26及以上运行的时候没有指定一个渠道，通知是不会发出的，系统会记录此错误。可以在logcat看到</strong></p>
<p><em>Android O 有一个新的开发者设置，当发送了没有指定渠道的通知时显示一个toast。 Settings &gt; Developer options and enable Show notification channel warnings</em></p>
<h2 id="创建-通知渠道"><a href="#创建-通知渠道" class="headerlink" title="创建 通知渠道"></a>创建 通知渠道</h2><p>创建渠道有三个步骤</p>
<ol>
<li>使用一个<strong>唯一ID</strong>，一个用户可见的<strong>渠道名称</strong>和一个渠道<strong>重要性</strong> 三个参数构造一个<code>NotificationChannel</code>实例</li>
<li>（可选）设置渠道描述 通过 setDescription();</li>
<li>通过<code>NotificationManager</code> 的 <code>createNotificationChannel()</code>创建渠道</li>
</ol>
<blockquote>
<p><strong>Note:</strong> <em>确保创建代码运行在Android O及以上，因为渠道的API没有在support library中</em></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">    // Create the NotificationChannel</span><br><span class="line">    CharSequence name = getString(R.string.channel_name);</span><br><span class="line">    String description = getString(R.string.channel_description);</span><br><span class="line">    int importance = NotificationManager.IMPORTANCE_DEFAULT;</span><br><span class="line">    NotificationChannel mChannel = new NotificationChannel(CHANNEL_ID, name, importance);</span><br><span class="line">    mChannel.setDescription(description);</span><br><span class="line">    // Register the channel with the system; you can&apos;t change the importance</span><br><span class="line">    // or other notification behaviors after this</span><br><span class="line">    NotificationManager notificationManager = (NotificationManager) getSystemService(</span><br><span class="line">            NOTIFICATION_SERVICE);</span><br><span class="line">    notificationManager.createNotificationChannel(mChannel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>如果创建的渠道已经存在当程序运行的时候不会出现异常</em></p>
<p>通知的行为默认是通过设置的重要性(构建Channel实例的第三个参数)来决定的。这些参数来自于<code>NotificationManagerCompat</code>中的几个常量。</p>
<p>如果想更进一步的自定行为可以参考以下方法 ；行为在渠道创建后是不能修改的，用户能够完全控制这些设置。</p>
<ul>
<li>指示灯是否开启 <code>enableLights()</code></li>
<li>指示灯的颜色 <code>setLightColor()</code></li>
<li>设置震动模式 <code>setVibrationPattern()</code></li>
</ul>
<p>可以通过 <code>createNotificationChannel()</code> 创建多个渠道；</p>
<p><em>除了给通知添加渠道，还可以考虑为通知添加系统类型。参考：<a href="https://developer.android.google.cn/training/notify-user/build-notification.html#system-category" target="_blank" rel="noopener">https://developer.android.google.cn/training/notify-user/build-notification.html#system-category</a></em></p>
<h2 id="设置重要性级别"><a href="#设置重要性级别" class="headerlink" title="设置重要性级别"></a>设置重要性级别</h2><p>渠道重要性决定了渠道中所有的通知打断级别，必须在渠道构造方法中设置重要性级别。有五个重要性级别 从IMPORTANCE_NONE(0) 到 IMPORTANCE_HIGH(4)，我们可以将他们指定给渠道中的所有通知。</p>
<p>为了兼容Android O 以下的版本 必须为通知设置优先级<code>setPriority()</code> 。参数是 <code>NotificationCompat</code>中的几个常量</p>
<p>重要性级别和优先级常量映射到的用户可见的重要性选项如下</p>
<table>
<thead>
<tr>
<th style="text-align:left">用户可见的重要性级别</th>
<th style="text-align:left">重要性级别（Android O及以上）</th>
<th style="text-align:left">优先级（Android O 以下）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">紧急。发出声音并显示为单条通知</td>
<td style="text-align:left">IMPORTANCE_HIGH</td>
<td style="text-align:left">PRIORITY_HIGH or PRIORITY_MAX</td>
</tr>
<tr>
<td style="text-align:left">高。发出声音</td>
<td style="text-align:left">IMPORTANCE_DEFAULT</td>
<td style="text-align:left">PRIORITY_DEFAULT</td>
</tr>
<tr>
<td style="text-align:left">中。没有声音</td>
<td style="text-align:left">IMPORTANCE_LOW</td>
<td style="text-align:left">PRIORITY_LOW</td>
</tr>
<tr>
<td style="text-align:left">低。没有声音也不会出现在状态栏中</td>
<td style="text-align:left">IMPORTANCE_MIN</td>
<td style="text-align:left">PRIORITY_MIN</td>
</tr>
</tbody>
</table>
<p>所有的通知，不管重要性如何，都会出现在不影响用户的系统界面上。例如通知栏，启动图标的通知点（可以改变样式或是否显示）</p>
<p>一但将渠道提交到<code>NotificationManager</code> 就不能再修改重要性级别了，但是用户可随意随时修改。</p>
<p>有关选择适当优先级的信息 ，查看 通知设计指南中的 <a href="https://material.io/guidelines/patterns/notifications.html#notifications-settings" target="_blank" rel="noopener">正确设置和管理优先级</a></p>
<h2 id="读取通知渠道设置"><a href="#读取通知渠道设置" class="headerlink" title="读取通知渠道设置"></a>读取通知渠道设置</h2><p>用户可以在设置界面设置渠道的行为（震动，声音等）可以通过以下步骤获取到用户对我们渠道的行为设置。</p>
<ol>
<li>通过 <code>getNotificationChannel()</code> or <code>getNotificationChannels()</code> 获取<code>NotificationChannel</code> 实例</li>
<li>查询指定的设置 例如 <code>getSound()</code>,<code>getImportance()</code>,<code>getVibrationPattern()</code></li>
</ol>
<p>如果检测到用户设置会影响程序的行为。我们可以给用户一个操作让其改变设置。</p>
<h2 id="打开通知渠道设置"><a href="#打开通知渠道设置" class="headerlink" title="打开通知渠道设置"></a>打开通知渠道设置</h2><p>渠道在创建了之后就不能通过代码的方式改变其行为了，只能用户在系统设置修改。为了方便用户修改我们可以通过代码打开系统设置，让用户更方便的修改。</p>
<p>通过Intent使用action:<code>ACTION_CHANNEL_NOTIFICATION_SETTINGS</code> 打开系统设置。<br>需要两个参数 一个是包名 一个是渠道id。</p>
<p>下面就是打开系统设置渠道的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);</span><br><span class="line">intent.putExtra(Settings.EXTRA_APP_PACKAGE, getPackageName());</span><br><span class="line">intent.putExtra(Settings.EXTRA_CHANNEL_ID, myNotificationChannel.getId());</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>
<h2 id="删除通知渠道"><a href="#删除通知渠道" class="headerlink" title="删除通知渠道"></a>删除通知渠道</h2><p>可以通过以下代码删除渠道<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager mNotificationManager =</span><br><span class="line">        (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">// The id of the channel.</span><br><span class="line">String id = &quot;my_channel_01&quot;;</span><br><span class="line">mNotificationManager.deleteNotificationChannel(id);</span><br></pre></td></tr></table></figure></p>
<p><em>系统设置会显示已经删除的渠道数量，作为垃圾邮件防范机制。可以通过重装程序或者清楚数据来清除测试渠道</em></p>
<h2 id="创建渠道分组"><a href="#创建渠道分组" class="headerlink" title="创建渠道分组"></a>创建渠道分组</h2><p>如果想要更好的在系统设置UI中显示渠道外观，可以创建渠道分组。当你的APP支持多用户的时候可以为每个账户创建一个渠道分组。这样，用户可以轻易的识别和控制具有相同名字的渠道。<br><img src="https://developer.android.google.cn/images/ui/notifications/channel-groups_2x.png" alt="个人和工作账户的通知渠道分组"></p>
<p>例如，一个网络社交APP可能包含支持个人和工作账户，这种情况下，每个账户可能需要多个相同功能和名称的多个渠道，如下所示：</p>
<ul>
<li>个人账户的两个渠道<ul>
<li>新评论</li>
<li>发布推荐</li>
</ul>
</li>
<li>工作账号的两个渠道<ul>
<li>新评论</li>
<li>发布推荐<br>将每个账户的渠道分组确保用户能够轻易的区分它们。</li>
</ul>
</li>
</ul>
<p>每一个渠道分组都需要一个包内唯一的ID和一个用户可见的名称，下面代码演示怎么创建一个分组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// The id of the group.</span><br><span class="line">String groupId = &quot;my_group_01&quot;;</span><br><span class="line">// The user-visible name of the group.</span><br><span class="line">CharSequence groupName = getString(R.string.group_name);</span><br><span class="line">NotificationManager mNotificationManager =</span><br><span class="line">        (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">mNotificationManager.createNotificationChannelGroup(new NotificationChannelGroup(group_id, group_name));</span><br></pre></td></tr></table></figure></p>
<p>创建分组后可以通过渠道的<code>setGroup()</code>来关联分组；<br>将渠道提交到通知管理后就无法改变关联关系了。</p>
<blockquote>
<p>end</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[创建通知]]></title>
      <url>http://blog.skymxc.com/2018/04/20/CreateNotification/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文地址：<a href="https://developer.android.com/training/notify-user/build-notification.html" target="_blank" rel="noopener">https://developer.android.com/training/notify-user/build-notification.html</a></p>
</blockquote>
<h2 id="创建一个通知"><a href="#创建一个通知" class="headerlink" title="创建一个通知"></a>创建一个通知</h2><p>通知提供了有关应用程序未使用时的事件的简短而及时的信息。这篇文章教你怎么通过Android4.0及以上版本的各种功能去创建一个通知。有关通知怎么在Android上显示，<a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html?hl=zh-cn" target="_blank" rel="noopener">Android 通知</a></p>
<p>此页面上的代码使用Android支持库中的<code>NotificationCompat</code> APIs。这些 APIs 允许你添加新版本有的功能，可以兼容到 Android 4.0（API level 14），然而，一个新的特征，例如回复操作会在旧版本中无法运行。</p>
<h2 id="添加支持库"><a href="#添加支持库" class="headerlink" title="添加支持库"></a>添加支持库</h2><p>尽管大部分使用 Android Studio 创建的项目都包含了使用 <code>NotificationCompat</code> 的必要依赖，但还是要检验一下项目的 <code>build.gradle</code> 文件中是否包含下面的依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &quot;com.android.support:support-compat:27.1.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>[^ <code>com.android.support</code> 中的其他库也包含了 <code>support-compat</code> 传递性依赖,如果引用了其他库也是可以使用 <code>NotificationCompat</code> 的，就不必显示添加上面的依赖 ]</p>
<h2 id="创建一个基础通知"><a href="#创建一个基础通知" class="headerlink" title="创建一个基础通知"></a>创建一个基础通知</h2><p>最基本的通知会显示一个 icon ，一个标题，一段简要的内容。这节你将会学习怎么创建一个点击启动APP的通知。</p>
<p><img src="https://developer.android.com/images/ui/notifications/notification-basic_2x.png?hl=zh-cn" alt="含有通知和文本的通知"></p>
<p>关于通知的每个部分的更多细节 请阅读 <a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html?hl=zh-cn#Templates" target="_blank" rel="noopener">通知概览</a></p>
<h3 id="设置通知内容"><a href="#设置通知内容" class="headerlink" title="设置通知内容"></a>设置通知内容</h3><p>首先，通过 <code>NotificationCompat.Builder</code> 设置通知的内容和渠道。下面的示例演示了如果通过以下命令创建通知。</p>
<ul>
<li>小图标 通过 <code>setSmallIcon()</code> ;这是唯一一个必须设置的用户可见内容</li>
<li>标题 通过 <code>setContentTitle()</code> 设置</li>
<li>内容 通过 <code>setContentText()</code> 设置</li>
<li>通知优先权 通过 <code>setPriority()</code> 设置。这个优先权决定了通知在 <code>Android 7.1</code>及以下系统上的行为（<code>Android 8.0</code> 及以上系统通过渠道的 <code>importance</code> 属性统一设置）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID)</span><br><span class="line">        .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">        .setContentTitle(textTitle)</span><br><span class="line">        .setContentText(textContent)</span><br><span class="line">        .setPriority(NotificationCompat.PRIORITY_DEFAULT);</span><br></pre></td></tr></table></figure>
<p><em>注意这个 <code>NotificationCompat.Builder</code> 构造方式需要一个渠道 ID　。　这是为了兼容　<code>Android 8.0</code> 及以上版本所必须的，旧版本忽略就好</em></p>
<p>默认通知内容会被自适应为一行，如果你想显示更多，可以通过 <code>setStyle()</code> 设置一个样式模板来启用扩展通知。例如，以下代码会创建一个更大的文本区域:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID)</span><br><span class="line">        .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">        .setContentTitle(&quot;My notification&quot;)</span><br><span class="line">        .setContentText(&quot;Much longer text that cannot fit one line...&quot;)</span><br><span class="line">        .setStyle(new NotificationCompat.BigTextStyle()</span><br><span class="line">                .bigText(&quot;Much longer text that cannot fit one line...&quot;))</span><br><span class="line">        .setPriority(NotificationCompat.PRIORITY_DEFAULT);</span><br></pre></td></tr></table></figure>
<p>关于其他大的通知样式，包括怎么去增加图片，控制媒体播放等，<a href="https://developer.android.com/training/notify-user/expanded.html" target="_blank" rel="noopener">创建扩展通知</a></p>
<h2 id="创建渠道和设置重要性"><a href="#创建渠道和设置重要性" class="headerlink" title="创建渠道和设置重要性"></a>创建渠道和设置重要性</h2><p>在 <code>Android 8.0</code> 及以上版本必须创建<code>Notificationchannel</code> 实例，并通过 <code>createNotificationchannel()</code> 注册通知渠道。下面代码必须保证 <code>SDK_VERSION</code> 在8.0及以上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">    // Create the NotificationChannel, but only on API 26+ because</span><br><span class="line">    // the NotificationChannel class is new and not in the support library</span><br><span class="line">    CharSequence name = getString(R.string.channel_name);</span><br><span class="line">    String description = getString(R.string.channel_description);</span><br><span class="line">    int importance = NotificationManagerCompat.IMPORTANCE_DEFAULT;</span><br><span class="line">    NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);</span><br><span class="line">    channel.setDescription(description);</span><br><span class="line">    // Register the channel with the system</span><br><span class="line">    NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);</span><br><span class="line">    notificationManager.createNotificationChannel(channel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这个 <code>NotificationChannel</code> 构造方法需要一个 <code>importance</code> 参数，这个参数是类 <code>NotificationManagerCompat</code> 中的常量；这个参数决定了渠道内通知的行为–但是也必须通过 <code>setPriority()</code> 设置优先权来兼容 <code>Android 7.1</code> 及更低的版本。</p>
<p>尽管必须设置通知的重要性和优先级，但是系统并不保证通知的行为，系统可能会因为别的因素改变重要性等级。用户可以随时更改重要性等级。</p>
<h3 id="设置通知点按操作"><a href="#设置通知点按操作" class="headerlink" title="设置通知点按操作"></a>设置通知点按操作</h3><p>每个通知都应该响应点按操作，通常是去打开一个通知对应的 <code>Activity</code> 。这样就必须指定一个 <code>PedingIntent</code> 定义的 <code>Intent</code> 并使用 <code>setContentIntent()</code> 设置给通知。</p>
<p>下面的代码演示了怎样去创建一个当用户点按打开 <code>Activity</code> 的基本通知<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Create an explicit intent for an Activity in your app</span><br><span class="line">Intent intent = new Intent(this, AlertDetails.class);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);</span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID)</span><br><span class="line">        .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">        .setContentTitle(&quot;My notification&quot;)</span><br><span class="line">        .setContentText(&quot;Hello World!&quot;)</span><br><span class="line">        .setPriority(NotificationCompat.PRIORITY_DEFAULT)</span><br><span class="line">        // Set the intent that will fire when the user taps the notification</span><br><span class="line">        .setContentIntent(pendingIntent)</span><br><span class="line">        .setAutoCancel(true);</span><br></pre></td></tr></table></figure></p>
<p>注意：这个通知调用了<code>setAutoCancel(true)</code> 当用户点按后会自动移除通知。</p>
<p>上面所示的 <code>setFlags()</code> 方法有助于在通过通知打开应用程序后保留用户的预期导航体验。但是，是否要用这个功能取决于你打开的 <code>Activity</code> 类型，可能是以下一种情况：</p>
<ul>
<li>专用于响应通知的 <code>Activity</code>。用户在正常情况下不会打开这个 <code>Activity</code>，所以该 <code>Activity</code> 启动一个新的任务栈而没有必要添加到程序的返回栈中。这就是上面所示的内容意图类型</li>
<li>应用程序中的常规 <code>Activity</code> . 这种情况，启动的 <code>Activity</code> 应该创建一个返回栈以便保留用户的导航体验。</li>
</ul>
<p>更多关于配置通知意图的方法，移步阅读<a href="https://developer.android.com/training/notify-user/navigation.html" target="_blank" rel="noopener">从通知启动一个Activity</a></p>
<h3 id="显示通知"><a href="#显示通知" class="headerlink" title="显示通知"></a>显示通知</h3><p>显示通知需要调用 <code>NotificationManagerCompat.notify()</code> 方法，参数是一个唯一ID和一个 <code>NotificationCompat.Builder.build()</code> 构建的结果。例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);</span><br><span class="line"></span><br><span class="line">// notificationId is a unique int for each notification that you must define</span><br><span class="line">notificationManager.notify(notificationId, mBuilder.build());</span><br></pre></td></tr></table></figure></p>
<p>记得保存 <code>NotificationManagerCompat.notify()</code> 使用的唯一ID之后要更新或者移除通知都要用到。</p>
<p>注意：从 <code>Android 8.0</code> 开始，程序每秒钟不能发出两次通知声音，如果你每秒钟发出多个通知，只有第一个通知有声音提示。</p>
<h2 id="增加操作按钮"><a href="#增加操作按钮" class="headerlink" title="增加操作按钮"></a>增加操作按钮</h2><p>一个通知能够添加三个操作按钮去允许用户快速响应。例如停止提醒或者快速回复文本消息。但是这些操作按钮最好不要跟通知点按响应重复。</p>
<p><img src="https://developer.android.com/images/ui/notifications/notification-basic-action_2x.png" alt="有一个按钮的通知"></p>
<p>通知按钮是用 <code>PendingIntent</code> 的 <code>addAction()</code> 方法添加的。就像设置通知默认的点按操作一样，可以不启动 <code>Activity</code> 去做其他的任何事情例如启动一个在后台作业的 <code>BroadcastReceiver</code> 这样就可以不打断用户当前操作。</p>
<p>例如，下面的代码演示了怎么个一个指定的广播接收者发送广播<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Intent snoozeIntent = new Intent(this, MyBroadcastReceiver.class);</span><br><span class="line">snoozeIntent.setAction(ACTION_SNOOZE);</span><br><span class="line">snoozeIntent.putExtra(EXTRA_NOTIFICATION_ID, 0);</span><br><span class="line">PendingIntent snoozePendingIntent =</span><br><span class="line">        PendingIntent.getBroadcast(this, 0, snoozeIntent, 0);</span><br><span class="line"></span><br><span class="line">NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID)</span><br><span class="line">        .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">        .setContentTitle(&quot;My notification&quot;)</span><br><span class="line">        .setContentText(&quot;Hello World!&quot;)</span><br><span class="line">        .setPriority(NotificationCompat.PRIORITY_DEFAULT)</span><br><span class="line">        .setContentIntent(pendingIntent)</span><br><span class="line">        .addAction(R.drawable.ic_snooze, getString(R.string.snooze),</span><br><span class="line">                snoozePendingIntent);</span><br></pre></td></tr></table></figure></p>
<p>关于构建一个后台运行的 <code>BroadcastReceiver</code> 的更多信息，可以查看<a href="https://developer.android.com/guide/components/broadcasts.html" target="_blank" rel="noopener">广播指南</a></p>
<p>如果要构造一个媒体控制（暂停，跳过等）通知，可以查看<a href="https://developer.android.com/training/notify-user/expanded.html#media-style" target="_blank" rel="noopener">创建媒体控制通知</a></p>
<h2 id="添加直接回复操作"><a href="#添加直接回复操作" class="headerlink" title="添加直接回复操作"></a>添加直接回复操作</h2><p><code>Android 7.0</code> 引入的直接回复操作，允许用户不打开 <code>Activity</code> 的情况下在通知内直接输入文本给你程序。例如，你可以在通知内回复文本消息或者更新任务列表。</p>
<p><img src="https://developer.android.com/images/ui/notifications/reply-button_2x.png" alt="点击回复按钮直接输入文本"></p>
<p>这个直接回复操作在通知上是一个附加操作按钮打开的文本输入框。当用户完成输入，系统会将含有响应文本的意图发送给你的程序。</p>
<h3 id="添加回复按钮"><a href="#添加回复按钮" class="headerlink" title="添加回复按钮"></a>添加回复按钮</h3><p>创建一个支持直接回复的通知</p>
<ol>
<li><p>创建一个 <code>RemoteInput.Builder</code> 实例添加到你的通知操作。这个类的构造方法接受一个系统为存储输入文本使用的KEY。之后可以在程序中通过这个KEY检索输入文本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Key for the string that&apos;s delivered in the action&apos;s intent.</span><br><span class="line">private static final String KEY_TEXT_REPLY = &quot;key_text_reply&quot;;</span><br><span class="line"></span><br><span class="line">String replyLabel = getResources().getString(R.string.reply_label);</span><br><span class="line">RemoteInput remoteInput = new RemoteInput.Builder(KEY_TEXT_REPLY)</span><br><span class="line">        .setLabel(replyLabel)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>为回复操作创建 <code>PendingIntent</code></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Build a PendingIntent for the reply action to trigger.</span><br><span class="line">PendingIntent replyPendingIntent =</span><br><span class="line">        PendingIntent.getBroadcast(getApplicationContext(),</span><br><span class="line">                conversation.getConversationId(),</span><br><span class="line">                getMessageReplyIntent(conversation.getConversationId()),</span><br><span class="line">                PendingIntent.FLAG_UPDATE_CURRENT);</span><br></pre></td></tr></table></figure>
<p>警告：如果您重新使用PendingIntent，用户可能会回复与他们认为不同的对话。你必须为每一个会话提供一个不同的请求码或者提供一个在任何其他对话的回复意图中调用equals（）时不会返回true的意图，对话ID经常作为intent的额外套件的一部分传递，但在您调用equals（）时会被忽略。</p>
<ol>
<li>使用 <code>addRemoteInput()</code> 方法将 <code>RemoteInput</code> 对象附给一个操作。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Create the reply action and add the remote input.</span><br><span class="line">NotificationCompat.Action action =</span><br><span class="line">        new NotificationCompat.Action.Builder(R.drawable.ic_reply_icon,</span><br><span class="line">                getString(R.string.label), replyPendingIntent)</span><br><span class="line">                .addRemoteInput(remoteInput)</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure>
<ol>
<li>添加操作到通知并发送通知</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Build the notification and add the action.</span><br><span class="line">Notification newMessageNotification = new Notification.Builder(mContext, CHANNEL_ID)</span><br><span class="line">        .setSmallIcon(R.drawable.ic_message)</span><br><span class="line">        .setContentTitle(getString(R.string.title))</span><br><span class="line">        .setContentText(getString(R.string.content))</span><br><span class="line">        .addAction(action)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">// Issue the notification.</span><br><span class="line">NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);</span><br><span class="line">notificationManager.notify(notificationId, newMessageNotification);</span><br></pre></td></tr></table></figure>
<p>用户出发回复操作按钮时系统会提示用户输入消息。如上图所示。</p>
<h3 id="从回复中检索用户输入"><a href="#从回复中检索用户输入" class="headerlink" title="从回复中检索用户输入"></a>从回复中检索用户输入</h3><p>要从通知的答复用户界面接收用户输入，请调用 <code>RemoteInput.getResultsFromIntent()</code> ，并将接受到的 <code>Intent</code> 传递给他：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private CharSequence getMessageText(Intent intent) &#123;</span><br><span class="line">    Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);</span><br><span class="line">    if (remoteInput != null) &#123;</span><br><span class="line">        return remoteInput.getCharSequence(KEY_TEXT_REPLY);</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>处理完文本后，你必须调用 <code>NotificationManagerCompat.notify()</code> 传入ID和TAG（如果有）来更新通知。以便隐藏直接回复界面并向用户确认他们的回复已经被正确接受并处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Build a new notification, which informs the user that the system</span><br><span class="line">// handled their interaction with the previous notification.</span><br><span class="line">Notification repliedNotification = new Notification.Builder(context, CHANNEL_ID)</span><br><span class="line">        .setSmallIcon(R.drawable.ic_message)</span><br><span class="line">        .setContentText(getString(R.string.replied))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">// Issue the new notification.</span><br><span class="line">NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);</span><br><span class="line">notificationManager.notify(notificationId, repliedNotification);</span><br></pre></td></tr></table></figure>
<p>在处理这个新通知时，使用传递给接收者的 <code>onReceive()</code> 上下文。</p>
<p>还应该通过调用 <code>setREmoteInputHistory()</code> 将该答复追加到底部。但是，如果您正在构建消息传递应用程序，则应该创建消息传递式通知并将新消息追加到对话中。</p>
<h2 id="添加一个进度条"><a href="#添加一个进度条" class="headerlink" title="添加一个进度条"></a>添加一个进度条</h2><p>通知能包含一个动画进度指示器，向用户展示正在进行的操作状态。</p>
<p><img src="https://developer.android.com/images/ui/notifications/notification-progressbar_2x.png" alt="操作过程中和之后的进度条"></p>
<p>如果能知道操作在什么时候完成。通过调用 <code>setProgress(max,progress,false)</code> 使用指示器的“确定”模式。第一个参数是“完成”时的值（例如100），第二个参数是当前的完成值，最后一个表示这是一个“确定”进度条。</p>
<p>随着操作的进行，持续的调用 <code>setProgress(max,progress,false)</code> 更新进度值并且重复发送通知。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);</span><br><span class="line">NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID);</span><br><span class="line">mBuilder.setContentTitle(&quot;Picture Download&quot;)</span><br><span class="line">        .setContentText(&quot;Download in progress&quot;)</span><br><span class="line">        .setSmallIcon(R.drawable.ic_notification)</span><br><span class="line">        .setPriority(NotificationCompat.PRIORITY_LOW);</span><br><span class="line"></span><br><span class="line">// Issue the initial notification with zero progress</span><br><span class="line">int PROGRESS_MAX = 100;</span><br><span class="line">int PROGRESS_CURRENT = 0;</span><br><span class="line">mBuilder.setProgress(PROGRESS_MAX, PROGRESS_CURRENT, false);</span><br><span class="line">notificationManager.notify(notificationId, mBuilder.build());</span><br><span class="line"></span><br><span class="line">// Do the job here that tracks the progress.</span><br><span class="line">// Usually, this should be in a worker thread</span><br><span class="line">// To show progress, update PROGRESS_CURRENT and update the notification with:</span><br><span class="line">// mBuilder.setProgress(PROGRESS_MAX, PROGRESS_CURRENT, false);</span><br><span class="line">// notificationManager.notify(notificationId, mBuilder.build());</span><br><span class="line"></span><br><span class="line">// When done, update the notification one more time to remove the progress bar</span><br><span class="line">mBuilder.setContentText(&quot;Download complete&quot;)</span><br><span class="line">        .setProgress(0,0,false);</span><br><span class="line">notificationManager.notify(notificationId, mBuilder.build());</span><br></pre></td></tr></table></figure>
<p>操作结束时，<code>progress</code>（完成进度）应该等于 <code>max</code> （最大值）。你可以让通知显示完成时间或者移除它。不管哪种情况，都应该更新通知显示操作已经完成。调用 <code>setProgress(0,0,false)</code> 可以移除通知进度条。</p>
<p>注意：因为进度条需要你不停的更新进度，所以这些代码通常运行在后台服务中。</p>
<p>显示一个指示器进度条（不确定模式，不显示完成百分比），可以调用 <code>setProgress(0,0,true)</code>。 样式是一个跟上边一样的进度条，除了进度条是一个不表示进度的连续动画。这个进度条动画会一直进行着直到你调用 <code>setProgress(0,0,false)</code> 然后更新通知删除进度指示器。</p>
<p>记得在操作完成后更新通知文本去通知用户</p>
<p>注意：如果确实需要下载文件，应该考虑使用 <code>DownloadManager</code> 他提供自己的进度通知来跟踪下载进度。</p>
<h2 id="设置一个系统范围的类别"><a href="#设置一个系统范围的类别" class="headerlink" title="设置一个系统范围的类别"></a>设置一个系统范围的类别</h2><p><code>Android</code> 通过一些预定义的系统范围类型去确定在用户开启不打扰模式的情况下怎么用通知打扰用户。</p>
<p>如果你的通知是 <code>NotificationCompat</code> 中预定义的通知类别中的一个–例如 <code>CATEGORY_ALARM</code>,<code>CATEGORY_REMINDER</code>,<code>CATEGORY_EVENT</code> or <code>CATEGORY_CALL</code> ,你应该通过 <code>setCatergory()</code> 定义一个类别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this, CHANNEL_ID)</span><br><span class="line">        .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">        .setContentTitle(&quot;My notification&quot;)</span><br><span class="line">        .setContentText(&quot;Hello World!&quot;)</span><br><span class="line">        .setPriority(NotificationCompat.PRIORITY_DEFAULT)</span><br><span class="line">        .setCategory(NotificationCompat.CATEGORY_MESSAGE);</span><br></pre></td></tr></table></figure></p>
<p>当设备进入忽扰模式系统将根据设置的通知类别决定通知的行为。</p>
<p>此外，通知类别不是必须的，只有你的通知输入系统预定义中一种才需要设置。</p>
<h2 id="设置锁屏可见性"><a href="#设置锁屏可见性" class="headerlink" title="设置锁屏可见性"></a>设置锁屏可见性</h2><p>要在锁定屏幕中控制通知可见的详细程度，调用 <code>setVisiblity()</code> 并设置下面中的一个值：</p>
<ul>
<li>VISIBILITY_PUBLIC 显示通知的完整内容</li>
<li>VISIBILITY_SECRET 不显示任何内容</li>
<li>VISIBILITY_PRIVATE 显示基础内容，例如通知的icon，标题，但是隐藏了内容；</li>
</ul>
<p>当设置为 <code>VISIBILITY_PRIVATE</code> 时可以提供一个隐藏部分内容的备用版本。例如，一个 SMS app 可能会显示 “你有三条文本消息”,但是隐藏了消息内容和发送人。提供这个备用通知，首先通过 <code>NotificationCompat.Builder</code> 创建一个备用通知。然后调用 <code>setPublicVersion()</code> 附加进普通通知。</p>
<p>然而，用户对这些有最终控制权，甚至可以从通知渠道控制。</p>
<h2 id="更新通知"><a href="#更新通知" class="headerlink" title="更新通知"></a>更新通知</h2><p>在发布后更新通知，可以再次调用 <code>NotificationManagerCompat.notify()</code> 使用原来的通知ID。如果通知已经消失会发出一个新的通知。</p>
<p>可以选择性调用　<code>setOnlyAlertOnce()</code> 让通知只在第一次显示时才会中断用户（包括声音，震动，视觉），而不是以后的更新都中断用户。</p>
<p>注意：Android系统在更新通知时应用了比例限制。如果你的更新过于频繁（一秒内多个），系统可能会放弃一些更新（通常一秒内只更新一次）。</p>
<h2 id="移除通知"><a href="#移除通知" class="headerlink" title="移除通知"></a>移除通知</h2><p>通知会在以下几种情况被移除：</p>
<ul>
<li>用户清除</li>
<li>创建通知时调用了 <code>setAutoCancel()</code>，用户点击通知后会自动消失。</li>
<li>调用 <code>cancel()</code> 方法，传入指定ID，这个方法会删除指定通知。</li>
<li>调用 <code>cancelAll()</code> 移出所有你发出的通知</li>
<li>如果创建的时候调用 <code>setTimeoutAfter()</code> 设置了超市时间，系统会在指定时间后清除此通知，如果需要，你可以在系统清除之前清除掉。</li>
</ul>
<h2 id="消息应用最佳实践"><a href="#消息应用最佳实践" class="headerlink" title="消息应用最佳实践"></a>消息应用最佳实践</h2><p>使用此处列出的最佳做法作为创建消息传递和聊天应用通知时要记住的内容的快速参考</p>
<h3 id="使用-MessagingStyle"><a href="#使用-MessagingStyle" class="headerlink" title="使用 MessagingStyle"></a>使用 MessagingStyle</h3><p>从 Android  7.0 开始，Android 为消息类型通知子提供了样式模板。 使用 <code>NotificationCompat.MessagingStyle</code> 类，你可以更改多个显示在通知的标签，包括会话标题，其他的消息和通知的内容视图。</p>
<p>下面的代码片段演示了怎么用 <code>Messagingstyle</code> 类自定一个通知样式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = new Notification.Builder(this, CHANNEL_ID)</span><br><span class="line">        .setStyle(new NotificationCompat.MessagingStyle(&quot;Me&quot;)</span><br><span class="line">        .setConversationTitle(&quot;Team lunch&quot;)</span><br><span class="line">        .addMessage(&quot;Hi&quot;, timestamp1, null) // Pass in null for user.</span><br><span class="line">        .addMessage(&quot;What&apos;s up?&quot;, timestamp2, &quot;Coworker&quot;)</span><br><span class="line">        .addMessage(&quot;Not much&quot;, timestamp3, null)</span><br><span class="line">        .addMessage(&quot;How about lunch?&quot;, timestamp4, &quot;Coworker&quot;))</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>
<p>从Android 8.0（API级别26）开始，使用NotificationCompat.MessagingStyle类的通知将以折叠形式显示更多内容。您还可以使用addHistoricMessage（）方法通过向与消息传递相关的通知添加历史消息来为对话提供上下文。</p>
<p>使用 <code>NotificationCompat.MessagingStyle</code> 的情况：</p>
<ul>
<li>调用MessagingStyle.setConversationTitle（）为两个以上的人设置群组聊天的标题。一个好的对话标题可能是群组聊天的名称，或者如果它没有特定的名称，则可能是对话中的参与者列表。如果没有这个，该消息可能被误认为属于与对话中最近消息的发送者的一对一对话。</li>
<li>使用MessagingStyle.setData（）方法包含媒体消息，如图像。目前支持模式图像/ *的MIME类型</li>
</ul>
<h3 id="使用直接回复"><a href="#使用直接回复" class="headerlink" title="使用直接回复"></a>使用直接回复</h3><p>直接回复允许用户回复内部消息</p>
<ul>
<li>在用户使用内联回复操作回复后，使用MessagingStyle.addMessage（）更新MessagingStyle通知，并且不收回或取消通知。不取消通知允许用户从通知中发送多个回复。</li>
<li>要使内联回复操作与Android Wear兼容，请调用Action.WearableExtender.setHintDisplayInlineAction（true）。</li>
<li>使用addHistoricMessage（）方法通过向通知添加历史消息来为直接回复对话提供上下文</li>
</ul>
<h3 id="启用智能回复"><a href="#启用智能回复" class="headerlink" title="启用智能回复"></a>启用智能回复</h3><p>要启用智能回复，请在回复操作上调用setAllowGeneratedResponses（true）。这会使通知桥接到Android Wear设备时，用户可以使用智能回复响应。智能答复响应由完全在机器学习模型生成，使用NotificationCompat.MessagingStyle通知提供的上下文，并且没有数据上传到互联网以生成响应</p>
<h3 id="添加通知元数据"><a href="#添加通知元数据" class="headerlink" title="添加通知元数据"></a>添加通知元数据</h3><p>当设备处于免打扰模式时，分配通知元数据以告知系统如何处理您的应用通知。例如，使用addPerson（）或setCategory（Notification.CATEGORY_MESSAGE）方法覆盖免打扰模式。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Room 持久化库]]></title>
      <url>http://blog.skymxc.com/2018/04/15/Room/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一篇自己从Android开发文档中翻译来的关于<code>Room</code> 的文档。哪里不对，欢迎纠错</p>
</blockquote>
<h2 id="Room-持久化库"><a href="#Room-持久化库" class="headerlink" title="Room 持久化库"></a>Room 持久化库</h2><p>Room持久性库提供了SQLite的抽象层，以便在充分利用SQLite的同时允许流畅的数据库访问。<br>该库可帮助你在设备上创建应用程序的缓存数据，这样不管设备是否联网都能看到数据。</p>
<blockquote>
<p>摘自 <a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="noopener">Room Persistence Library</a></p>
</blockquote>
<h2 id="使用-Room-在本地保存数据"><a href="#使用-Room-在本地保存数据" class="headerlink" title="使用 Room 在本地保存数据"></a>使用 <code>Room</code> 在本地保存数据</h2><blockquote>
<p>原文地址 <a href="https://developer.android.com/training/data-storage/room/index.html" target="_blank" rel="noopener">https://developer.android.com/training/data-storage/room/index.html</a></p>
</blockquote>
<p>对于不重要的数据可以存储在本地，最常见的就是缓存相关的数据。这样，在设备没有网络的时候就可以浏览离线数据。当设备联网后，将用户改动的数据同步至服务端。</p>
<p><code>Room</code> 有三个重要组件</p>
<ul>
<li>Database</li>
<li>Entity</li>
<li>DAO</li>
</ul>
<h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><p>包含数据库持有者，并作为与应用持久关联数据的底层连接的主要接入点。</p>
<p>使用<code>@Database</code>注解，并满足以下条件</p>
<ul>
<li>是抽象类，并且继承自<code>RoomDatabase</code></li>
<li>在注解中包含与数据库关联的实体列表。</li>
<li>包含一个具有0个参数的抽象方法，并返回用@Dao注解的类。<br>在运行时，可以通过调用Room.databaseBuilder（）或Room.inMemoryDatabaseBuilder（）来获取数据库实例。</li>
</ul>
<h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><p>表示数据库中的表格</p>
<h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><p>包含用户访问数据库的方法</p>
<p>这些组件以及组件与APP其他部分的关系 如图所示<br><img src="https://developer.android.google.cn/images/training/data-storage/room_architecture.png" alt="Room结构图"></p>
<p>下面的代码片段是一个数据库实例配置包含了一个<code>Entity</code>和一个<code>DAO</code>:</p>
<p><strong><code>User.java</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class User &#123;</span><br><span class="line">    @PrimaryKey</span><br><span class="line">    private int uid;</span><br><span class="line"></span><br><span class="line">    @ColumnInfo(name = &quot;first_name&quot;)</span><br><span class="line">    private String firstName;</span><br><span class="line"></span><br><span class="line">    @ColumnInfo(name = &quot;last_name&quot;)</span><br><span class="line">    private String lastName;</span><br><span class="line"></span><br><span class="line">    // Getters and setters are ignored for brevity,</span><br><span class="line">    // but they&apos;re required for Room to work.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><code>UserDao.java</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    @Query(&quot;SELECT * FROM user&quot;)</span><br><span class="line">    List&lt;User&gt; getAll();</span><br><span class="line"></span><br><span class="line">    @Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)</span><br><span class="line">    List&lt;User&gt; loadAllByIds(int[] userIds);</span><br><span class="line"></span><br><span class="line">    @Query(&quot;SELECT[^] * FROM user WHERE first_name LIKE :first AND &quot;</span><br><span class="line">           + &quot;last_name LIKE :last LIMIT 1&quot;)</span><br><span class="line">    User findByName(String first, String last);</span><br><span class="line"></span><br><span class="line">    @Insert</span><br><span class="line">    void insertAll(User... users);</span><br><span class="line"></span><br><span class="line">    @Delete</span><br><span class="line">    void delete(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong><code>AppDatabase.java</code></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Database(entities = &#123;User.class&#125;, version = 1)</span><br><span class="line">public abstract class AppDatabase extends RoomDatabase &#123;</span><br><span class="line">    public abstract UserDao userDao();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建完完成后使用以下代码获取数据库实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AppDatabase db = Room.databaseBuilder(getApplicationContext(),</span><br><span class="line">        AppDatabase.class, &quot;database-name&quot;).build();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据库实例最好是单例以节省内存开销</p>
</blockquote>
<h2 id="使用-Room-实体定义数据"><a href="#使用-Room-实体定义数据" class="headerlink" title="使用 Room 实体定义数据"></a>使用 <code>Room</code> 实体定义数据</h2><blockquote>
<p>原文地址 <a href="https://developer.android.com/training/data-storage/room/defining-data.html" target="_blank" rel="noopener">https://developer.android.com/training/data-storage/room/defining-data.html</a></p>
</blockquote>
<p>我们定义的每一个实体，<code>Room</code> 都会对应的在数据库中创建一个表。<br>默认 Room 会为 每个字段在表中创建对应的字段;如果其中一些属性不想被创建在表中怎么办，那就是使用 <code>@Ignore</code> 注解此属性。完成实体的创建之后必须在 <code>Database</code> 引用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类中的每个字段都必须让Room能够访问到。否则Room无法管理。<br> [^] 注意 ：要遵循 JavaBean 规约；否则 管杀不管埋；[^]</p>
<h3 id="定义主键"><a href="#定义主键" class="headerlink" title="定义主键"></a>定义主键</h3><p>每个实体必须定义最少一个主键，就算类中只有一个字段，也要保证使用 <code>@PrimaryKey</code>；<br>如果想让Room自动分配ID，可以设置 <code>autoGenerate</code> 为true；<br>如果是联合主键，可以在<code>@Entity</code>中设置 <code>primaryKeys</code> 属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(primaryKeys = &#123;<span class="string">"firstName"</span>, <span class="string">"lastName"</span>&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认Room会使用类名当作数据库表名，如果你想设置其他名字，可以设置 <code>tableName</code> 属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(tableName = <span class="string">"users"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[^]Sqlite中表名不区分大小写[^]</p>
<p>就像表名一样，字段的名字默认的也是类中属性的名字如果想设置其他名字，可使用 <code>@ColumnInfo</code> 的 <code>name</code>属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(tableName = <span class="string">"users"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"first_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注解索引和唯一约束"><a href="#注解索引和唯一约束" class="headerlink" title="注解索引和唯一约束"></a>注解索引和唯一约束</h3><p>使用 <code>@Entity</code> 的 <code>indices</code> 来创建索引，并列出索引或者组合索引包含的列；</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(indices = &#123;<span class="meta">@Index</span>(<span class="string">"name"</span>),</span><br><span class="line">        <span class="meta">@Index</span>(value = &#123;<span class="string">"last_name"</span>, <span class="string">"address"</span>&#125;)&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>@Index</code> 注解 和 <code>unique</code> 属性设置 唯一约束。<br>下面代码 firstName  和 lastName 两列组合唯一索引</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(indices = &#123;<span class="meta">@Index</span>(value = &#123;<span class="string">"first_name"</span>, <span class="string">"last_name"</span>&#125;,</span><br><span class="line">        unique = <span class="keyword">true</span>)&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"first_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"last_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    Bitmap picture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定义对象间的关联关系"><a href="#定义对象间的关联关系" class="headerlink" title="定义对象间的关联关系"></a>定义对象间的关联关系</h3><p>由于<code>Sqlite</code> 是关系型数据库，我们可以指定对象间的关系。大部分的ORM框架也都支持对象间相互引用。但是 <code>Room</code> 明确禁止这样做。至于为什么明确禁止，文章最后会说。原文链接：<a href="https://developer.android.com/training/data-storage/room/referencing-data.html#understand-no-object-references" target="_blank" rel="noopener">https://developer.android.com/training/data-storage/room/referencing-data.html#understand-no-object-references</a></p>
<p>虽然不能直接定义对象间引用，但是可以使用外键建立关系。</p>
<p>例如：有一个 <code>Book</code> 实体，可以使用 <code>@ForeignKey</code> 关联到 <code>User</code> 实体。下面代码演示使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(foreignKeys = <span class="meta">@ForeignKey</span>(entity = User.class,</span><br><span class="line">                                  parentColumns = <span class="string">"id"</span>,</span><br><span class="line">                                  childColumns = <span class="string">"user_id"</span>))</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"user_id"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>@ForeignKey</code> 是非常强大的，我们可以定义对象间的级联操作。例如可以在注解中设置 <code>onDelete = CASCADE</code>，当删除用户的的时候就会把用户所关联的书都删掉了。</p>
<p>[^]SQLite将@Insert（onConflict = REPLACE）作为一组REMOVE和REPLACE操作处理，而不是单个UPDATE操作。这种替换冲突值的方法可能会影响外键约束。有关更多详细信息，请参阅ON_CONFLICT子句的SQLite文档。[^]</p>
<h3 id="创建嵌套对象"><a href="#创建嵌套对象" class="headerlink" title="创建嵌套对象"></a>创建嵌套对象</h3><p>Room 支持在数据实体中嵌套其他对象来组合相关字段。例如 <code>User</code> 中嵌套一个 <code>Address</code> 这个地址对象中有三个字段：街道，城市，邮编。在数据表中这个三个字段是在用户表中的，就像其他字段一样。<br>通过在 <code>User</code> 使用 <code>` 注解 属性</code>address` 即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String street;</span><br><span class="line">    <span class="keyword">public</span> String state;</span><br><span class="line">    <span class="keyword">public</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name = <span class="string">"post_code"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> postCode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">public</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表示User对象的表格包含具有以下名称的列：id，firstName，street，state，city和post_code。</p>
<p>[^] 嵌套字段可以嵌套其他字段[^]<br>如果数据实体中有多个 嵌套字段，可以通过设置属性 <code>prefix</code> 加前缀的方式保证字段名不重复。<br>如果在 <code>User</code> 中使用下面的代码,那么嵌套字段就会是 <code>address_street</code>,<code>address_state</code>,<code>address_city</code>和<code>address_post_code</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embedded</span>(prefix = <span class="string">"address_"</span>)</span><br><span class="line"><span class="keyword">public</span> Address address;</span><br></pre></td></tr></table></figure></p>
<h2 id="使用-Room-DAO-访问数据"><a href="#使用-Room-DAO-访问数据" class="headerlink" title="使用 Room DAO 访问数据"></a>使用 <code>Room DAO</code> 访问数据</h2><blockquote>
<p>原文地址：<a href="https://developer.android.com/training/data-storage/room/accessing-data.html" target="_blank" rel="noopener">https://developer.android.com/training/data-storage/room/accessing-data.html</a></p>
</blockquote>
<p>Room 使用数据对象和 DAO 访问数据库。<br>DAO 是 Room 的重要组件，他包含了操作数据的抽象方法；<br>DAO可以是一个接口或者抽象类，如果是抽象类的话，它可以有一个构造函数，它将RoomDatabase作为其唯一参数。Room会在编译时创建实现。<br>DAO不能在主线程的时候操作数据，可能会阻塞UI，除非在构建的时候调用 <code>allowMainThreadQueries()</code>。如果是返回 <code>LiveData</code>或者 <code>Flowable</code> 的异步查询例外。</p>
<h3 id="定义操作方法"><a href="#定义操作方法" class="headerlink" title="定义操作方法"></a>定义操作方法</h3><p>这里只列出几个常用方法</p>
<h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><p>当创建一个DAO方法并使用它的时候，Room会生成它的实现并在单个事物中将所有参数插入。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(onConflict = OnConflictStrategy.REPLACE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUsers</span><span class="params">(User... users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBothUsers</span><span class="params">(User user1, User user2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUsersAndFriends</span><span class="params">(User user, List&lt;User&gt; friends)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>@Insert</code> 只接受到一个参数，他会返回一个新插入行的 <code>long</code>类型的 <code>rowid</code>。如果参数是 一个数组和集合就会返回一个long类型的数组或集合。<br>关于 <code>@Insert</code> 的详细介绍查看文档 <a href="https://developer.android.com/reference/android/arch/persistence/room/Insert.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/arch/persistence/room/Insert.html</a></p>
<h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>Room 会通过每个实体的主键进行查询，然后再进行修改。<br>返回值可以是一个 <code>int</code> 型的值，返回更新的行数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Update</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUsers</span><span class="params">(User... users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>Room 会数据实体的主键删除相应的数据。<br>返回值可以是一个 <code>int</code> 型的值，用来表示删除的行数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Delete</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUsers</span><span class="params">(User... users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h3><p><code>@Query</code> 是 DAO 中主要使用的注解。它可以执行对数据库的读写操作。每一个 <code>@Query</code> 方法都会在编译时验证，如果出现问题也是在编译时出现问题不会在运行时出现问题。</p>
<p><code>Room</code> 也会验证方法的返回值，如果返回对象中的字段名称和查询响应中的字段名字不匹配， <code>Room</code> 会通过以下方式给出提示</p>
<ul>
<li>如果只有一些字段名称不匹配，会发出警告</li>
<li>如果没有字段名称匹配，会发出错误。</li>
</ul>
<h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface MyDao &#123;</span><br><span class="line">    @Query(&quot;SELECT * FROM user&quot;)</span><br><span class="line">    public User[] loadAllUsers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个非常简单的查询所有用户的查询。在编译时，Room会知道是查询用户表的所有列。如果查询包含语法错误或者数据库中不存在这个表。Room会在编译时报错并给出错误信息。</p>
<h4 id="将参数传递给查询"><a href="#将参数传递给查询" class="headerlink" title="将参数传递给查询"></a>将参数传递给查询</h4><p>大部分时候查询都是需要过滤参数的。比如要查询一些年龄比较大的用户。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM user WHERE age &gt; :minAge"</span>)</span><br><span class="line">    <span class="keyword">public</span> User[] loadAllUsersOlderThan(<span class="keyword">int</span> minAge);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在编译时，Room会将 <code>:minAge</code> 与方法参数匹配绑定。 Room使用参数名字匹配，如果匹配不上给出错误提示。</p>
<p>也可以传递多个参数或者引用多次：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM user WHERE age BETWEEN :minAge AND :maxAge"</span>)</span><br><span class="line">    <span class="keyword">public</span> User[] loadAllUsersBetweenAges(<span class="keyword">int</span> minAge, <span class="keyword">int</span> maxAge);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM user WHERE first_name LIKE :search "</span></span><br><span class="line">           + <span class="string">"OR last_name LIKE :search"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserWithName</span><span class="params">(String search)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="返回列的子集"><a href="#返回列的子集" class="headerlink" title="返回列的子集"></a>返回列的子集</h4><p>很多时候只需要数据实体的中几个列。例如你可能只想显示用户的姓和名而不是全部的用户信息。只查询需要的列可以节省资源并且查询的更快。</p>
<p><code>Room</code> 允许返回任何的Java对象。只要查询的结果列能够和Java对象映射上即可。所以我们可以创建一个只包含需要的列的类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTuple</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name=<span class="string">"first_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ColumnInfo</span>(name=<span class="string">"last_name"</span>)</span><br><span class="line">    <span class="keyword">public</span> String lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这个 POJO</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT first_name, last_name FROM user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;NameTuple&gt; <span class="title">loadFullName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Room</code> 知道查询的值并知道怎么映射到对应的NameTuple字段中。所以 <code>Room</code> 会生成正确的代码。如果查询返回的列多了或者少了，Room会给出警告</p>
<p><em>这里也可以使用<code>@Embedded</code>注解</em></p>
<h4 id="传递参数集合"><a href="#传递参数集合" class="headerlink" title="传递参数集合"></a>传递参数集合</h4><p>有时候查询的参数数量是动态的，只有运行的时候才知道。例如只查询某些地区的用户。<br>当参数是一个集合的时候，<code>Room</code> 会在运行的时候自动扩展它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT first_name, last_name FROM user WHERE region IN (:regions)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;NameTuple&gt; <span class="title">loadUsersFromRegions</span><span class="params">(List&lt;String&gt; regions)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="可观察的查询"><a href="#可观察的查询" class="headerlink" title="可观察的查询"></a>可观察的查询</h4><p>在执行查询时，我们经常想让UI在数据更改时自动更新。要实现这一点，可以在查询方法使用 <code>LiveData</code> 类行的返回值。当数据更新时 <code>Room</code> 会自动生成所需的代码已更新<code>LiveData</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT first_name, last_name FROM user WHERE region IN (:regions)"</span>)</span><br><span class="line">    <span class="keyword">public</span> LiveData&lt;List&lt;User&gt;&gt; loadUsersFromRegionsSync(List&lt;String&gt; regions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>从版本1.0开始，Room使用查询中访问的表的列表来决定是否更新LiveData的实例。</em></p>
<h4 id="使用-RxJava-进行响应查询"><a href="#使用-RxJava-进行响应查询" class="headerlink" title="使用 RxJava 进行响应查询"></a>使用 RxJava 进行响应查询</h4><p>Room还可以从定义的查询中返回 RxJava2 的 Publisher 和 Flowable 对象。要使用此功能，需要将 Room 组中的 android.arch.persistence.room:rxjava2 组件添加到构建Gradle依赖项中,添加组件之后就可以返回 Rxjava2 中的对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * from user where id = :id LIMIT 1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flowable&lt;User&gt; <span class="title">loadUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多 Room 和 Rxjava2 的使用 看另一篇文章 <a href="https://medium.com/google-developers/room-rxjava-acb0cd4f3757" target="_blank" rel="noopener">https://medium.com/google-developers/room-rxjava-acb0cd4f3757</a></p>
<h4 id="直接访问-Cursor"><a href="#直接访问-Cursor" class="headerlink" title="直接访问 Cursor"></a>直接访问 Cursor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface MyDao &#123;</span><br><span class="line">    @Query(&quot;SELECT * FROM user WHERE age &gt; :minAge LIMIT 5&quot;)</span><br><span class="line">    public Cursor loadRawUsersOlderThan(int minAge);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>非常不推荐使用Cursor API，因为它不能保证行是否存在或行包含的值。只有当已经拥有需要游标并且无法轻松重构的代码时才使用此功能。</strong></p>
<h4 id="查询多个表"><a href="#查询多个表" class="headerlink" title="查询多个表"></a>查询多个表</h4><p>有些时候可能需要查询多个表中的数据来计算结果。Room运行我们写任何查询，当然也允许连接其他表。如果响应式可观察数据类型，例如  Flowable 或者 LiveData，Room会监视查询中的所有表，使其无效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT * FROM book "</span></span><br><span class="line">           + <span class="string">"INNER JOIN loan ON loan.book_id = book.id "</span></span><br><span class="line">           + <span class="string">"INNER JOIN user ON user.id = loan.user_id "</span></span><br><span class="line">           + <span class="string">"WHERE user.name LIKE :userName"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findBooksBorrowedByNameSync</span><span class="params">(String userName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以从这些查询中返回POJO。例如，可以编写一个查询来加载用户及其宠物的名称，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyDao</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Query</span>(<span class="string">"SELECT user.name AS userName, pet.name AS petName "</span></span><br><span class="line">          + <span class="string">"FROM user, pet "</span></span><br><span class="line">          + <span class="string">"WHERE user.id = pet.user_id"</span>)</span><br><span class="line">   <span class="keyword">public</span> LiveData&lt;List&lt;UserPet&gt;&gt; loadUserAndPetNames();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// You can also define this class in a separate file, as long as you add the</span></span><br><span class="line">   <span class="comment">// "public" access modifier.</span></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPet</span> </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> String userName;</span><br><span class="line">       <span class="keyword">public</span> String petName;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="迁移-Room-数据库"><a href="#迁移-Room-数据库" class="headerlink" title="迁移 Room 数据库"></a>迁移 <code>Room</code> 数据库</h2><blockquote>
<p>原文 <a href="https://developer.android.com/training/data-storage/room/migrating-db-versions.html" target="_blank" rel="noopener">https://developer.android.com/training/data-storage/room/migrating-db-versions.html</a></p>
</blockquote>
<p>在APP升级时可能需要更改数据库来策应新的功能。这个时候当然不希望数据库中的数据丢失。</p>
<p><code>Room</code> 允许我们编写 <code>Migration</code> ，以此来迁移数据。每个迁移类制定一个开始版本和结束版本。</p>
<p>在运行时，Room会运行每个<code>Migration</code>类的<code>migrate（）</code>方法，并使用正确的顺序将数据库迁移到更高版本。</p>
<p><strong>如果不提供必要的<code>Migration</code> , <code>Room</code> 会重建数据库，所以数据会丢失</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Room.databaseBuilder(getApplicationContext(), MyDb.class, <span class="string">"database-name"</span>)</span><br><span class="line">        .addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Migration MIGRATION_1_2 = <span class="keyword">new</span> Migration(<span class="number">1</span>, <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(SupportSQLiteDatabase database)</span> </span>&#123;</span><br><span class="line">        database.execSQL(<span class="string">"CREATE TABLE `Fruit` (`id` INTEGER, "</span></span><br><span class="line">                + <span class="string">"`name` TEXT, PRIMARY KEY(`id`))"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Migration MIGRATION_2_3 = <span class="keyword">new</span> Migration(<span class="number">2</span>, <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(SupportSQLiteDatabase database)</span> </span>&#123;</span><br><span class="line">        database.execSQL(<span class="string">"ALTER TABLE Book "</span></span><br><span class="line">                + <span class="string">" ADD COLUMN pub_year INTEGER"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>要保持迁移逻辑按预期运行，请使用完整查询，而不是引用表示查询的常量。</strong></p>
<p>在迁移完成之后，<code>Room</code> 验证模式会确认迁移正确进行，如果 <code>Room</code> 发现错误，会抛出一个包含不匹配的异常。</p>
<h3 id="测试迁移"><a href="#测试迁移" class="headerlink" title="测试迁移"></a>测试迁移</h3><p>数据迁移是很重要的，一旦迁移失败可能会发生Crash。为了保证程序的稳定性，一定要确认是否否迁移成功。Room 提供了一个测试工件来帮助我们测试，为保证测试工件的正确运行，必须开启导出模式。</p>
<h3 id="导出模式"><a href="#导出模式" class="headerlink" title="导出模式"></a>导出模式</h3><p>编译后，Room将数据库的模式信息导出到JSON文件中。要导出模式，在build.gradle文件中设置room.schemaLocation注解处理器属性，如下面的代码片段所示：</p>
<p>build.gradle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [&quot;room.schemaLocation&quot;:</span><br><span class="line">                             &quot;$projectDir/schemas&quot;.toString()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们应该把导出的 json 文件加入到版本控制中，它记录了数据库的模式历史，它能让Room在测试时创建老版本的数据库。</p>
<p>为了测试迁移，增加 Room 的测试工件依赖，并设置数据库模式文件地址，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        androidTest.assets.srcDirs += files(&quot;$projectDir/schemas&quot;.toString())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试包提供了一个MigrationTestHelper类，它可以读取这些模式文件。它实现了 JUnit4 的 TestRule 接口，它能够管理已经创建的数据库。</p>
<p>下面是一个简单的测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(AndroidJUnit4.class)</span><br><span class="line">public class MigrationTest &#123;</span><br><span class="line">    private static final String TEST_DB = &quot;migration-test&quot;;</span><br><span class="line"></span><br><span class="line">    @Rule</span><br><span class="line">    public MigrationTestHelper helper;</span><br><span class="line"></span><br><span class="line">    public MigrationTest() &#123;</span><br><span class="line">        helper = new MigrationTestHelper(InstrumentationRegistry.getInstrumentation(),</span><br><span class="line">                MigrationDb.class.getCanonicalName(),</span><br><span class="line">                new FrameworkSQLiteOpenHelperFactory());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void migrate1To2() throws IOException &#123;</span><br><span class="line">        SupportSQLiteDatabase db = helper.createDatabase(TEST_DB, 1);</span><br><span class="line"></span><br><span class="line">        // db has schema version 1. insert some data using SQL queries.</span><br><span class="line">        // You cannot use DAO classes because they expect the latest schema.</span><br><span class="line">        db.execSQL(...);</span><br><span class="line"></span><br><span class="line">        // Prepare for the next version.</span><br><span class="line">        db.close();</span><br><span class="line"></span><br><span class="line">        // Re-open the database with version 2 and provide</span><br><span class="line">        // MIGRATION_1_2 as the migration process.</span><br><span class="line">        db = helper.runMigrationsAndValidate(TEST_DB, 2, true, MIGRATION_1_2);</span><br><span class="line"></span><br><span class="line">        // MigrationTestHelper automatically verifies the schema changes,</span><br><span class="line">        // but you need to validate that the data was migrated properly.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="测试数据库"><a href="#测试数据库" class="headerlink" title="测试数据库"></a>测试数据库</h2><p>使用 Room 创建数据库时，验证数据库和用户数据的稳定性非常重要。</p>
<p>测试数据库有两种方法</p>
<ul>
<li>在Android 设备上</li>
<li>在开发主机上（不推荐）</li>
</ul>
<p>关于测试指定数据库升级的信息 上面已经说过了。</p>
<p><em>注意：在测试时，Room允许创建Dao的模拟实例。这样的话，如果不是测试数据库本身就不需要创建完整的数据库，这个功能是很好的，Dao不会泄露数据库的任何信息</em></p>
<h3 id="在设备上测试"><a href="#在设备上测试" class="headerlink" title="在设备上测试"></a>在设备上测试</h3><p>测试数据库实现的推荐方法是编写在Android设备上运行的JUnit测试，由于这些测试不需要创建活动，它们应该比UI测试更快执行。</p>
<p>在设置测试时，应该创建数据库的内存中版本，以使测试更加密封，如以下示例所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(AndroidJUnit4.class)</span><br><span class="line">public class SimpleEntityReadWriteTest &#123;</span><br><span class="line">    private UserDao mUserDao;</span><br><span class="line">    private TestDatabase mDb;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void createDb() &#123;</span><br><span class="line">        Context context = InstrumentationRegistry.getTargetContext();</span><br><span class="line">        mDb = Room.inMemoryDatabaseBuilder(context, TestDatabase.class).build();</span><br><span class="line">        mUserDao = mDb.getUserDao();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After</span><br><span class="line">    public void closeDb() throws IOException &#123;</span><br><span class="line">        mDb.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void writeUserAndReadInList() throws Exception &#123;</span><br><span class="line">        User user = TestUtil.createUser(3);</span><br><span class="line">        user.setName(&quot;george&quot;);</span><br><span class="line">        mUserDao.insert(user);</span><br><span class="line">        List&lt;User&gt; byName = mUserDao.findUsersByName(&quot;george&quot;);</span><br><span class="line">        assertThat(byName.get(0), equalTo(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="在电脑上测试"><a href="#在电脑上测试" class="headerlink" title="在电脑上测试"></a>在电脑上测试</h3><p>Room使用SQLite Support Library，它提供了与Android Framework类中的接口相匹配的接口。此支持允许您传递支持库的自定义实现以测试数据库查询。</p>
<p>注意：即使此设置允许您的测试运行速度非常快，也不建议这样做，因为设备上运行的SQLite版本以及用户的设备可能与主机上的版本不匹配</p>
<h2 id="使用Room引用复杂数据"><a href="#使用Room引用复杂数据" class="headerlink" title="使用Room引用复杂数据"></a>使用Room引用复杂数据</h2><p>Room提供了原始和包装类型转换的功能，但是不允许实体间对象引用。这里会解释为什么不支持对象引用和怎么使用类型转换器。</p>
<h3 id="使用类型转换器"><a href="#使用类型转换器" class="headerlink" title="使用类型转换器"></a>使用类型转换器</h3><p>有时候你想存储自定义的数据类型在数据库的单个列中。这就需要为自定义类型添加一个类型转换器，这个转换器会将自定类型转换为Room能够认识的原始类型。</p>
<p>例如，我想保存Date类型的实例，我可以编写下面的类型转换器来在数据库中存储等效的Unix时间戳：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Converters &#123;</span><br><span class="line">    @TypeConverter</span><br><span class="line">    public static Date fromTimestamp(Long value) &#123;</span><br><span class="line">        return value == null ? null : new Date(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @TypeConverter</span><br><span class="line">    public static Long dateToTimestamp(Date date) &#123;</span><br><span class="line">        return date == null ? null : date.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的例子定义了两个函数，一个是将Date对象转换为Long对象，另一个则相反，从Long对象到Date对象。因为，Room是知道怎么持久化Long对象的，所以能用这个转换器将Date对象持久化。</p>
<p>接下来，在AppDataBase类添加注解 @TypeConverters 这样AppDataBase中的Dao和实体就都能使用这个转换器了。</p>
<p><em>AppDatabase.java</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Database(entities = &#123;User.class&#125;, version = 1)</span><br><span class="line">@TypeConverters(&#123;Converters.class&#125;)</span><br><span class="line">public abstract class AppDatabase extends RoomDatabase &#123;</span><br><span class="line">    public abstract UserDao userDao();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样就可以使用自定义类型了，就像使用其他原始类型一样。</p>
<p><em>User.java</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class User &#123;</span><br><span class="line">    ...</span><br><span class="line">    private Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>UserDao.java</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    ...</span><br><span class="line">    @Query(&quot;SELECT * FROM user WHERE birthday BETWEEN :from AND :to&quot;)</span><br><span class="line">    List&lt;User&gt; findUsersBornBetweenDates(Date from, Date to);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还可以将@TypeConverters限制到不同的作用域,包括个体实体，DAO和DAO方法。关于 <code>@TypeConverters</code>更详细的介绍 请查看文档 <a href="https://developer.android.com/reference/android/arch/persistence/room/TypeConverters.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/arch/persistence/room/TypeConverters.html</a></p>
<h3 id="理解Room不允许使用对象引用的原因"><a href="#理解Room不允许使用对象引用的原因" class="headerlink" title="理解Room不允许使用对象引用的原因"></a>理解Room不允许使用对象引用的原因</h3><p><strong>关键问题：Room不允许实体类之间的对象引用。相反，您必须明确您的应用需要的数据。</strong></p>
<p>将数据库中的关系映射到相应的对象模型是常见的做法，并且在服务器端运行良好。即使程序在访问时加载字段，服务器仍然运行良好。</p>
<p>但是，在客户端，这种延迟加载不可行，因为它通常发生在UI线程上，并且在UI线程中查询磁盘上的信息会产生严重的性能问题。UI线程通常具有约16 ms的时间来计算和绘制活动的更新布局，因此即使查询只需要5 ms，仍然可能您的应用程序将耗尽时间来绘制框架，从而导致明显的视觉干扰。如果有单独的事务并行运行，或者设备正在运行其他磁盘密集型任务，则查询可能需要更多时间才能完成。但是，如果不使用延迟加载，则应用会获取比所需更多的数据，从而导致内存消耗问题。</p>
<p>对象关系映射通常将这个决定留给开发人员，以便他们可以为他们的应用程序的用例做最好的事情。开发人员通常决定在应用程序和用户界面之间共享模型。然而，这种解决方案并不能很好地扩展，因为随着UI的变化，共享模型会产生一些难以让开发人员预测和调试的问题。</p>
<p>例如，考虑加载一个Book对象列表的UI，每个书都有一个Author对象。最初可能会将查询设计为使用延迟加载，以便Book的实例使用getAuthor（）方法返回作者。过了一段时间，你意识到你也需要在应用程序的用户界面中显示作者姓名。您可以轻松地添加方法调用，如以下代码片段所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authorNameTextView.setText(user.getAuthor().getName());</span><br></pre></td></tr></table></figure></p>
<p>但是，这个看起来无害的更改会导致在主线程上查询Author表。</p>
<p>如果提前查询作者信息，如果不再需要数据，则很难更改数据的加载方式。例如，如果您的应用程序的用户界面不再需要显示作者信息，则您的应用程序会有效地加载不再显示的数据，从而浪费宝贵的内存空间。如果作者类引用另一个表（如Books），则应用程序的效率会进一步降低。</p>
<p>要使用Room同时引用多个实体，需要创建一个包含每个实体的POJO，然后编写一个查询来加入相应的表。这种结构良好的模型与Room强大的查询验证功能相结合，可让您的应用在加载数据时消耗更少的资源，从而改善应用的性能和用户体验。</p>
<blockquote>
<p>end</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle 将 library module 发布到本地仓库，并添加本地依赖]]></title>
      <url>http://blog.skymxc.com/2018/04/10/push-library-to-local-maven/</url>
      <content type="html"><![CDATA[<h1 id="将module发布到本地maven仓库"><a href="#将module发布到本地maven仓库" class="headerlink" title="将module发布到本地maven仓库"></a>将module发布到本地maven仓库</h1><ol>
<li>在本地准备一个目录，当做maven仓库</li>
<li>在项目的 <code>gradle.properties</code> 配置仓库信息(主要是POM文件信息)</li>
<li>在module的   <code>build.gradle</code> 配置插件，任务，及代码信息</li>
<li>执行发布任务</li>
<li>本地 <code>maven</code> 查看</li>
<li>引用本地仓库中的包</li>
</ol>
<h2 id="1-准备目录"><a href="#1-准备目录" class="headerlink" title="1. 准备目录"></a>1. 准备目录</h2><p>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E:\libs\localMaven</span><br></pre></td></tr></table></figure>
<h2 id="2-配置仓库信息"><a href="#2-配置仓库信息" class="headerlink" title="2. 配置仓库信息"></a>2. 配置仓库信息</h2><p>在项目的 <code>gradle.properties</code> 中配置属性信息<br>Example：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 包信息</span><br><span class="line">PROJ_GROUP= 一般为公司域名</span><br><span class="line">PROJ_VERSION=版本</span><br><span class="line"></span><br><span class="line"># 项目的描述</span><br><span class="line">PROJ_WEBSITEURL= 项目地址</span><br><span class="line">PROJ_ISSUETRACKERURL= 提 issue 地址</span><br><span class="line">PROJ_DESCRIPTION= 项目介绍</span><br><span class="line"></span><br><span class="line"># Licence信息 这部分是固定的</span><br><span class="line">PROJ_LICENCE_NAME=The Apache Software License, Version 2.0</span><br><span class="line">PROJ_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt</span><br><span class="line">PROJ_LICENCE_DEST=repo</span><br><span class="line"></span><br><span class="line"># Developer 信息 这里是开发者信息</span><br><span class="line">DEVELOPER_ID=mxc</span><br><span class="line">DEVELOPER_NAME=孟祥超</span><br><span class="line">DEVELOPER_EMAIL=skymxc@foxmail.com</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<h2 id="3-为-module-配置插件，任务，代码信息"><a href="#3-为-module-配置插件，任务，代码信息" class="headerlink" title="3. 为 module 配置插件，任务，代码信息"></a>3. 为 <code>module</code> 配置插件，任务，代码信息</h2><p>为了优雅，在 <code>module</code> 下创建一个 <code>gradle.properties</code> 文件设置属性</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PROJ_NAME=依赖名字 localrepo</span><br><span class="line">PROJ_ARTIFACTID=所属分类</span><br><span class="line"></span><br><span class="line">LOCAL_REPO_URL= 本地仓库的地址：file://+本地路径 ；例如 file://E:/libs/localMaven</span><br></pre></td></tr></table></figure>
<p>在 <code>module</code> 的 <code>build.gradle</code> 中使用 <code>maven</code> 插件 定义上传任务</p>
<p>使用 <code>maven</code> 插件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;maven&apos;</span><br></pre></td></tr></table></figure>
<p>定义上传任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories.mavenDeployer &#123;</span><br><span class="line">        repository(url: LOCAL_REPO_URL)</span><br><span class="line">        pom.groupId = PROJ_GROUP</span><br><span class="line">        pom.artifactId = PROJ_ARTIFACTID</span><br><span class="line">        pom.version = android.defaultConfig.versionName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Example</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'maven'</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">26</span></span><br><span class="line">    buildToolsVersion <span class="string">"26.0.2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">19</span></span><br><span class="line">        targetSdkVersion <span class="number">26</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            shrinkResources <span class="literal">true</span></span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repositories&#123;</span><br><span class="line">        flatDir&#123;</span><br><span class="line">            dirs<span class="string">'libs'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories.mavenDeployer &#123;</span><br><span class="line">        repository(<span class="string">url:</span> LOCAL_REPO_URL)</span><br><span class="line">        pom.groupId = PROJ_GROUP</span><br><span class="line">        pom.artifactId = PROJ_ARTIFACTID</span><br><span class="line">        pom.version = android.defaultConfig.versionName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-执行命令-开始任务"><a href="#4-执行命令-开始任务" class="headerlink" title="4. 执行命令 开始任务"></a>4. 执行命令 开始任务</h2><p> <em>我这里是 <code>windows</code> 系统</em> 故使用 <code>gradlew</code><br> <strong>localrepo</strong> 就是本地的 <code>module</code><br>在 <code>Android studio</code> 的 <code>Terminal</code> 窗口 输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew -p localrepo clean build uploadArchives --info</span><br></pre></td></tr></table></figure></p>
<h2 id="5-如果顺利执行成功的话-本地maven-目录中现在应该已经有了"><a href="#5-如果顺利执行成功的话-本地maven-目录中现在应该已经有了" class="headerlink" title="5. 如果顺利执行成功的话 本地maven 目录中现在应该已经有了"></a>5. 如果顺利执行成功的话 本地<code>maven</code> 目录中现在应该已经有了</h2><h2 id="6-引用本地依赖"><a href="#6-引用本地依赖" class="headerlink" title="6. 引用本地依赖"></a>6. 引用本地依赖</h2><p>添加本地的 <code>maven</code> 地址 在项目的  <code>build.gradle</code></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        google()</span><br><span class="line">        maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">'file://E:/libs/localMaven/'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加依赖 在 <code>moudle</code> 的 <code>build.gradle</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'cn.sintoon:localrepo:1.0'</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>end</p>
</blockquote>
<p>我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1z0rlkggpcdck" target="_blank" rel="noopener">https://cloud.tencent.com/developer/support-plan?invite_code=1z0rlkggpcdck</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中的线程]]></title>
      <url>http://blog.skymxc.com/2017/08/27/thread-in-Android/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>Android 中线程的使用</strong></p>
</blockquote>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><em>Android官网文档-&gt;<a href="https://developer.android.com/guide/components/processes-and-threads.html?hl=zh-cn#Threads" target="_blank" rel="noopener">https://developer.android.com/guide/components/processes-and-threads.html?hl=zh-cn#Threads</a></em></p>
<blockquote>
<p>应用启动时，系统会为应用创建一个线程，称为主线程；它负责UI的绘制以及UI的事件响应交互，也称为UI线程；<br>系统不会为每个组件实例创建单独的线程，同一进程中的所有组件都在主线程实例化，并且每个组件的资源调用都由主线程分配，因此响应系统回调都在主线程进行。<br>因为主线程要处理UI的绘制及事件的交互，所以主线程中不能进行耗时的操作（网络访问，数据库操作），一旦主线程进行耗时操作就会出现阻塞，UI事件就没办法响应了，就会出现ANR，这是非常不友好的。</p>
</blockquote>
<p>Android UI是非线程安全的，所以关于UI的操作只能在UI线程操作，所以Android单线程模式必须遵守两条规则</p>
<ol>
<li>不能阻塞UI线程</li>
<li>UI操作要在UI线程，不要在 UI 线程之外访问 Android UI 工具包</li>
</ol>
<h3 id="工作线程"><a href="#工作线程" class="headerlink" title="工作线程"></a>工作线程</h3><blockquote>
<p>为了保证应用的顺畅，所有耗时的操作都在工作线程中进行。</p>
</blockquote>
<p>遵循上述的两条规则，不能再UI线程之外的线程访问UI，但是网络访问结果是在工作线程，要将结果填充到UI中怎么办呢，Android提供了几种方法在工作线程中访问UI</p>
<ul>
<li>Activity.runOnUiThread(Runnable)</li>
<li>View.post(Runnable)</li>
<li>View.postDelayed(Runnable, long)</li>
<li>Handler</li>
</ul>
<p><em>还有一种方式 AsyncTask;</em></p>
<h3 id="线程相关API"><a href="#线程相关API" class="headerlink" title="线程相关API"></a>线程相关API</h3><ul>
<li>Runnable</li>
<li>Thread</li>
<li>Callable<v></v></li>
<li>Future&lt;?&gt;</li>
<li>RunnableFuture<v></v></li>
<li>FutureTask<v></v></li>
<li>Executor</li>
<li>ExecutorService</li>
<li>ThreadPoolExecutor</li>
<li>Executors</li>
</ul>
<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><blockquote>
<p>有两种方式创建一个线程。</p>
</blockquote>
<ol>
<li>继承 Thread类</li>
<li><p>实现 Runnable接口</p>
<blockquote>
<p>继承Thread类 重写 run方法，在调用start()后JVM会自动调用run()方法</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 通过继承Thread 创建一个Thread</span><br><span class="line"> */</span><br><span class="line">class MyThread extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    public MyThread(String name) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重写run方法 JVM会自动调用此方法</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">       // logic code</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重载（Overload）run()方法 和普通的方法一样，并不会在该线程的start()方法被调用后被JVM自动运行</span><br><span class="line">     *</span><br><span class="line">     * @param str</span><br><span class="line">     */</span><br><span class="line">    public void run(String str) &#123;</span><br><span class="line">        Log.e(&quot;run&quot;, str + &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实现 Runnable接口 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过实现 Runnable 创建一个线程</span><br><span class="line"> */</span><br><span class="line">class MyRunnable implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * JVM会自动调用此方法</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">       //logic code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><blockquote>
<p>继承Thread方式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread thread0 = new MyThread();</span><br><span class="line"> thread0.start();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实现 Runnable方式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyRunnable myRunnable = new MyRunnable();</span><br><span class="line">Thread thread1 = new Thread(myRunnable);</span><br><span class="line">thread1.start();</span><br></pre></td></tr></table></figure>
<h3 id="Runnable和Thread两种方式的区别和联系"><a href="#Runnable和Thread两种方式的区别和联系" class="headerlink" title="Runnable和Thread两种方式的区别和联系"></a>Runnable和Thread两种方式的区别和联系</h3><blockquote>
<p>其实这块主要是围绕着接口和抽象类的区别以及一些设计原则而言的。</p>
</blockquote>
<ol>
<li>Java是单继承的，你继承了Thread类再也无法继承别的类。</li>
<li>Java虽然是单继承但是可以实现多接口的，即使你实现Runnable，你也可以实现别的接口。</li>
<li>在面向对象编程中，继承一个类就意味着要使用或者改善某些功能，如果不准备改善Thread提供的封装好的功能，使用Runnable更好。</li>
<li>Runnable接口表示一个任务，可以被任意一个普通线程，线程池或者其他方式执行。逻辑上的分离，Runnable比Thread更好。</li>
<li>将任务分离为Runnable，就可以重用或者通过其他方式执行它，Thread一旦完成就无法重新启动了。</li>
<li>线程池的接口接收的参数为Runnable</li>
<li>用Runnable能够代表一个线程就不必继承Thread，那样就额外的继承了Thread的全部方法</li>
<li>继承Thread，你就必须为每个线程都创建一个实例，然后为每个实例分配内存。</li>
<li>写一个接口而不是实现，会让程序更容易扩展。</li>
</ol>
<p><em>Thread类也是实现了Runnable接口</em></p>
<blockquote>
<p>参考资料</p>
</blockquote>
<ul>
<li><a href="https://www.linkedin.com/pulse/20140917120728-90925576-difference-between-implements-runnable-and-extends-thread-in-java" target="_blank" rel="noopener">https://www.linkedin.com/pulse/20140917120728-90925576-difference-between-implements-runnable-and-extends-thread-in-java</a></li>
<li><a href="https://my.oschina.net/leejun2005/blog/483999" target="_blank" rel="noopener">https://my.oschina.net/leejun2005/blog/483999</a></li>
<li>这个重点看评论-&gt;<a href="http://mars914.iteye.com/blog/1508429" target="_blank" rel="noopener">http://mars914.iteye.com/blog/1508429</a></li>
</ul>
<h2 id="资源共享及同步问题"><a href="#资源共享及同步问题" class="headerlink" title="资源共享及同步问题"></a>资源共享及同步问题</h2><blockquote>
<p>关于多线程资源共享，多线程并发操作有随机性，不能保证每个线程都顺序的去访问某个资源，在多个线程同时去访问一个资源的时候要进行资源的同步.</p>
</blockquote>
<p>经典的卖票例子</p>
<h3 id="资源共享"><a href="#资源共享" class="headerlink" title="资源共享"></a>资源共享</h3><blockquote>
<p>资源共享，多个线程并发执行访问同一个资源，才是共享的资源。</p>
</blockquote>
<p><em>票</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 票</span><br><span class="line"> */</span><br><span class="line">class Tickets &#123;</span><br><span class="line">    int num = 5;</span><br><span class="line"></span><br><span class="line">    public int get() &#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set(int num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>卖票程序</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 卖票 程序</span><br><span class="line"> */</span><br><span class="line">class SaleRunnable implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private Tickets tickets;</span><br><span class="line"></span><br><span class="line">    public SaleRunnable(Tickets tickets) &#123;</span><br><span class="line">        this.tickets = tickets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (tickets.get() &gt; 0) &#123;</span><br><span class="line">            Log.e(Thread.currentThread().getName(), &quot;销售第&quot; + tickets.get() + &quot;张，剩余&quot; + (tickets.get() - 1) + &quot;张&quot;);</span><br><span class="line">            tickets.set(tickets.get() - 1);</span><br><span class="line">            try &#123;</span><br><span class="line">                //延迟 1000</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(Thread.currentThread().getName(), &quot;没票了&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>卖票</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//票资源</span><br><span class="line">Tickets tickets = new Tickets();</span><br><span class="line">SaleRunnable saleRunnable = new SaleRunnable(tickets);</span><br><span class="line">//开三个窗口使用同一程序去卖票 </span><br><span class="line">new Thread(saleRunnable, &quot;窗口零&quot;).start();</span><br><span class="line">new Thread(saleRunnable, &quot;窗口一&quot;).start();</span><br><span class="line">new Thread(saleRunnable, &quot;窗口二&quot;).start();</span><br></pre></td></tr></table></figure>
<p><em>卖票结果</em></p>
<p>多线程并发执行的结果就是 多个窗口同时售票，同一时间销售掉了同一个票，尴尬了，一个票卖了多次</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">08-22 14:23:41.066 E/窗口零: 销售第5张，剩余4张</span><br><span class="line">08-22 14:23:41.066 E/窗口一: 销售第4张，剩余3张</span><br><span class="line">08-22 14:23:41.076 E/窗口二: 销售第3张，剩余2张</span><br><span class="line">08-22 14:23:42.066 E/窗口零: 销售第2张，剩余1张</span><br><span class="line">08-22 14:23:42.076 E/窗口二: 销售第2张，剩余1张</span><br><span class="line">08-22 14:23:42.076 E/窗口一: 销售第2张，剩余1张</span><br><span class="line">08-22 14:23:43.076 E/窗口一: 没票了</span><br><span class="line">08-22 14:23:43.076 E/窗口二: 没票了</span><br><span class="line">08-22 14:23:43.076 E/窗口零: 没票了</span><br><span class="line"></span><br><span class="line">08-22 14:24:29.866 E/窗口零: 销售第5张，剩余4张</span><br><span class="line">08-22 14:24:29.866 E/窗口一: 销售第4张，剩余3张</span><br><span class="line">08-22 14:24:29.866 E/窗口二: 销售第3张，剩余2张</span><br><span class="line">08-22 14:24:30.866 E/窗口零: 销售第2张，剩余1张</span><br><span class="line">08-22 14:24:30.866 E/窗口二: 销售第1张，剩余0张</span><br><span class="line">08-22 14:24:30.866 E/窗口一: 销售第2张，剩余1张</span><br><span class="line">08-22 14:24:31.866 E/窗口零: 没票了</span><br><span class="line">08-22 14:24:31.866 E/窗口二: 没票了</span><br><span class="line">08-22 14:24:31.866 E/窗口一: 没票了</span><br><span class="line"></span><br><span class="line">08-22 14:24:51.906 E/窗口二: 销售第5张，剩余4张</span><br><span class="line">08-22 14:24:51.906 E/窗口一: 销售第4张，剩余3张</span><br><span class="line">08-22 14:24:51.906 E/窗口零: 销售第3张，剩余2张</span><br><span class="line">08-22 14:24:52.906 E/窗口二: 销售第2张，剩余1张</span><br><span class="line">08-22 14:24:52.906 E/窗口一: 销售第2张，剩余1张</span><br><span class="line">08-22 14:24:52.916 E/窗口零: 没票了</span><br><span class="line">08-22 14:24:53.916 E/窗口二: 没票了</span><br><span class="line">08-22 14:24:53.916 E/窗口一: 没票了</span><br></pre></td></tr></table></figure>
<h3 id="资源同步"><a href="#资源同步" class="headerlink" title="资源同步"></a>资源同步</h3><blockquote>
<p>Java 同步块（synchronized block）用来标记方法或者代码块是同步的</p>
</blockquote>
<p><em>java中每个对象都对应于一个称为“互斥锁”的标志，这个标志用来保证在任何时刻，只能有一个线程访问该对象。<br>如果系统中的资源当前没有被使用，线程可以得到“互斥锁”，即线程可以得到资源的使用权。<br>当线程执行完毕后，他放弃“互斥锁”，如果一个线程获得“互斥锁”时，其余的线程就必须等待当前线程结束并放弃“互斥锁”。<br>在java中，提供了关键字synchronized来实现对象的“互斥锁”关系。<br><strong>当某个对象或方法用关键字synchronized修饰时，表明该对象或方法在任何一个时刻只能有一个线程访问。</strong><br>如果synchronized用在类的声明中，表明该类中的所有方法都是synchronized的。</em></p>
<p>在这个例子中，我们只需要将“票”这个资源同步即可</p>
<p>多个线程都是访问的这一个实例，所以同步这个实例方法，就可以了；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 卖票 程序</span><br><span class="line"> */</span><br><span class="line">class SaleRunnable implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private Tickets tickets;</span><br><span class="line"></span><br><span class="line">    public SaleRunnable(Tickets tickets) &#123;</span><br><span class="line">        this.tickets = tickets;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if (sale()) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                //延迟 1000</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(Thread.currentThread().getName(), &quot;没票了&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private synchronized boolean sale() &#123;</span><br><span class="line">        if (tickets.get() &gt; 0) &#123;</span><br><span class="line">            Log.e(Thread.currentThread().getName(), &quot;销售第&quot; + tickets.get() + &quot;张，剩余&quot; + (tickets.get() - 1) + &quot;张&quot;);</span><br><span class="line">            tickets.set(tickets.get() - 1);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 卖票窗口</span><br><span class="line"> */</span><br><span class="line">class SaleThread extends Thread &#123;</span><br><span class="line"></span><br><span class="line">    private Tickets tickets;</span><br><span class="line"></span><br><span class="line">    public SaleThread(Tickets ti, String name) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">        tickets = ti;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            //同步这个资源</span><br><span class="line">            synchronized (tickets) &#123;</span><br><span class="line">                if (tickets.get() &gt; 0) &#123;</span><br><span class="line">                    Log.e(Thread.currentThread().getName(), &quot;销售第&quot; + tickets.get() + &quot;张，剩余&quot; + (tickets.get() - 1) + &quot;张&quot;);</span><br><span class="line">                    tickets.set(tickets.get() - 1);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                //延迟 1000</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.e(Thread.currentThread().getName(), &quot;没票了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="http://ifeve.com/java-concurrency-thread-directory/" target="_blank" rel="noopener">http://ifeve.com/java-concurrency-thread-directory/</a></li>
<li><a href="http://ifeve.com/synchronized-blocks/" target="_blank" rel="noopener">http://ifeve.com/synchronized-blocks/</a></li>
<li><a href="http://student-lp.iteye.com/blog/2083170" target="_blank" rel="noopener">http://student-lp.iteye.com/blog/2083170</a></li>
<li><a href="http://www.cnblogs.com/dennisit/archive/2013/02/24/2925288.html" target="_blank" rel="noopener">http://www.cnblogs.com/dennisit/archive/2013/02/24/2925288.html</a></li>
<li><a href="http://lanvis.blog.163.com/blog/static/26982162009798422547/" target="_blank" rel="noopener">http://lanvis.blog.163.com/blog/static/26982162009798422547/</a></li>
</ul>
<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><blockquote>
<ol>
<li>新生状态（new）</li>
</ol>
</blockquote>
<p>当一个线程的实例被创建即使用<code>new</code>关键字后台Thread类或者其子类创建一个线程对象后，此时该线程就处于新生状态，处于新生状态的线程有自己的内存空间，但该线程并没有运行，此时线程还不是活着的（not alive）</p>
<blockquote>
<ol>
<li>就绪状态（Runnable）</li>
</ol>
</blockquote>
<p>通过调用线程实例的<code>start()</code>方法来启动线程使线程进入就绪状态(runnable);处于就绪状态的线程已经具备了运行条件，但还没被分配到CPU就是不一定会被立即执行，此时处于线程就绪队列，等待线程为期分配CPU，等待状态不是执行状态；此时线程是活着的（alive）；</p>
<blockquote>
<ol>
<li>运行状态（Running）</li>
</ol>
</blockquote>
<p>一旦获取CPU（被JVM选中），线程就进入运行（running）状态，线程<code>run()</code>方法才开始被执行；在运行状态的线程执行自己的run()方法中的操作，知道调用其他的方法而终止、或者等待某种资源而阻塞、或者完成任务而死亡；如果在给定的时间片内没有执行结束，就会被系统给换下来回到线程的就绪状态；此时线程是活着的（alive）；</p>
<blockquote>
<ol>
<li>阻塞状态（Blocked）</li>
</ol>
</blockquote>
<p>通过调用<code>join()</code>,<code>sleep()</code>,<code>wait()</code>或者资源被占用使线程处于阻塞(blocked)状态；处于Blocked状态的线程仍然是活着的（alive）；</p>
<blockquote>
<ol>
<li>死亡状态（Dead）</li>
</ol>
</blockquote>
<p>当一个线程的<code>run()</code>方法运行完毕或被中断或被异常退出，该线程到达死亡(dead)状态。此时可能仍然存在一个该Thread的实例对象，但该Thread已经不可能在被作为一个可被独立执行的线程对待了，线程的独立的call stack已经被dissolved。一旦某一线程进入Dead状态，他就再也不能进入一个独立线程的生命周期了。对于一个处于Dead状态的线程调用start()方法，会出现一个运行期(runtime exception)的异常；处于Dead状态的线程不是活着的（not alive）。</p>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="http://www.cnblogs.com/DreamSea/archive/2012/01/11/JavaThread.html" target="_blank" rel="noopener">http://www.cnblogs.com/DreamSea/archive/2012/01/11/JavaThread.html</a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/5603277.html" target="_blank" rel="noopener">http://www.cnblogs.com/whoislcj/p/5603277.html</a></li>
<li><a href="http://student-lp.iteye.com/blog/2083170" target="_blank" rel="noopener">http://student-lp.iteye.com/blog/2083170</a></li>
</ul>
<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><blockquote>
<p>Java中常规的通信方式这里我就不说了，看一下Android的消息机制</p>
</blockquote>
<p>Java常规的通信方式传送门-&gt;<a href="http://ifeve.com/thread-signaling" target="_blank" rel="noopener">http://ifeve.com/thread-signaling</a></p>
<p><em>Android中的消息机制可以用于线程间通信也可用于在各个组件间通信,这里只总结一下怎么在线程间使用</em></p>
<p>消息机制中重要的API</p>
<ul>
<li>Message 线程间通信就是在传递消息，Message就是消息的载体。常用的有四个字段：arg1，arg2，what，obj。obj可以携带Object对象，其余三个可以携带整形数据</li>
<li>MessageQueue 消息队列，它主要用于存放所有通过Handler发送的消息（也就是一个个Message），这部分的消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个MessageQueue对象。</li>
<li>Looper 每个线程通过Handler发送的消息都保存在，MessageQueue中，Looper通过调用loop()的方法，就会进入到一个无限循环当中，然后每当发现MessageQueue中存在一条消息，就会将它取出，并传递到Handler的handleMessage()方法中。</li>
<li>Handler 发送消息，处理消息</li>
<li>Thread 线程 每个线程中只会有一个Looper对象。</li>
</ul>
<blockquote>
<p>运行机制</p>
</blockquote>
<p>在哪个Thread中创建Handler，默认情况下Handler就会获取哪个线程中的Looper（前提是Looper创建好了）；handler发送消息就是将消息发送到了自己持有的这个Looper对象里；<br>Looper内有一个MessageQueue，消息就存放在队列里，一旦Looper的<code>loop()</code>方法被调用就会开启无限循环模式，一直循环遍历这个队列，从中取Handler发送的消息，没有消息就阻塞；一旦有消息就唤醒线程取出来；<br>从MessageQueue中取出的消息，会调用本身target持有的handler实例来处理这个消息;</p>
<p><strong>综上所述，线程间通信handler就可以实现；</strong></p>
<blockquote>
<p>主线程给工作线程发消息</p>
</blockquote>
<p>想要在主线程给工作线程发消息，我们就得持有在工作线程中创建的handler；<br>而创建handler之前必须先初始化一下Looper对象；<br>handler创建完之后就开启Looper的无限循环来等待消息</p>
<p><strong>创建一个线程并创建一个handler</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Handler handlerA = null;</span><br><span class="line"></span><br><span class="line">   class ThreadA extends Thread implements Handler.Callback &#123;</span><br><span class="line"></span><br><span class="line">       public ThreadA() &#123;</span><br><span class="line">           super(&quot;ThreadA&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public void run() &#123;</span><br><span class="line">           //创建此线程的Looper对象 ，一个线程只能有一个，所以此方法只能调用一次</span><br><span class="line">           Looper.prepare();</span><br><span class="line">           handlerA = new Handler(this);</span><br><span class="line">           //开始循环遍历</span><br><span class="line">           Looper.loop();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public boolean handleMessage(Message msg) &#123;</span><br><span class="line">           switch (msg.what) &#123;</span><br><span class="line">               case 100:</span><br><span class="line">                   Log.e(&quot;handleMessage&quot;, Thread.currentThread().getName() + &quot;;src-&gt;&quot; + msg.obj);</span><br><span class="line">                   break;</span><br><span class="line">           &#125;</span><br><span class="line">           return false;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用handlerA发送消息</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//创建一个消息</span><br><span class="line">Message msg = new Message();</span><br><span class="line">msg.what = 100; //标识你这消息想要干啥</span><br><span class="line">msg.obj = Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 因为handler 里持有所在线程的Looper，所有handler发送的消息会在所在线程中执行</span><br><span class="line"> */</span><br><span class="line">//发送给A线程</span><br><span class="line">handlerA.sendMessage(msg);</span><br></pre></td></tr></table></figure>
<p><strong>看一个log</strong> 处理线程是ThreadA，消息来源是Main线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">08-23 16:26:02.609 E/handleMessage: ThreadA;src-&gt;main</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>工作线程发给主线程</p>
</blockquote>
<p>与上面的同理，想要给主线程发送消息，拿到主线程的handler就可以了；</p>
<p>因为点击事件是在UI线程中响应的，所以想让工作线程给主线程发送一个消息就麻烦一点，我这里为了测试做了个中转，先给B线程发送一个信号，B接到这个信号就给主线程发消息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class ThreadB extends Thread implements Handler.Callback &#123;</span><br><span class="line"></span><br><span class="line">    public ThreadB() &#123;</span><br><span class="line">        super(&quot;ThreadB&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        handlerB = new Handler(this);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean handleMessage(Message msg) &#123;</span><br><span class="line">        switch (msg.what) &#123;</span><br><span class="line">            case 100:</span><br><span class="line">                Log.e(&quot;handleMessage&quot;, Thread.currentThread().getName() + &quot;;src-&gt;&quot; + msg.obj);</span><br><span class="line">                break;</span><br><span class="line">            case 101:   //给main发送一个消息</span><br><span class="line">                Message message = new Message();</span><br><span class="line">                message.what = 100;</span><br><span class="line">                message.obj = Thread.currentThread().getName();</span><br><span class="line">                handler.sendMessage(message);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在主线程创建的handler </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Main 的handler</span><br><span class="line"> * 程序启动的时候就为Main线程创建了Looper</span><br><span class="line"> */</span><br><span class="line">Handler handler = new Handler(new Handler.Callback() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean handleMessage(Message msg) &#123;</span><br><span class="line">        Log.e(&quot;handleMessage&quot;, Thread.currentThread().getName() + &quot;;src-&gt;&quot; + msg.obj);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><em>主线程的handler创建时没有提前创建Looper也没有调用Looper的<code>loop()</code>方法，是因为程序在启动的时候已经为主线程创建好了Looper，并且调用了<code>loop()</code>,一直在等待消息</em></p>
<blockquote>
<p>工作线程给工作线程发消息</p>
</blockquote>
<p>跟上面两个一样，想给哪个线程发消息就要先拿到哪个线程的handler；我这里就不贴代码了；</p>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="http://www.jianshu.com/p/02962454adf7" target="_blank" rel="noopener">http://www.jianshu.com/p/02962454adf7</a></li>
<li><a href="http://www.jianshu.com/p/7657f541c461" target="_blank" rel="noopener">http://www.jianshu.com/p/7657f541c461</a></li>
<li><a href="http://www.cnblogs.com/younghao/p/5116819.html" target="_blank" rel="noopener">http://www.cnblogs.com/younghao/p/5116819.html</a></li>
<li><a href="http://www.voidcn.com/article/p-pmejydob-bbs.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-pmejydob-bbs.html</a></li>
</ul>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><blockquote>
<p>为啥使用线程池</p>
</blockquote>
<ul>
<li>减少频繁创建销毁线程带来的开销</li>
<li>复用创建好的线程</li>
<li>对线程进行简单的管理</li>
</ul>
<p><strong><code>ExecutorService</code>是一个接口，定义了线程池的方法。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public interface ExecutorService extends Executor &#123;</span><br><span class="line"></span><br><span class="line">    void shutdown();//关闭线程池，不再接受新任务，当所有任务都执行完毕后，关闭线程池</span><br><span class="line"></span><br><span class="line">    List&lt;Runnable&gt; shutdownNow(); //关闭线程池，阻止等待任务启动并试图停止当前正在执行的任务，停止接收新的任务，返回处于等待的任务列表</span><br><span class="line"></span><br><span class="line">    boolean isShutdown(); //是否关闭</span><br><span class="line"></span><br><span class="line">    boolean isTerminated();//如果关闭后所有任务都已完成，则返回 true。注意，除非首先调用 shutdown 或 shutdownNow，否则 isTerminated 永不为 true。</span><br><span class="line"></span><br><span class="line">    boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;//等待（阻塞）直到关闭或最长等待时间或发生中断,timeout - 最长等待时间 ,unit - timeout 参数的时间单位  如果此执行程序终止，则返回 true；如果终止前超时期满，则返回 false </span><br><span class="line"></span><br><span class="line">    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; var1); //提交一个返回值的任务用于执行，返回一个表示任务的未决结果的 Future。该 Future 的 get 方法在成功完成时将会返回该任务的结果。</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; Future&lt;T&gt; submit(Runnable var1, T var2); // 提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功完成时将会返回给定的结果</span><br><span class="line"></span><br><span class="line">    Future&lt;?&gt; submit(Runnable var1);///提交一个 Runnable 任务用于执行，并返回一个表示该任务的 Future。该 Future 的 get 方法在成功 完成时将会返回 null</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1) throws InterruptedException; //执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 Future.isDone() 为 true。</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; var1, long var2, TimeUnit var4) throws InterruptedException; //执行给定的任务，当所有任务完成时，返回保持任务状态和结果的 Future 列表。返回列表的所有元素的 Future.isDone() 为 true。</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; var1) throws InterruptedException, ExecutionException; //执行给定的任务，如果在给定的超时期满前某个任务已成功完成（也就是未抛出异常），则返回其结果。一旦正常或异常返回后，则取消尚未完成的任务。</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; var1, long var2, TimeUnit var4) throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>ThreadPoolExecutor</code>具体实现了<code>ExecutorService</code>接口，提供了一系列的参数来配置线程池，熟悉<code>ThreadPoolExecutor</code>可自定义线程池。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                          int maximumPoolSize,</span><br><span class="line">                          long keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          ThreadFactory threadFactory,</span><br><span class="line">                          RejectedExecutionHandler handler) &#123;</span><br></pre></td></tr></table></figure>
<ul>
<li>corePoolSize 核心线程池数量</li>
<li>maximumPoolSize 最大线程数量</li>
<li>keepAliveTime  非核心线程闲置的超时时长，超过这个时长，非核心线程就会被回收,当allowCoreThreadTimeOut为true时，keepAliveTime同样作用于核心线程。</li>
<li>unit 时间单位，常用的为 TimeUnit.MILLISECONDS(毫秒)、TimeUnit.SECONDS（秒）、TimeUnit.MINUTES(分钟)，详情-》<a href="https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/TimeUnit.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/6/docs/api/java/util/concurrent/TimeUnit.html</a></li>
<li>workQueue 线程池中的任务队列，通过execute方法提交的Runnable对象会存储在这个参数中</li>
<li>threadFactory  线程工厂，为线程池提供创建线程的功能，是个接口，提供Thread newThread(Runnable r)方法；通常用默认的<code>Executors.defaultThreadFactory()</code>即可</li>
<li>handler 拒绝策略，当线程池无法执行新任务时，可能由于线程队列已满或无法成功执行任务，这时候 ThreadPoolExecutor会调用handler的 rejectedExecution的方法，默认会抛出RejectedExecutionException</li>
</ul>
<p>Android通过<code>Executors</code>为我们提供了几种线程池</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Executors.newCachedThreadPool()</td>
<td style="text-align:left">缓存线程池，线程数量不定，最大线程数为Integer.MAX_VALUE(相当于任意大),有新任务时会检查是否有空闲线程，没有则会创建线程，空闲线程超过60s会被回收，任何任务都会被立即执行，适合大量的耗时较少任务</td>
</tr>
<tr>
<td style="text-align:left">Executors.newFixedThreadPool(int nThreads)</td>
<td style="text-align:left">固定型线程池，线程数量固定，只有核心线程并且无超时机制，当所有线程都执行任务时，新任务进入队列等待。能够快速响应请求</td>
</tr>
<tr>
<td style="text-align:left">Executors.newScheduledThreadPool(int corePoolSize)</td>
<td style="text-align:left">调度型线程池，核心数量固定，非核心数量无限制，非核心线程一旦空闲立马回收。会根据Scheduled(任务列表)进行延迟执行，或者是进行周期性的执行.适用于一些周期性的工作</td>
</tr>
<tr>
<td style="text-align:left">EExecutors.newSingleThreadExecutor()</td>
<td style="text-align:left">单例线程池，只有一个核心线程，所有任务都在这个线程中串行执行，不需要处理线程同步问题，在任意的时间段内，线程池中只有一个线程在工作…</td>
</tr>
</tbody>
</table>
<p>在<code>ExecutorService</code>的方法中可以看到线程池除了可执行<code>Runnable</code>接口还可以执行<code>Callable&lt;V&gt;</code> 接口,并且可以通过<code>Future&lt;V&gt;</code>来感知线程状态和结果。</p>
<p>因为<code>Runnable</code>的返回值为<code>void</code> 无法获取执行完毕后的结果 ，所以才有了<code>Callable&lt;V&gt;</code>，可以返回一个结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface Callable&lt;V&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Computes a result, or throws an exception if unable to do so.</span><br><span class="line">     *</span><br><span class="line">     * @return computed result</span><br><span class="line">     * @throws Exception if unable to compute a result</span><br><span class="line">     */</span><br><span class="line">    V call() throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Future&lt;V&gt;</code> 定义了几种方法来感知线程状态和获取结果 ，可以理解为管理线程的。Future提供了三种功能：</p>
<ol>
<li>判断任务是否完成；</li>
<li>能够中断任务；</li>
<li>能够获取任务执行结果。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public interface Future&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 尝试取消执行此任务。 如果任务已经完成，已经被取消或由于某种其他原因而无法取消，则此尝试将失败。返回false。</span><br><span class="line">     * 当此方法调用时此任务尚未开始，则此任务不会被运行。返回true。</span><br><span class="line">     * 如果任务已经开始，则&#123;mayInterruptIfRunning&#125;参数确定执行此任务的线程是否应该中断，以试图停止该任务。</span><br><span class="line">     * 此方法返回后，对&#123;@link #isDone&#125;的后续调用将始终返回&#123;@code true&#125;。 </span><br><span class="line">     * 如果此方法返回&#123;@code true&#125;，则后续调用&#123;@link #isCancelled&#125;将始终返回&#123;@code true&#125;。</span><br><span class="line">     * @param mayInterruptIfRunning 线程在运行是否中断; 如果值为true表示中断正在进行的任务返回则返回true，值为false表示不中断返回false，如果任务无法取消，通常是因为它已经正常完成;</span><br><span class="line">     * &#123;@code true&#125; otherwise</span><br><span class="line">     */</span><br><span class="line">    boolean cancel(boolean mayInterruptIfRunning);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 如果在完成之前被取消 则返回 true，否则返回false</span><br><span class="line">     *</span><br><span class="line">     * @return &#123;@code true&#125; if this task was cancelled before it completed</span><br><span class="line">     */</span><br><span class="line">    boolean isCancelled();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务已经完成 返回 true。</span><br><span class="line">     * 任务被取消，异常，或者正常完成都会返回 true。此方法返回结果表示任务是否允许完毕</span><br><span class="line">     * @return &#123;@code true&#125; if this task completed</span><br><span class="line">     */</span><br><span class="line">    boolean isDone();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取任务完成的结果，如果任务没有执行完毕，则阻塞线程，直到拿到结果</span><br><span class="line">     * @return the computed result</span><br><span class="line">     * @throws CancellationException if the computation was cancelled</span><br><span class="line">     * @throws ExecutionException if the computation threw an</span><br><span class="line">     * exception</span><br><span class="line">     * @throws InterruptedException if the current thread was interrupted</span><br><span class="line">     * while waiting</span><br><span class="line">     */</span><br><span class="line">    V get() throws InterruptedException, ExecutionException;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null</span><br><span class="line">     * @param timeout 指定等待时间</span><br><span class="line">     * @param unit 等待时间单位</span><br><span class="line">     * @return the 执行结果</span><br><span class="line">     * @throws CancellationException if the computation was cancelled</span><br><span class="line">     * @throws ExecutionException if the computation threw an</span><br><span class="line">     * exception</span><br><span class="line">     * @throws InterruptedException if the current thread was interrupted</span><br><span class="line">     * while waiting</span><br><span class="line">     * @throws TimeoutException if the wait timed out</span><br><span class="line">     */</span><br><span class="line">    V get(long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为<code>Future</code>只是一个接口，所以是无法直接用来创建对象使用的，因此就有了下面的<code>FutureTask</code>。</p>
<p>可以看出RunnableFuture继承了Runnable接口和Future接口，而FutureTask实现了RunnableFuture接口。<br>所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ScheduledExecutorService</code> 调度线程池 ，扩展了<code>ExecutorService</code>,增加了几个方法用来执行周期性或者定时的任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public interface ScheduledExecutorService extends ExecutorService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在给定延迟时间后执行一个单次的操作</span><br><span class="line">     * @param command 要执行的操作</span><br><span class="line">     * @param delay 延迟时间</span><br><span class="line">     * @param unit 延迟时间单位</span><br><span class="line">     * @return a ScheduledFuture 代表一个未完成的任务，可以通过get()获取null，还可以通过getDelay()获取剩余延迟时间</span><br><span class="line">     * @throws RejectedExecutionException if the task cannot be</span><br><span class="line">     *         scheduled for execution</span><br><span class="line">     * @throws NullPointerException if command is null</span><br><span class="line">     */</span><br><span class="line">    public ScheduledFuture&lt;?&gt; schedule(Runnable command,</span><br><span class="line">                                       long delay, TimeUnit unit);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在给定延迟时间后执行一个单次的 操作</span><br><span class="line">     * @param callable 单次操作</span><br><span class="line">     * @param delay 延迟时间</span><br><span class="line">     * @param unit 延迟时间单位</span><br><span class="line">     * @param &lt;V&gt; 返回结果类型</span><br><span class="line">     * @return a ScheduledFuture 可以通过get() 拿到结果，可以通过getDelay() 获取剩余延迟时间；</span><br><span class="line">     * @throws RejectedExecutionException if the task cannot be</span><br><span class="line">     *         scheduled for execution</span><br><span class="line">     * @throws NullPointerException if callable is null</span><br><span class="line">     */</span><br><span class="line">    public &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable,</span><br><span class="line">                                           long delay, TimeUnit unit);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；</span><br><span class="line">     *  也就是将在 initialDelay 后开始执行，然后在initialDelay+period 后执行，</span><br><span class="line">     *  接着在 initialDelay + 2 * period 后执行，依此类推。</span><br><span class="line">     * @param command 要执行的操作</span><br><span class="line">     * @param initialDelay 首次执行延迟时间</span><br><span class="line">     * @param period 执行周期时间</span><br><span class="line">     * @param unit 时间单位</span><br><span class="line">     * @return a ScheduledFuture representing pending completion of</span><br><span class="line">     *         the series of repeated tasks.  The future&apos;s &#123;@link</span><br><span class="line">     *         Future#get() get()&#125; method will never return normally,</span><br><span class="line">     *         and will throw an exception upon task cancellation or</span><br><span class="line">     *         abnormal termination of a task execution.</span><br><span class="line">     * @throws RejectedExecutionException if the task cannot be</span><br><span class="line">     *         scheduled for execution</span><br><span class="line">     * @throws NullPointerException if command is null</span><br><span class="line">     * @throws IllegalArgumentException if period less than or equal to zero</span><br><span class="line">     */</span><br><span class="line">    public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,</span><br><span class="line">                                                  long initialDelay,</span><br><span class="line">                                                  long period,</span><br><span class="line">                                                  TimeUnit unit);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。</span><br><span class="line">     * @param command  要执行的定期任务</span><br><span class="line">     * @param initialDelay 首次执行的延迟时间</span><br><span class="line">     * @param delay 再上一次任务执行完毕后下次要执行的延迟时间</span><br><span class="line">     * @param unit 时间单位</span><br><span class="line">     * @return a ScheduledFuture representing pending completion of</span><br><span class="line">     *         the series of repeated tasks.  The future&apos;s &#123;@link</span><br><span class="line">     *         Future#get() get()&#125; method will never return normally,</span><br><span class="line">     *         and will throw an exception upon task cancellation or</span><br><span class="line">     *         abnormal termination of a task execution.</span><br><span class="line">     * @throws RejectedExecutionException if the task cannot be</span><br><span class="line">     *         scheduled for execution</span><br><span class="line">     * @throws NullPointerException if command is null</span><br><span class="line">     * @throws IllegalArgumentException if delay less than or equal to zero</span><br><span class="line">     */</span><br><span class="line">    public ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,</span><br><span class="line">                                                     long initialDelay,</span><br><span class="line">                                                     long delay,</span><br><span class="line">                                                     TimeUnit unit);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>关于几种线程池的使用，代码都放在我的GitHub了。</em></p>
<blockquote>
<p>学习资料</p>
</blockquote>
<ul>
<li><a href="https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService.html" target="_blank" rel="noopener">https://developer.android.com/reference/java/util/concurrent/ScheduledExecutorService.html</a></li>
<li><a href="https://tom510230.gitbooks.io/android_ka_fa_yi_shu_tan_suo/content/chapter11.html" target="_blank" rel="noopener">https://tom510230.gitbooks.io/android_ka_fa_yi_shu_tan_suo/content/chapter11.html</a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/5607734.html" target="_blank" rel="noopener">http://www.cnblogs.com/whoislcj/p/5607734.html</a></li>
<li><a href="http://blog.csdn.net/u010687392/article/details/49850803" target="_blank" rel="noopener">http://blog.csdn.net/u010687392/article/details/49850803</a></li>
<li><a href="http://www.cnblogs.com/RGogoing/p/4766971.html" target="_blank" rel="noopener">http://www.cnblogs.com/RGogoing/p/4766971.html</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3949310.html" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/p/3949310.html</a></li>
</ul>
<blockquote>
<p>关于本次的Demo <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/thread" target="_blank" rel="noopener">https://github.com/sky-mxc/AndroidDemo/tree/master/thread</a></p>
</blockquote>
<p><strong>没有涉及到的地方，欢迎补充。错误的地方，感谢指正</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus3 学习笔记]]></title>
      <url>http://blog.skymxc.com/2017/08/08/EventBus/</url>
      <content type="html"><![CDATA[<h1 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h1><p><img src="\images\Android\EventBus\EventBus.png" alt="EventBus学习笔记"></p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>EventBus</strong> 是一款针对Android优化的发布/订阅(publish/subscribe)事件总线。主要功能是替代Intent，Handler，Broadcast在Fragment，Activity，Service，线程之间传递消息。简化了应用程序内各组件，组件与后台线程间的通信。优点代码简洁，以及将发送者和订阅者解耦。</p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p><strong>使用步骤</strong></p>
<ul>
<li>添加依赖</li>
<li>定义事件</li>
<li>注册/取消订阅</li>
<li>发送事件</li>
</ul>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;org.greenrobot:eventbus:3.0.0&apos;</span><br></pre></td></tr></table></figure>
<h2 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h2><blockquote>
<p>这里的事件是一个任意的POJO 没有任何要求</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MessageEvent &#123;</span><br><span class="line"></span><br><span class="line">    public final String message;</span><br><span class="line"></span><br><span class="line">    public MessageEvent(String message) &#123;</span><br><span class="line">        this.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><blockquote>
<p>准备订阅者</p>
</blockquote>
<p>使用注解 <strong>@Subscribe</strong> ，在3.0中对方法名称没有任何要求 当发送事件时EventBus会调用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// This method will be called when a MessageEvent is posted (in the UI thread for Toast)</span><br><span class="line">@Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="line">public void onMessageEvent(MessageEvent event) &#123;</span><br><span class="line">    Toast.makeText(getActivity(), event.message, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// This method will be called when a SomeOtherEvent is posted</span><br><span class="line">@Subscribe</span><br><span class="line">public void handleSomethingElse(SomeOtherEvent event) &#123;</span><br><span class="line">    doSomethingWith(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注册/取消订阅</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onStart() &#123;</span><br><span class="line">    super.onStart();</span><br><span class="line">    EventBus.getDefault().register(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStop() &#123;</span><br><span class="line">    EventBus.getDefault().unregister(this);</span><br><span class="line">    super.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>发送事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(new MessageEvent(&quot;Hello everyone!&quot;));</span><br></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/how-to-get-started/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/how-to-get-started/</a></p>
<h1 id="交付线程-Delivery-Threads-ThreadMode"><a href="#交付线程-Delivery-Threads-ThreadMode" class="headerlink" title="交付线程 Delivery Threads (ThreadMode)"></a>交付线程 Delivery Threads (ThreadMode)</h1><p>EventBus 通过 threadMode 决定订阅事件 在哪个线程处理，threadMode的取值 有四个枚举类型</p>
<ul>
<li>POSTING</li>
<li>MAIN</li>
<li>BACKGROUND</li>
<li>ASYNC</li>
</ul>
<blockquote>
<p>POSTING。 默认值，将会与发送线程一致，发送事件在哪个线程，订阅者就在哪个线程处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Called in the same thread (default)</span><br><span class="line">// ThreadMode is optional here</span><br><span class="line">@Subscribe(threadMode = ThreadMode.POSTING)</span><br><span class="line">public void onMessage(MessageEvent event) &#123;</span><br><span class="line">    log(event.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>MAIN 。 UI线程，订阅者将会在UI线程处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Called in Android UI&apos;s main thread</span><br><span class="line">@Subscribe(threadMode = ThreadMode.MAIN)</span><br><span class="line">public void onMessage(MessageEvent event) &#123;</span><br><span class="line">textField.setText(event.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>BACKGROUND 。 后台线程处理，如果发送者在UI线程发出就会另开线程处理，否则就直接在同一线程处理，不会在UI线程处理就对了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Called in the background thread</span><br><span class="line">@Subscribe(threadMode = ThreadMode.BACKGROUND)</span><br><span class="line">public void onMessage(MessageEvent event)&#123;</span><br><span class="line">    saveToDisk(event.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ASYNC 。异步，订阅者将会另开一个线程处理，无论发送者从哪个线程发出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Called in a separate thread</span><br><span class="line">@Subscribe(threadMode = ThreadMode.ASYNC)</span><br><span class="line">public void onMessage(MessageEvent event)&#123;</span><br><span class="line">    backend.send(event.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/</a></p>
<h1 id="优先级及事件取消-Priorities-and-Event-Cancellation"><a href="#优先级及事件取消-Priorities-and-Event-Cancellation" class="headerlink" title="优先级及事件取消 Priorities and Event Cancellation"></a>优先级及事件取消 Priorities and Event Cancellation</h1><blockquote>
<p>优先级</p>
</blockquote>
<p>EventBus 通过 <code>priority</code> 属性决定优先级 ，默认0 值越高 优先级越高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Subscribe(priority = 1);</span><br><span class="line">public void onEvent(MessageEvent event) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>事件取消</p>
</blockquote>
<p> EventBus 通过 <code>cancelEventDelivery(Object event)</code> 取消事件，这可是优先级高的特权了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// Called in the same thread (default)</span><br><span class="line">@Subscribe</span><br><span class="line">public void onEvent(MessageEvent event)&#123;</span><br><span class="line">    // Process the event</span><br><span class="line">    ...</span><br><span class="line">    // Prevent delivery to other subscribers</span><br><span class="line">    EventBus.getDefault().cancelEventDelivery(event) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/priorities-and-event-cancellation/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/priorities-and-event-cancellation/</a></p>
<h1 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置 Configuration"></a>配置 Configuration</h1><p>一般我们使用 <code>EventBus.getDefault()</code> 得到EventBus实例，<br>如果有别的需求可以使用 EventBusBuilder 类构建EventBus，例如 关闭log</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EventBus eventBus = EventBus.builder()</span><br><span class="line">    .logNoSubscriberMessages(false)</span><br><span class="line">    .sendNoSubscriberEvent(false)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>
<p>或者说 当订阅者抛出异常时 发送 <code>SubscriberExceptionEvent</code> 事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus eventBus = EventBus.builder().throwSubscriberException(true).build();</span><br></pre></td></tr></table></figure>
<p>默认情况下 订阅者抛出异常EventBus会捕获异常并发一个 <code>SubscriberExceptionEvent</code> 事件</p>
<p>我们可以通过 <code>installDefaultEventBus()</code>方法我们的配置放到默认实例上；但是要在使用 <code>EventBus.getDefault()</code>之前</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.builder().throwSubscriberException(BuildConfig.DEBUG).installDefaultEventBus();</span><br></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/configuration/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/configuration/</a></p>
<h1 id="粘性事件-Sticky-Events"><a href="#粘性事件-Sticky-Events" class="headerlink" title="粘性事件 Sticky Events"></a>粘性事件 Sticky Events</h1><p><em>对于一般的事件，我们首先要注册订阅者，然后发送事件，订阅者才能收到事件。如果先发送事件，再订阅此事件，将收不到事件，而粘性事件恰恰相反，粘性事件是可以先发送，然后再注册订阅者，后注册的订阅者依然可以接收到事件（ps：在发送前注册的也可以收到）</em></p>
<blockquote>
<p>先发送粘性事件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(new MessageEvent(&quot;Hello everyone!&quot;));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>再启动一个Activity 仍然可以接受到之前发送的事件</p>
</blockquote>
<p>属性 sticky 的取值决定是否是粘性事件</p>
<p><em>ps:你不注册的话，啥事件也是收不到的</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onStart() &#123;</span><br><span class="line">    super.onStart();</span><br><span class="line">    EventBus.getDefault().register(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// UI updates must run on MainThread</span><br><span class="line">@Subscribe(sticky = true, threadMode = ThreadMode.MAIN)</span><br><span class="line">public void onEvent(MessageEvent event) &#123;   </span><br><span class="line">    textField.setText(event.message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStop() &#123;</span><br><span class="line">    EventBus.getDefault().unregister(this);    </span><br><span class="line">    super.onStop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>移除粘性事件</p>
</blockquote>
<p>如果你不移除粘性事件，那么它将一直存在，直到你程序被杀死</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MessageEvent stickyEvent = EventBus.getDefault().getStickyEvent(MessageEvent.class);</span><br><span class="line">// Better check that an event was actually posted before</span><br><span class="line">if(stickyEvent != null) &#123;</span><br><span class="line">    // &quot;Consume&quot; the sticky event</span><br><span class="line">    EventBus.getDefault().removeStickyEvent(stickyEvent);</span><br><span class="line">    // Now do something with it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官网传送门 <a href="http://greenrobot.org/eventbus/documentation/configuration/sticky-events/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/configuration/sticky-events/</a></p>
<h1 id="订阅索引-Subscriber-Index"><a href="#订阅索引-Subscriber-Index" class="headerlink" title="订阅索引 Subscriber Index"></a>订阅索引 Subscriber Index</h1><p>订阅索引是3.0中的新特性，是可选项。</p>
<p>在3.0中由于使用了注解，比起使用反射来遍历方法的2.4版本逊色不少。但开启索引后性能远远超出旧版本。<br>看作者放出的图</p>
<p><img src="\images\Android\EventBus\index.png" alt="EventBus性能对比"></p>
<p>既然使用索引后那么叼，那就看看怎么使用索引</p>
<blockquote>
<p>注意项</p>
</blockquote>
<ul>
<li>只有@Subscribe 可以被索引，必须是 public修饰</li>
<li>不能再内部类中</li>
</ul>
<blockquote>
<p>使用 apt插件的方式   </p>
</blockquote>
<ul>
<li>顶级 build.gradle 中加入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>再module的build.gradle 中使用 apt插件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line">apply plugin: &apos;com.neenbedankt.android-apt&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>module的build.gradle 添加依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;org.greenrobot:eventbus:3.0.0&apos;</span><br><span class="line">    apt &apos;org.greenrobot:eventbus-annotation-processor:3.0.1&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>module 的 build.gradle 配置参数 ，这里写自己的包名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt &#123;</span><br><span class="line">    arguments &#123;</span><br><span class="line">        eventBusIndex &quot;com.example.myapp.MyEventBusIndex&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用索引</p>
</blockquote>
<p>编译过后 会生成 MyEventBusIndex类，没有生成就多编译几遍</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus eventBus = EventBus.builder().addIndex(new MyEventBusIndex()).build();</span><br></pre></td></tr></table></figure>
<p> 将索引配置到默认实例中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventBus.builder().addIndex(new MyEventBusIndex()).installDefaultEventBus();</span><br><span class="line">// Now the default instance uses the given index. Use it like this:</span><br><span class="line">EventBus eventBus = EventBus.getDefault();</span><br></pre></td></tr></table></figure>
<p>还可以添加多个不同的library中索引</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EventBus eventBus = EventBus.builder()</span><br><span class="line">    .addIndex(new MyEventBusAppIndex())</span><br><span class="line">    .addIndex(new MyEventBusLibIndex()).build();</span><br></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/subscriber-index/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/subscriber-index/</a></p>
<h1 id="混淆-ProGuard"><a href="#混淆-ProGuard" class="headerlink" title="混淆 ProGuard"></a>混淆 ProGuard</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepclassmembers class ** &#123;</span><br><span class="line">    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep enum org.greenrobot.eventbus.ThreadMode &#123; *; &#125;</span><br><span class="line"></span><br><span class="line"># Only required if you use AsyncExecutor</span><br><span class="line">-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent &#123;</span><br><span class="line">    &lt;init&gt;(java.lang.Throwable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官网指南 <a href="http://greenrobot.org/eventbus/documentation/proguard/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/proguard/</a></p>
<h1 id="AsyncExecutor"><a href="#AsyncExecutor" class="headerlink" title="AsyncExecutor"></a>AsyncExecutor</h1><p>懒得翻译了，直接看吧<br><a href="http://greenrobot.org/eventbus/documentation/asyncexecutor/" target="_blank" rel="noopener">http://greenrobot.org/eventbus/documentation/asyncexecutor/</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><em>感谢各位大神的分享</em></p>
<ul>
<li><a href="https://juejin.im/entry/570ae5668ac247004c3128a4" target="_blank" rel="noopener">https://juejin.im/entry/570ae5668ac247004c3128a4</a></li>
<li><a href="https://dev.qq.com/topic/59190e9ae315487c53deeca3" target="_blank" rel="noopener">https://dev.qq.com/topic/59190e9ae315487c53deeca3</a></li>
<li><a href="http://www.jianshu.com/p/4a3d953d1319" target="_blank" rel="noopener">http://www.jianshu.com/p/4a3d953d1319</a></li>
</ul>
<p>Demo地址： <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/event" target="_blank" rel="noopener">https://github.com/sky-mxc/AndroidDemo/tree/master/event</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewDragHelper使用笔记及侧滑菜单实践]]></title>
      <url>http://blog.skymxc.com/2017/07/29/android-ViewDragHelper/</url>
      <content type="html"><![CDATA[<h2 id="ViewDragHelper"><a href="#ViewDragHelper" class="headerlink" title="ViewDragHelper"></a>ViewDragHelper</h2><blockquote>
<p>一个拖拽实现的帮助类，存在于v4包中，对于实现简单的拖拽简直不要太简单；再也不用去重写onTouch()了；</p>
</blockquote>
<p>官网API <a href="https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/support/v4/widget/ViewDragHelper.html</a></p>
<p>该类主要用于拖拽view的实现，例如侧滑菜单时候的左右拖拽或者上下拖拽</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><blockquote>
<p> 创建 ViewDragHelper实例</p>
</blockquote>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ViewDragHelper create (ViewGroup forParent, </span><br><span class="line">               float sensitivity, </span><br><span class="line">               ViewDragHelper.Callback cb)</span><br></pre></td></tr></table></figure>
<ul>
<li>参数1 要使用DragHelper的布局</li>
<li>参数2 灵敏度，值越大越灵敏，1.0属于正常</li>
<li>参数3 回调，这里是主要阵地</li>
</ul>
<blockquote>
<p>事件拦截于处理</p>
</blockquote>
<p>重写布局的 <code>onInterceptTouchEvent()</code>方法 ，ViewDragHelper会自行判断是否需要拦截事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">    return mDragHelper.shouldInterceptTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重写布局的 <code>onTouchEvent()</code> 处理拦截的事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    mDragHelper.processTouchEvent(event);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果需要滑动动画 重写 <code>computeScroll()</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 因为要在 DragHelper的中使用动画</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void computeScroll() &#123;</span><br><span class="line">    super.computeScroll();</span><br><span class="line">    if (mDragHelper.continueSettling(true)) &#123;</span><br><span class="line">        ViewCompat.postInvalidateOnAnimation(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>前面在创建ViewDragHelper的时候用到了一个Callback，其实主要是在这里添加自己的逻辑，主要介绍一下这个类</p>
<p>这是一个抽象类，我们必须要实现的方法只有一个<code>tryCaptureView()</code></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public abstract boolean tryCaptureView(View child, int pointerId);</span><br></pre></td></tr></table></figure>
<ul>
<li>参数1 准备捕获的子view</li>
<li>参数2 准备捕获的指针ID</li>
</ul>
<p>该方法的返回值决定了ViewDragHelper是否要捕获这个view；如果返回false就不捕获；</p>
<p>说的一下我的思路吧，我在父布局中持有了需要拖拽处理的子view的引用，如果捕获的view是我持有的view就返回true，捕获这次事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 决定是否捕获此view</span><br><span class="line"> * 这里自由决定</span><br><span class="line"> * @param child 待捕获的子元素</span><br><span class="line"> * @param pointerId</span><br><span class="line"> * @return 是否捕获</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public boolean tryCaptureView(View child, int pointerId) &#123;</span><br><span class="line">    return child==mContentView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你需要处理水平拖拽，重写 <code>clampViewPositionHorizontal()</code> 即可，该方法返回值就是view拖拽后的坐标值;默认是不处理的；</p>
</blockquote>
<p>下面是我的实现，为了防止拖拽出屏幕做了简单处理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 水平 拖动</span><br><span class="line"> * @param child 拖动的元素</span><br><span class="line"> * @param left 将要去往的位置</span><br><span class="line"> * @param dx 拖动了的距离</span><br><span class="line"> * @return 新位置</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public int clampViewPositionHorizontal(View child, int left, int dx) &#123;</span><br><span class="line">    //限制在容器内</span><br><span class="line">    int leftBound = getPaddingLeft();</span><br><span class="line">    int rightBound = getWidth() - mContentView.getWidth();</span><br><span class="line">    int newLeft = Math.min(Math.max(left,leftBound),rightBound);</span><br><span class="line">    return newLeft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果需要处理垂直拖拽，重写 <code>clampViewPositionVertical()</code> ；该方法和上面的那个方法一样，返回值就是view拖拽后的坐标值；默认不处理；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 垂直拖动</span><br><span class="line"> * @param child</span><br><span class="line"> * @param top</span><br><span class="line"> * @param dy</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public int clampViewPositionVertical(View child, int top, int dy) &#123;</span><br><span class="line">    int topBound = getPaddingTop();</span><br><span class="line">    int bottomBound = getHeight() - mContentView.getHeight();</span><br><span class="line">    int newTop = Math.min(Math.max(top,topBound),bottomBound);</span><br><span class="line">    return newTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以从<code>onViewDragStateChanged()</code>方法中得到ViewDragHelper的状态变化</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onViewDragStateChanged(int state) &#123;</span><br><span class="line">    switch (state)&#123;</span><br><span class="line">        case ViewDragHelper.STATE_IDLE:</span><br><span class="line">            Log.e(&quot;onViewDragStateChanged&quot;,&quot;state--&gt;STATE_IDLE&quot;+state);</span><br><span class="line">            break;</span><br><span class="line">        case ViewDragHelper.STATE_DRAGGING:</span><br><span class="line">            Log.e(&quot;onViewDragStateChanged&quot;,&quot;state--&gt;STATE_DRAGGING&quot;+state);</span><br><span class="line">            break;</span><br><span class="line">        case ViewDragHelper.STATE_SETTLING:</span><br><span class="line">            Log.e(&quot;onViewDragStateChanged&quot;,&quot;state--&gt;STATE_SETTLING&quot;+state);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当子view的位置发生变化会触发 <code>onViewPositionChanged()</code> 方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 当 view 的 position发生改变时触发</span><br><span class="line"> * @param changedView 拖动的view</span><br><span class="line"> * @param left 新位置 X轴</span><br><span class="line"> * @param top 新位置 Y轴</span><br><span class="line"> * @param dx 从上次位置 到这次位置移动的距离 X轴</span><br><span class="line"> * @param dy 从上次位置 到这次位置移动的距离 Y轴</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>拖动动作停止，可以从 <code>onViewReleased()</code> 中得到速度信息</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * </span><br><span class="line"> * @param releasedChild</span><br><span class="line"> * @param xvel x 轴速度  每秒移动的像素值</span><br><span class="line"> * @param yvel Y 轴速度 每秒移动的像素值</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void onViewReleased(View releasedChild, float xvel, float yvel) &#123;</span><br><span class="line">    Log.e(&quot;onViewReleased&quot;,&quot;xvel--&gt;&quot;+xvel+&quot;;yvel--&gt;&quot;+yvel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我用到的就这些，就介绍这些吧 ，<br>实现了一个可以自由拖动的layout 看Demo中的DragLayout ； <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/drag" target="_blank" rel="noopener">https://github.com/sky-mxc/AndroidDemo/tree/master/drag</a></p>
</blockquote>
<h2 id="侧滑菜单实现"><a href="#侧滑菜单实现" class="headerlink" title="侧滑菜单实现"></a>侧滑菜单实现</h2><p>以前写过一个侧滑菜单，思路是重写 ListView或者RecycleView 的onTouch事件，判断根据坐标点判断找到子view，然后让子view滑动，从而实现的侧滑。感觉比较麻烦。今天说一下另外一个思路，</p>
<blockquote>
<p>写一个通用的布局，例如一个LineaLayout,里面定义两个Group，一个是item内容，另一个是Item 菜单；在LineaLayout内部定义一个ViewDragHelper来处理拖动事件。ViewDragHelper会将拖动事件处理好，我们只需要在callback中处理简单的逻辑就好。</p>
<p>写一个SwipeLayout 继承自 LineaLayout; 在构造时就创建好 DragHelper</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public SwipeItemLayout(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">    super(context, attrs, defStyleAttr);</span><br><span class="line">    mDragHelper = ViewDragHelper.create(this, 1.0f, new SwipeItemDragHelper());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>加载完毕布局之后，拿到两个item,一个内容，一个菜单</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onFinishInflate() &#123;</span><br><span class="line">    super.onFinishInflate();</span><br><span class="line">    mContentView = getChildAt(0);</span><br><span class="line">    mActionView = getChildAt(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>事件交由 DragHelper处理</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">    return mDragHelper.shouldInterceptTouchEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    mDragHelper.processTouchEvent(event);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>要在callback中使用动画</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 因为要在 DragHelper的中使用动画</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void computeScroll() &#123;</span><br><span class="line">    super.computeScroll();</span><br><span class="line">    if (mDragHelper.continueSettling(true)) &#123;</span><br><span class="line">        ViewCompat.postInvalidateOnAnimation(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主要逻辑就在callback中处理</p>
<p>tryCaptureView() 如果拖动的时内容或者菜单就捕获此次多动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean tryCaptureView(View child, int pointerId) &#123;</span><br><span class="line">    return child == mContentView || child == mActionView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为实现的是侧滑菜单，这里只处理 水平拖动就好，注释写的很清楚了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int clampViewPositionHorizontal(View child, int left, int dx) &#123;</span><br><span class="line">    dragDx+=dx;</span><br><span class="line">    if (child == mContentView) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 这个位置 的范围应该是在 0和 -dragDistance之间；最大是0；最小是 -dragDistance</span><br><span class="line">         */</span><br><span class="line">        int leftBound = getPaddingLeft();</span><br><span class="line">        int minLeft = -leftBound - mDragDistance;</span><br><span class="line">        int newLeft = Math.min(Math.max(minLeft, left), 0);</span><br><span class="line">        return newLeft;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 这个view的位置范围应该是在 父布局的宽度-actionView的宽和父布局的宽度之间；</span><br><span class="line">         */</span><br><span class="line">        int leftBound = getPaddingLeft();</span><br><span class="line">        int minLeft = getWidth() - leftBound - mActionView.getWidth();</span><br><span class="line">        int newLeft = Math.min(Math.max(minLeft, left), getWidth());</span><br><span class="line">        return newLeft;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当view 被拖动的时候，另一个view跟随被拖动的view一起移动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) &#123;</span><br><span class="line">    //同时移动</span><br><span class="line">    if (changedView == mContentView) &#123;</span><br><span class="line">        mActionView.offsetLeftAndRight(dx);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        mContentView.offsetLeftAndRight(dx);</span><br><span class="line">    &#125;</span><br><span class="line">    invalidate();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当滑动结束后，可以根据滑动的速度或者滑动的距离来决定是否要打开或者关闭菜单;具体思路 注释已经很清楚了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onViewReleased(View releasedChild, float xvel, float yvel) &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 这里的速度 是这样计算的  每秒的拖动的像素 值</span><br><span class="line">     * 速度判断</span><br><span class="line">     *  如果向→滑动 速度肯定是 正数；</span><br><span class="line">     *  如果向←滑动 速度肯定是 负数</span><br><span class="line">     * 如果 拖动距离 是 actionView的 ¼ 就允许打开或关闭</span><br><span class="line">     */</span><br><span class="line">    //根据速度决定是否打开</span><br><span class="line">    boolean settleToOpen = false;</span><br><span class="line">    float realVel = Math.abs(xvel);</span><br><span class="line">    int realDragX = Math.abs(dragDx);</span><br><span class="line">    if (realVel &gt; AUTO_OPEN_SPEED_LIMIT) &#123; //根据速度判断</span><br><span class="line">        if (xvel &gt; 0) &#123; //右滑</span><br><span class="line">            settleToOpen = false;</span><br><span class="line">        &#125; else &#123;  //左滑</span><br><span class="line">            settleToOpen = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else if(realDragX&gt; mDragDistance/4)&#123;  //根据拖动距离判断</span><br><span class="line">        if (dragDx&gt;0)&#123; //右滑</span><br><span class="line">            settleToOpen = false;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            settleToOpen = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    isOpen = settleToOpen;</span><br><span class="line">    int settleDestX = isOpen ? -mDragDistance : 0;</span><br><span class="line">    Log.e(&quot;onViewReleased&quot;, &quot;settleToOpen-&gt;&quot; + settleToOpen + &quot;;destX-&gt;&quot; + settleDestX + &quot;;xvel-&gt;&quot; + xvel + &quot;;dragDx--&gt;&quot; + dragDx);</span><br><span class="line">    mDragHelper.smoothSlideViewTo(mContentView, settleDestX, 0);</span><br><span class="line">    ViewCompat.postInvalidateOnAnimation(SwipeItemLayout.this);</span><br><span class="line">    dragDx = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为了滑动更加灵敏，在左右滑动item时，禁止父布局的上下滑动</p>
</blockquote>
<p>在onTouch中 判断滑动距离，超过一定范围就不让父布局处理；<code>getParent().requestDisallowInterceptTouchEvent(true);</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    mDragHelper.processTouchEvent(event);</span><br><span class="line">    switch (event.getAction()) &#123;</span><br><span class="line">        case MotionEvent.ACTION_DOWN:</span><br><span class="line">            x = event.getRawX();</span><br><span class="line">            break;</span><br><span class="line">        case MotionEvent.ACTION_MOVE:</span><br><span class="line">            float gap = event.getRawX() - x;</span><br><span class="line">            int sl = ViewConfiguration.get(getContext()).getScaledTouchSlop();</span><br><span class="line">            if (Math.abs(gap) &gt; sl) &#123;</span><br><span class="line">                getParent().requestDisallowInterceptTouchEvent(true);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case MotionEvent.ACTION_UP:</span><br><span class="line">        case MotionEvent.ACTION_CANCEL:</span><br><span class="line">            x = 0;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>贴一下代码，完整Demo看GitHub  <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/drag" target="_blank" rel="noopener">https://github.com/sky-mxc/AndroidDemo/tree/master/drag</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by mxc on 2017/7/23.</span><br><span class="line"> * description:</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class SwipeItemLayout extends LinearLayout &#123;</span><br><span class="line">    private final double AUTO_OPEN_SPEED_LIMIT = 500.0;</span><br><span class="line">    private View mActionView;</span><br><span class="line">    private View mContentView;</span><br><span class="line">    private int mDragDistance;</span><br><span class="line">    private ViewDragHelper mDragHelper;</span><br><span class="line">    private boolean isOpen;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public SwipeItemLayout(Context context) &#123;</span><br><span class="line">        this(context, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SwipeItemLayout(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public SwipeItemLayout(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">        mDragHelper = ViewDragHelper.create(this, 1.0f, new SwipeItemDragHelper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onFinishInflate() &#123;</span><br><span class="line">        super.onFinishInflate();</span><br><span class="line">        mContentView = getChildAt(0);</span><br><span class="line">        mActionView = getChildAt(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        mDragDistance = mActionView.getMeasuredWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        return mDragHelper.shouldInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    float x = 0;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        mDragHelper.processTouchEvent(event);</span><br><span class="line">        switch (event.getAction()) &#123;</span><br><span class="line">            case MotionEvent.ACTION_DOWN:</span><br><span class="line">                x = event.getRawX();</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_MOVE:</span><br><span class="line">                float gap = event.getRawX() - x;</span><br><span class="line">                int sl = ViewConfiguration.get(getContext()).getScaledTouchSlop();</span><br><span class="line">                if (Math.abs(gap) &gt; sl) &#123;</span><br><span class="line">                    getParent().requestDisallowInterceptTouchEvent(true);</span><br><span class="line">                &#125;</span><br><span class="line">                break;</span><br><span class="line">            case MotionEvent.ACTION_UP:</span><br><span class="line">            case MotionEvent.ACTION_CANCEL:</span><br><span class="line">                x = 0;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 因为要在 DragHelper的中使用动画</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void computeScroll() &#123;</span><br><span class="line">        super.computeScroll();</span><br><span class="line">        if (mDragHelper.continueSettling(true)) &#123;</span><br><span class="line">            ViewCompat.postInvalidateOnAnimation(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class SwipeItemDragHelper extends ViewDragHelper.Callback &#123;</span><br><span class="line"></span><br><span class="line">        private int dragDx;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean tryCaptureView(View child, int pointerId) &#123;</span><br><span class="line">            return child == mContentView || child == mActionView;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int clampViewPositionHorizontal(View child, int left, int dx) &#123;</span><br><span class="line">            dragDx+=dx;</span><br><span class="line">            if (child == mContentView) &#123;</span><br><span class="line">                /**</span><br><span class="line">                 * 这个位置 的范围应该是在 0和 -dragDistance之间；最大是0；最小是 -dragDistance</span><br><span class="line">                 */</span><br><span class="line">                int leftBound = getPaddingLeft();</span><br><span class="line">                int minLeft = -leftBound - mDragDistance;</span><br><span class="line">                int newLeft = Math.min(Math.max(minLeft, left), 0);</span><br><span class="line">                return newLeft;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /**</span><br><span class="line">                 * 这个view的位置范围应该是在 父布局的宽度-actionView的宽和父布局的宽度之间；</span><br><span class="line">                 */</span><br><span class="line">                int leftBound = getPaddingLeft();</span><br><span class="line">                int minLeft = getWidth() - leftBound - mActionView.getWidth();</span><br><span class="line">                int newLeft = Math.min(Math.max(minLeft, left), getWidth());</span><br><span class="line">                return newLeft;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onViewPositionChanged(View changedView, int left, int top, int dx, int dy) &#123;</span><br><span class="line">            //同时移动</span><br><span class="line">            if (changedView == mContentView) &#123;</span><br><span class="line">                mActionView.offsetLeftAndRight(dx);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mContentView.offsetLeftAndRight(dx);</span><br><span class="line">            &#125;</span><br><span class="line">            invalidate();</span><br><span class="line">//            Log.e(&quot;onViewPosition&quot;, &quot;dx--&gt;&quot; + dx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onViewReleased(View releasedChild, float xvel, float yvel) &#123;</span><br><span class="line">            /**</span><br><span class="line">             * 这里的速度 是这样计算的  每秒的拖动的像素 值</span><br><span class="line">             * 速度判断</span><br><span class="line">             *  如果向→滑动 速度肯定是 正数；</span><br><span class="line">             *  如果向←滑动 速度肯定是 负数</span><br><span class="line">             * 如果 拖动距离 是 actionView的 ¼ 就允许打开或关闭</span><br><span class="line">             */</span><br><span class="line">            //根据速度决定是否打开</span><br><span class="line">            boolean settleToOpen = false;</span><br><span class="line">            float realVel = Math.abs(xvel);</span><br><span class="line">            int realDragX = Math.abs(dragDx);</span><br><span class="line">            if (realVel &gt; AUTO_OPEN_SPEED_LIMIT) &#123; //根据速度判断</span><br><span class="line">                if (xvel &gt; 0) &#123; //右滑</span><br><span class="line">                    settleToOpen = false;</span><br><span class="line">                &#125; else &#123;  //左滑</span><br><span class="line">                    settleToOpen = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else if(realDragX&gt; mDragDistance/4)&#123;  //根据拖动距离判断</span><br><span class="line">                if (dragDx&gt;0)&#123; //右滑</span><br><span class="line">                    settleToOpen = false;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    settleToOpen = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            isOpen = settleToOpen;</span><br><span class="line">            int settleDestX = isOpen ? -mDragDistance : 0;</span><br><span class="line">            Log.e(&quot;onViewReleased&quot;, &quot;settleToOpen-&gt;&quot; + settleToOpen + &quot;;destX-&gt;&quot; + settleDestX + &quot;;xvel-&gt;&quot; + xvel + &quot;;dragDx--&gt;&quot; + dragDx);</span><br><span class="line">            mDragHelper.smoothSlideViewTo(mContentView, settleDestX, 0);</span><br><span class="line">            ViewCompat.postInvalidateOnAnimation(SwipeItemLayout.this);</span><br><span class="line">            dragDx = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 文件下载]]></title>
      <url>http://blog.skymxc.com/2017/06/03/download/</url>
      <content type="html"><![CDATA[<blockquote>
<p>时间问题，延期</p>
</blockquote>
<h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><h2 id="用到的知识点"><a href="#用到的知识点" class="headerlink" title="用到的知识点"></a>用到的知识点</h2><ul>
<li>多线程，线程池</li>
<li>http协议</li>
<li>RandomAccessFile 类</li>
<li>properties文件</li>
</ul>
<h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ol>
<li>确定文件流长度</li>
<li>创建线程池</li>
<li>确定每个线程的下载起点，止点，长度</li>
<li>记录每个线程的进度 </li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中关于UUID的操作]]></title>
      <url>http://blog.skymxc.com/2017/03/12/android-uuid/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2017/03/12/android-uuid/" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h1><blockquote>
<p>通用唯一识别码（Universally Unique Identifier）是一种软件建构的标准；<br>UUID的目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不是需要通过中央控制端来做辨识信息的指定。如此以阿里，每个人都可以创建与其他人不冲突的UUID。在这种情况下，就不需要考虑数据库创建时的重复问题；</p>
<p>UUID是由一组32位数的16进制数字构成，UUID的标准形式包含32个16进制数字，以连字号分为五段。形式为 8-4-4-12的32个字符。</p>
<p>550e8400-e29b-41d4-a716-446655440000</p>
</blockquote>
<p>参考链接：<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" title="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki</a></p>
<h2 id="UUID的生成"><a href="#UUID的生成" class="headerlink" title="UUID的生成"></a>UUID的生成</h2><p>java中提供了 UUID类来生成UUID</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID uuid = UUID.randomUUID();</span><br></pre></td></tr></table></figure>
<h2 id="UUID-，byte-，16进制字符串之间的转换"><a href="#UUID-，byte-，16进制字符串之间的转换" class="headerlink" title="UUID ，byte[]，16进制字符串之间的转换"></a>UUID ，byte[]，16进制字符串之间的转换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * uuid转化 byte[]</span><br><span class="line"> * @param uuid</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static byte[] toByte(UUID uuid) &#123;</span><br><span class="line">    ByteBuffer buffer = ByteBuffer.wrap(new byte[16]);</span><br><span class="line">    buffer.putLong(uuid.getMostSignificantBits());</span><br><span class="line">    buffer.putLong(uuid.getLeastSignificantBits());</span><br><span class="line">    return buffer.array();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * byte[] 转换 uuid</span><br><span class="line"> * @param bytes</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static UUID toUUID(byte[] bytes) &#123;</span><br><span class="line">    ByteBuffer buffer = ByteBuffer.wrap(bytes);</span><br><span class="line">    long fistLong = buffer.getLong();</span><br><span class="line">    long secondLong = buffer.getLong();</span><br><span class="line">    return new UUID(fistLong, secondLong);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * byte[] 转换为 16进制字符串啊</span><br><span class="line"> * @param bytes</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static String bytesToHexStr(byte[] bytes) &#123;</span><br><span class="line">    StringBuffer sb = new StringBuffer();</span><br><span class="line">    for (byte b : bytes) &#123;</span><br><span class="line">        int v = b &amp; 0xff;</span><br><span class="line">        String hv = Integer.toHexString(v);</span><br><span class="line">        if (hv.length() &lt; 2) &#123;</span><br><span class="line">            sb.append(&quot;0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(hv);</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="http://stackoverflow.com/questions/17893609/convert-uuid-to-byte-that-works-when-using-uuid-nameuuidfrombytesb" title="http://stackoverflow.com/questions/17893609/convert-uuid-to-byte-that-works-when-using-uuid-nameuuidfrombytesb" target="_blank" rel="noopener">http://stackoverflow.com/questions/17893609/convert-uuid-to-byte-that-works-when-using-uuid-nameuuidfrombytesb</a></p>
<p><a href="https://my.oschina.net/u/347386/blog/182717" title="https://my.oschina.net/u/347386/blog/182717" target="_blank" rel="noopener">https://my.oschina.net/u/347386/blog/182717</a></p>
<h2 id="sqlite中-guid类型数据的操作"><a href="#sqlite中-guid类型数据的操作" class="headerlink" title="sqlite中 guid类型数据的操作"></a>sqlite中 guid类型数据的操作</h2><blockquote>
<p>表结构</p>
</blockquote>
<p><img src="\images\Android\uuid\table.png" alt="表结构"></p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void insert() &#123;</span><br><span class="line">    UUID uuid = UUID.randomUUID();</span><br><span class="line">    String name = &quot;mxc&quot;;</span><br><span class="line">    byte[] bytes = UUIDUtils.toByte(uuid);</span><br><span class="line">    ContentValues cv = new ContentValues();</span><br><span class="line">    cv.put(&quot;id&quot;,bytes);</span><br><span class="line">    cv.put(&quot;name&quot;,name);</span><br><span class="line"></span><br><span class="line">    SQLiteDatabase db = helper.getWritableDatabase();</span><br><span class="line">    db.beginTransaction();</span><br><span class="line">    db.insert(&quot;tb0&quot;,null,cv);</span><br><span class="line">    db.setTransactionSuccessful();</span><br><span class="line">    db.endTransaction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void update()&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 对于uuid的比较 ，转换为16进制字符串</span><br><span class="line">     */</span><br><span class="line">    String hexStr = UUIDUtils.bytesToHexStr(bytes);</span><br><span class="line">    SQLiteDatabase db = helper.getWritableDatabase();</span><br><span class="line">    ContentValues cv = new ContentValues();</span><br><span class="line">    cv.put(&quot;name&quot;,&quot;sky-mxc&quot;);</span><br><span class="line">    cv.put(&quot;age&quot;,23);</span><br><span class="line">    Log.e(TAG, &quot;update: hexStr=&quot;+hexStr);</span><br><span class="line">    db.beginTransaction();</span><br><span class="line">    db.update(&quot;tb0&quot;,cv,&quot;id = x&apos;&quot;+hexStr+&quot;&apos;&quot;,null);</span><br><span class="line">    db.setTransactionSuccessful();</span><br><span class="line">    db.endTransaction();</span><br><span class="line">    query();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private void query()&#123;</span><br><span class="line">    StringBuffer sb = new StringBuffer(&quot;数据如下：\n&quot;);</span><br><span class="line">    SQLiteDatabase db = helper.getReadableDatabase();</span><br><span class="line">    Cursor cursor = db.query(&quot;tb0&quot;, new String[]&#123;&quot;id&quot;, &quot;name&quot;, &quot;age&quot;&#125;, null, null, null, null, null);</span><br><span class="line">    while (cursor.moveToNext())&#123;</span><br><span class="line">        byte[] ids = cursor.getBlob(cursor.getColumnIndex(&quot;id&quot;));</span><br><span class="line">        bytes = ids;</span><br><span class="line">        UUID uuid = UUIDUtils.toUUID(ids);</span><br><span class="line">        String name = cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</span><br><span class="line">        int age = cursor.getInt(cursor.getColumnIndex(&quot;age&quot;));</span><br><span class="line">        sb.append(&quot;uuid=&quot;+uuid.toString());</span><br><span class="line">        sb.append(&quot;;\n&quot;);</span><br><span class="line">        String hexStr = UUIDUtils.bytesToHexStr(ids);</span><br><span class="line">       sb.append(&quot;hexStr=&quot;+hexStr);</span><br><span class="line">        sb.append(&quot;;\n&quot;);</span><br><span class="line">        Log.e(TAG, &quot;query: hexStr=&quot;+hexStr);</span><br><span class="line">        sb.append(&quot;name=&quot;+name);</span><br><span class="line">        sb.append(&quot;;\n&quot;);</span><br><span class="line">        sb.append(&quot;age=&quot;+age);</span><br><span class="line">        sb.append(&quot;;\n&quot;);</span><br><span class="line">        sb.append(&quot;---------------------------\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    cursor.close();</span><br><span class="line">    tvShow.setText(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android操作位于sd卡上的sqlite数据库]]></title>
      <url>http://blog.skymxc.com/2017/03/06/opeateSDCardDb/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明出处：<a href="https://sky-mxc.github.io/2017/03/06/opeateSDCardDb/" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="对-sd卡上sqlite-数据库的操作"><a href="#对-sd卡上sqlite-数据库的操作" class="headerlink" title="对 sd卡上sqlite 数据库的操作"></a>对 sd卡上sqlite 数据库的操作</h1><blockquote>
<p>Android默认的数据库位置是在 data\data\packageName\databases\目录下的；<br>有时候因为业务需要我们需要操作位于sd卡的数据库，就可以通过重写 Context类的方法来实现</p>
</blockquote>
<h2 id="重写-ContextWrapper"><a href="#重写-ContextWrapper" class="headerlink" title="重写 ContextWrapper"></a>重写 ContextWrapper</h2><p>我们在创建SqliteOpenHelper实例的时候需要传入一个Context 实例，就是通过他来实现的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class DBContext extends ContextWrapper &#123;</span><br><span class="line">    public static final String TAG = &quot;DBContext&quot;;</span><br><span class="line"></span><br><span class="line">    public DBContext(Context base) &#123;</span><br><span class="line">        super(base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回 数据库文件 </span><br><span class="line">     * 重写此方法 返回我们位于sd卡的数据库文件</span><br><span class="line">     * @param name</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public File getDatabasePath(String name) &#123;</span><br><span class="line">        //位于 sd卡的数据库 初始化时已经创建好了</span><br><span class="line">        File file = new File(Environment.getExternalStorageDirectory().getPath()+&quot;/dbDemo&quot;,name);</span><br><span class="line">        return file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Android 4.0后会调用此方法 还有一个2.3以前的方法就重写了，也没有那么底的版本了</span><br><span class="line">     * @param name</span><br><span class="line">     * @param mode</span><br><span class="line">     * @param factory</span><br><span class="line">     * @param errorHandler</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler) &#123;</span><br><span class="line">       SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(getDatabasePath(name),factory);</span><br><span class="line">        return db;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DBHelper"><a href="#DBHelper" class="headerlink" title="DBHelper"></a>DBHelper</h2><blockquote>
<p>DBHelper </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class DBHelper extends SQLiteOpenHelper &#123;</span><br><span class="line">    public static final String TAG = &quot;DBHelper&quot;;</span><br><span class="line"></span><br><span class="line">    private  static final String NAME = &quot;test.db&quot;;</span><br><span class="line">    private  static final int VERSION = 1;</span><br><span class="line"></span><br><span class="line">    private  static DBHelper dbHelpter;</span><br><span class="line"></span><br><span class="line">    public static DBHelper getDbHelpter(Context context)&#123;</span><br><span class="line">        if (dbHelpter == null)&#123;</span><br><span class="line">            dbHelpter = new DBHelper(context);</span><br><span class="line">        &#125;</span><br><span class="line">        return dbHelpter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private DBHelper(Context context) &#123;</span><br><span class="line">        super(context, NAME, null, VERSION);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(SQLiteDatabase db) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void query()&#123;</span><br><span class="line"></span><br><span class="line">    DBContext dbContext = new DBContext(this);</span><br><span class="line">    DBHelper helpter = DBHelper.getDbHelpter(dbContext);</span><br><span class="line">    SQLiteDatabase db = helpter.getWritableDatabase();</span><br><span class="line">    Cursor cu = db.query(&quot;table1&quot;, new String[]&#123;&quot;id&quot;, &quot;name&quot;, &quot;age&quot;&#125;, null, null, null, null, &quot;id desc&quot;, null);</span><br><span class="line">    if (null != cu)&#123;</span><br><span class="line">        while (cu.moveToNext())&#123;</span><br><span class="line">            int id = cu.getInt(cu.getColumnIndex(&quot;id&quot;));</span><br><span class="line">            String name = cu.getString(cu.getColumnIndex(&quot;name&quot;));</span><br><span class="line">            int age = cu.getInt(cu.getColumnIndex(&quot;age&quot;));</span><br><span class="line">            Log.e(TAG, &quot;query: id=&quot;+id+&quot;;name=&quot;+name+&quot;;age=&quot;+age);</span><br><span class="line">        &#125;</span><br><span class="line">        cu.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="http://blog.csdn.net/liyulei316686082/article/details/7230709" title="http://blog.csdn.net/liyulei316686082/article/details/7230709" target="_blank" rel="noopener">http://blog.csdn.net/liyulei316686082/article/details/7230709</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 导入现有数据库]]></title>
      <url>http://blog.skymxc.com/2017/02/26/copyDB/</url>
      <content type="html"><![CDATA[<blockquote>
<p> <strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<p>我们都知道 Android的 数据库默认是放在data\data\packageName\datbases\下的;<br>要导入现有的数据库将我们的数据库在 程序第一次启动的时候将数据库放在这个目录下，然后我们配置好SqliteDabase对象就可以 直接操作了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 数据库从 assets 复制到 databases下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//data/data/packageName/databases/</span></span><br><span class="line">   File mkdir = <span class="keyword">new</span> File(getFilesDir().getParent(),<span class="string">"databases"</span>);</span><br><span class="line">   <span class="comment">//创建 databases文件夹</span></span><br><span class="line">    <span class="keyword">if</span> (!mkdir.exists()) mkdir.mkdirs();</span><br><span class="line">    Log.e(TAG, <span class="string">"copyDb: mkdir="</span>+mkdir.getPath());</span><br><span class="line">    <span class="comment">//数据库文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(mkdir,<span class="string">"SinBusinessWssm1.db"</span>);</span><br><span class="line">    <span class="comment">//只是在程序第一次启动时创建</span></span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">      <span class="comment">//获取 assets管理</span></span><br><span class="line">        AssetManager assets = getAssets();</span><br><span class="line">        <span class="comment">//执行文件复制</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream open = assets.open(<span class="string">"SinBusinessWssm1.db"</span>);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len ;</span><br><span class="line">            <span class="keyword">while</span> ((len = open.read(bs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(bs,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            fos.flush();</span><br><span class="line">            fos.close();</span><br><span class="line">            open.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Log.e(TAG, <span class="string">"copyDb: exists="</span>+file.getPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySql命令集锦]]></title>
      <url>http://blog.skymxc.com/2017/01/08/mysqlcommand/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2017/01/08/mysqlcommand/" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="MySQL命令"><a href="#MySQL命令" class="headerlink" title="MySQL命令"></a>MySQL命令</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><blockquote>
<p>如果存在就先删了吧</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists db_ name;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建数据库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database db_name;</span><br></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\create_database.png" alt="创建数据库"></p>
<h2 id="查看所有用户"><a href="#查看所有用户" class="headerlink" title="查看所有用户"></a>查看所有用户</h2><blockquote>
<p>所有的用户都存储于系统的user表里</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user from mysql.user;</span><br></pre></td></tr></table></figure>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>创建用户其实就是向 ‘mysql.user’ 表里插入一条记录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#create user &apos;用户名‘@&apos;用户登录ip % 表示无限制也可以是localhost&apos; identified by  &apos;密码’</span><br><span class="line"></span><br><span class="line">create user &apos;mxc&apos;@&apos;localhost&apos; identified by &apos;mxc&apos;;</span><br></pre></td></tr></table></figure>
<h2 id="查询用户权限"><a href="#查询用户权限" class="headerlink" title="查询用户权限"></a>查询用户权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#show grants for 用户名@&apos;IP地址&apos;;</span><br><span class="line"></span><br><span class="line">show grants for mxc@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure>
<h2 id="为用户授权"><a href="#为用户授权" class="headerlink" title="为用户授权"></a>为用户授权</h2><blockquote>
<p>在创建一个用户的时候默认的权限只有登录权限，想要其他的权限必须授权；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#mxc用户拥有test数据库的所有权限</span><br><span class="line"></span><br><span class="line">grant all on test.* to mxc@localhost identified by &apos;mxc&apos;;</span><br></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\show_grant_permission.png" alt="为用户授权"></p>
<h3 id="权限列表"><a href="#权限列表" class="headerlink" title="权限列表"></a>权限列表</h3><h4 id="数据库-数据表-数据列权限："><a href="#数据库-数据表-数据列权限：" class="headerlink" title="数据库/数据表/数据列权限："></a>数据库/数据表/数据列权限：</h4><ul>
<li>Alter: 修改已存在的数据表(例如增加/删除列)和索引。</li>
<li>Create: 建立新的数据库或数据表。</li>
<li>Delete: 删除表的记录。</li>
<li>Drop: 删除数据表或数据库。</li>
<li>INDEX: 建立或删除索引。</li>
<li>Insert: 增加表的记录。</li>
<li>Select: 显示/搜索表的记录。</li>
<li>Update: 修改表中已存在的记录。</li>
</ul>
<h4 id="全局管理MySQL用户权限："><a href="#全局管理MySQL用户权限：" class="headerlink" title="全局管理MySQL用户权限："></a>全局管理MySQL用户权限：</h4><ul>
<li>file: 在MySQL服务器上读写文件。</li>
<li>PROCESS: 显示或杀死属于其它用户的服务线程。</li>
<li>RELOAD: 重载访问控制表，刷新日志等。</li>
<li>SHUTDOWN: 关闭MySQL服务。</li>
</ul>
<h4 id="特别的权限："><a href="#特别的权限：" class="headerlink" title="特别的权限："></a>特别的权限：</h4><ul>
<li>ALL: 允许做任何事(和root一样)。</li>
<li>USAGE: 只允许登录–其它什么也不允许做</li>
</ul>
<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><blockquote>
<p>创建之前先删</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists table_name;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">	id int auto_increment primary key,</span><br><span class="line">	name varchar(50) not null,</span><br><span class="line">	age int default 18,</span><br><span class="line">	sex int default 0,</span><br><span class="line">	dept int not null)</span><br><span class="line">	default charset =utf8;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看表结构</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc table_name;</span><br></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\create_table.png" alt="创建表"></p>
<blockquote>
<p>默认值设置</p>
</blockquote>
<ul>
<li>int类型：默认值也得是整型，并且default后边不要()括号。 </li>
<li><p>char类型：默认值使用单引号。</p>
</li>
<li><p>DATETIME类型：NOW()函数以’YYYY-MM-DD HH:MM:SS’返回当前的日期时间，可以直接存到DATETIME字段中。不支持使用系统默认值。 </p>
</li>
<li><p>DATE类型：CURDATE()以’YYYY-MM-DD’的格式返回今天的日期，可以直接存到DATE字段中。不支持使用系统默认值。 </p>
</li>
<li><p>TIME类型：CURTIME()以’HH:MM:SS’的格式返回当前的时间，可以直接存到TIME字段中。不支持使用系统默认值。 </p>
</li>
</ul>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into table_name values(对应的列的值）；</span><br></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\insertdata.png" alt="插入数据"></p>
<h2 id="为已存在的表添加外键"><a href="#为已存在的表添加外键" class="headerlink" title="为已存在的表添加外键"></a>为已存在的表添加外键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add constraint 外键名字 foreign key(外键字段名） references 外表(对应表的字段);</span><br><span class="line"></span><br><span class="line"># 为 employee 添加外键  employee表的dept字段对应dept表里的 d_id字段</span><br><span class="line">alter table employee add constraint FK_ED foreign key(dept) references dept(d_id);</span><br></pre></td></tr></table></figure>
<h2 id="查看创建表的SQL语句"><a href="#查看创建表的SQL语句" class="headerlink" title="查看创建表的SQL语句"></a>查看创建表的SQL语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\show_create_table.png" alt="查看创建表的SQL语句"></p>
<h2 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 列名 数据类型;</span><br><span class="line"># 为 dept表增加 d_location列</span><br><span class="line">alter table dept add d_location varchar(200);</span><br></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\commands\alter_table_add_column.png" alt="添加列"></p>
<h1 id="description"><a href="#description" class="headerlink" title="description"></a>description</h1><blockquote>
<p>平时用到的SQL语句记录，持续更新中….</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql5.7.17解压版安装教程]]></title>
      <url>http://blog.skymxc.com/2017/01/05/installMysql5-7/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong>总结 转载注明: <a href="https://sky-mxc.github.io/2017/01/05/installMysql5-7/" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="Mysql5-7-17-解压版安装"><a href="#Mysql5-7-17-解压版安装" class="headerlink" title="Mysql5.7.17 解压版安装"></a>Mysql5.7.17 解压版安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>解压版下载地址(需要登录) <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a></p>
<p><img src="\images\database\msyql\install\download.png" alt="下载"></p>
<p>下载后解压到你想要安装的目录就可以了</p>
<p><img src="\images\database\msyql\install\decompression.png" alt="解压后"></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>为了方便使用，不必每次都进入bin目录 就添加环境变量，如果不嫌麻烦就不必添加了</p>
<p>增加系统环境变量： <strong>MYSQL_HOME</strong> ，值就是你的MySQL目录了 例如：D:\tools\database\mysql-5.7.17-winx64</p>
<p><img src="\images\database\msyql\install\addsysPath.png" alt="增加环境变量"></p>
<p>在path变量后追加 <strong>%MYSQL_HOME%\bin;</strong>  注意前面加分号；</p>
<h2 id="初始化数据库得到data目录"><a href="#初始化数据库得到data目录" class="headerlink" title="初始化数据库得到data目录"></a>初始化数据库得到data目录</h2><p>两种命令方式 一种是初始化一个无密码的 root ，一个是初始化一个随机密码的root<br>无密码的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br></pre></td></tr></table></figure>
<p>随机密码的方式，不过要记住随即密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure>
<p><img src="\images\database\msyql\install\initialize.jpg" alt="初始化data目录"></p>
<h2 id="配置-my-imi文件"><a href="#配置-my-imi文件" class="headerlink" title="配置 my.imi文件"></a>配置 my.imi文件</h2><blockquote>
<p>主要是配置 basedir,datadir,port,在5.7之后 有些配置是不识别的例如：<code>default-character-set=utf8</code></p>
</blockquote>
<pre><code>
#安装目录 
 basedir = D:\\tools\\database\\mysql-5.7.17-winx64

# 数据库存放目录
 datadir = D:\\tools\\database\\mysql-5.7.17-winx64\\data

#端口
 port = 3306
</code></pre><p><img src="\images\database\msyql\install\imi.png" alt="配置数据库参数"></p>
<p>ps:这里需要注意的地方是 目录的间隔标识 使用 <code>\\</code> 在win7上可能会出现 无法识别的情况</p>
<h2 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h2><p>在bin目录下 输入命令</p>
<pre><code>mysqld -install
</code></pre><p><img src="\images\database\msyql\install\registerService.png" alt="添加服务"></p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>输入命令</p>
<pre><code>net start mysql
</code></pre><p><img src="\images\database\msyql\install\start.png" alt="启动服务"></p>
<h2 id="登录数据库并修改密码"><a href="#登录数据库并修改密码" class="headerlink" title="登录数据库并修改密码"></a>登录数据库并修改密码</h2><p>进入数据库,因为没有密码 ，回车即可进入</p>
<pre><code>mysql -u root -p
</code></pre><p>修改root 密码 </p>
<pre><code>set password = password(&apos;新密码&apos;);
</code></pre><p><img src="\images\database\msyql\install\login&amp;updatePwd.png" alt="登录并修改密码"></p>
<blockquote>
<p>退出并测试密码 </p>
</blockquote>
<p><img src="\images\database\msyql\install\exit.png" alt="测试密码"></p>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><blockquote>
<p>在安装的时候 遇到了一个坑，在win7上是坑，而我在win10测试的时候这个坑就不会出现；这个疑惑实在不解；</p>
</blockquote>
<pre><code>
MySQL 服务正在启动 .
MySQL 服务无法启动。

服务没有报告任何错误。

请键入 NET HELPMSG 3534 以获得更多的帮助。
</code></pre><p> 这里遇到这个情况是因为在my.imi配置中 目录间隔符没有使用 <code>\\</code> 在更改后重新初始化;<br> 因为在之前已经初始化过一次了，在这次初始化之前要把data目录清空，否则会执行不成功</p>
<p><img src="\images\database\msyql\install\error.png" alt="错误"></p>
<p>清空data目录后，重新初始化即可</p>
<p><img src="\images\database\msyql\install\success.png" alt="成功"></p>
<p>over</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>http://blog.skymxc.com/2017/01/04/designModel-observer/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc总结</strong> 转载请注明：<a href="https://sky-mxc.github.io/2016/12/25/designModel-observer" target="_blank" rel="noopener">https://sky-mxc.github.io/2016/12/25/designModel-observer</a></p>
</blockquote>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><blockquote>
<p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听一个主题对象，当主题对象在状态上发生改变时，通知所有的观察者对象，并让他们自动更新自己；</p>
</blockquote>
<h2 id="观察者模式的组成"><a href="#观察者模式的组成" class="headerlink" title="观察者模式的组成"></a>观察者模式的组成</h2><h3 id="抽象主题角色："><a href="#抽象主题角色：" class="headerlink" title="抽象主题角色："></a>抽象主题角色：</h3><p> 将所有的观察者引用存放到一个集合中，每个主题可以拥有任意数量的观察者；主题提供一个接口，用来增加，移除通知观察者。一般用一个抽象类或接口来实现；</p>
<h3 id="抽象观察者角色："><a href="#抽象观察者角色：" class="headerlink" title="抽象观察者角色："></a>抽象观察者角色：</h3><p>为所有的观察者定义一个接口，在得到主题通知时更新自己；</p>
<h3 id="具体主题角色："><a href="#具体主题角色：" class="headerlink" title="具体主题角色："></a>具体主题角色：</h3><p>在具体主题状态发生改变时，通知所有登记过的观察者。具体主题通常由一个子类实现；</p>
<h3 id="具体观察者角色："><a href="#具体观察者角色：" class="headerlink" title="具体观察者角色："></a>具体观察者角色：</h3><p>该角色实现抽象观察者角色所要求的更新接口，在得到主题通知时更新自己，让本身的状态和观察者的状态相协调。通常是一个自类实现。如果需啊，可以在内部保存观察的主题的引用。</p>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><h3 id="抽象观察者角色"><a href="#抽象观察者角色" class="headerlink" title="抽象观察者角色"></a>抽象观察者角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象观察者接口</span></span><br><span class="line"><span class="comment"> * Created by sky-mxc on 2016/12/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IObserver</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主题发生变化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="抽象主题角色"><a href="#抽象主题角色" class="headerlink" title="抽象主题角色"></a>抽象主题角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象主题</span></span><br><span class="line"><span class="comment"> * Created by sky-mxc on 2016/12/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//观察者 集合</span></span><br><span class="line">    <span class="keyword">protected</span> List&lt;IObserver&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//主题名字</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ISubject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加 观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(IObserver observer)</span></span>&#123;</span><br><span class="line">       observers.add(observer);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(IObserver observer)</span></span>&#123;</span><br><span class="line">       observers.remove(observer);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 通知内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyUpdate</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体主题角色"><a href="#具体主题角色" class="headerlink" title="具体主题角色"></a>具体主题角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体主题</span></span><br><span class="line"><span class="comment"> * Created by sky-mxc on 2016/12/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">ISubject</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyUpdate</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (IObserver observer :observers)&#123;</span><br><span class="line">            observer.update(str+<span class="string">"\t\t\t--- "</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体观察者角色"><a href="#具体观察者角色" class="headerlink" title="具体观察者角色"></a>具体观察者角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体观察者</span></span><br><span class="line"><span class="comment"> * Created by sky-mxc on 2016/12/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> <span class="keyword">implements</span> <span class="title">IObserver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"接收到了通知："</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Observer observer1 =<span class="keyword">new</span> Observer(<span class="string">"张三"</span>);</span><br><span class="line">        Observer observer2 =<span class="keyword">new</span> Observer(<span class="string">"李四"</span>);</span><br><span class="line">        Observer observer3 =<span class="keyword">new</span> Observer(<span class="string">"王五"</span>);</span><br><span class="line"> </span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject(<span class="string">"PM"</span>);</span><br><span class="line">        subject.addObserver(observer1);</span><br><span class="line">        subject.addObserver(observer2);</span><br><span class="line">        subject.addObserver(observer3);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            subject.notifyUpdate(<span class="string">"通知："</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>*<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="result："><a href="#result：" class="headerlink" title="result："></a>result：</h3><p><img src="\images\java\designModel\运行结果.png" alt="运行结果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用百度定位当前位置并获取附近的位置]]></title>
      <url>http://blog.skymxc.com/2016/12/19/baiduLocation/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong> 总结 ；欢迎转载交流 <a href="https://sky-mxc.github.io/2016/12/19/baiduLocation/" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<pre><code>1. 下载sdk
2. 生成 SHA1码（debug,和release版本）
3. 申请key
4. 集成sdk
5. 获取位置（包含附近poi）
</code></pre><h2 id="下载定位sdk"><a href="#下载定位sdk" class="headerlink" title="下载定位sdk"></a>下载定位sdk</h2><p>链接 <a href="http://lbsyun.baidu.com/index.php?title=android-locsdk/geosdk-android-download" title="http://lbsyun.baidu.com/index.php?title=android-locsdk/geosdk-android-download" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=android-locsdk/geosdk-android-download</a></p>
<h2 id="生成-SHA1-码"><a href="#生成-SHA1-码" class="headerlink" title="生成 SHA1 码"></a>生成 SHA1 码</h2><blockquote>
<p>在填写 SHA1码的时候能填写两个，发布版和开发版，如果是的一个人开发的话两个都填一个电脑生成的就好了，如果是多人的话，最好是两个码从两个电脑生成；因为如果码不对的话，定位是无法使用的；</p>
</blockquote>
<h3 id="debug-版"><a href="#debug-版" class="headerlink" title="debug 版"></a>debug 版</h3><ol>
<li>定位到  .android 目录下：</li>
<li>打开cmd  输入命令  keytool -list -v -keystore debug.keystore</li>
<li>输入口令 ：android （百度地图官网提供）</li>
<li>就得到了SHA1 码：<br><img src="\images\Android\BaiduLocation\getDebugSHA1.png" alt="开发版SHA1码"></li>
</ol>
<h3 id="发布版"><a href="#发布版" class="headerlink" title="发布版"></a>发布版</h3><p>在获取发布版的SHA1前 要对项目进行签名</p>
<ol>
<li>输入命令 keytool -list -v -keystore jrjh.jks   （ps:jrjh.jks 是你签名是的keystore）</li>
<li>口令输入你的密码</li>
<li>得到 发布版的SHA1<br><img src="\images\Android\BaiduLocation\getReleaseSHA1.png" alt="发布版SHA1码"></li>
</ol>
<h2 id="申请key"><a href="#申请key" class="headerlink" title="申请key"></a>申请key</h2><p><img src="\images\Android\BaiduLocation\申请key.png" alt="申请key"></p>
<h2 id="集成sdk"><a href="#集成sdk" class="headerlink" title="集成sdk"></a>集成sdk</h2><p>详细文档地址：<a href="http://lbsyun.baidu.com/index.php?title=android-locsdk/guide/buildprojec" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=android-locsdk/guide/buildprojec</a></p>
<h2 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h2><h3 id="定义位置帮助类"><a href="#定义位置帮助类" class="headerlink" title="定义位置帮助类"></a>定义位置帮助类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> com.baidu.location.BDLocation;</span><br><span class="line"><span class="keyword">import</span> com.baidu.location.BDLocationListener;</span><br><span class="line"><span class="keyword">import</span> com.baidu.location.LocationClient;</span><br><span class="line"><span class="keyword">import</span> com.baidu.location.LocationClientOption;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Location utils.</span></span><br><span class="line"><span class="comment"> * 位置 帮助类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 孟祥超 on 2016.12.15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LocationHelper"</span>;</span><br><span class="line">    <span class="keyword">public</span> LocationClient client= <span class="keyword">new</span> LocationClient(AppUtils.getAppContext());</span><br><span class="line">    <span class="comment">//位置监听</span></span><br><span class="line">    <span class="keyword">private</span> BDLocationListener locationListener = <span class="keyword">new</span> BDLocationListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveLocation</span><span class="params">(BDLocation bdLocation)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//  2016/12/15 发送一个广播啊</span></span><br><span class="line">            Log.i(TAG, <span class="string">"onReceiveLocation: address="</span>+bdLocation.getAddrStr());</span><br><span class="line">            Intent intent =<span class="keyword">new</span> Intent(Constants.Intent.LOCATION_CHANGE);</span><br><span class="line">            intent.putExtra(<span class="string">"location"</span>,bdLocation);</span><br><span class="line">            AppUtils.getAppContext().sendBroadcast(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LocationHelper locationHelper;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取位置帮助类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> location helper</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 孟祥超 on 2016.12.15 14:16:01</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LocationHelper <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (locationHelper == <span class="keyword">null</span>)&#123;</span><br><span class="line">            locationHelper = <span class="keyword">new</span> LocationHelper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  locationHelper;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LocationHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        initLocation();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//初始化 定位</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocationClientOption option = <span class="keyword">new</span> LocationClientOption();</span><br><span class="line">        option.setIsNeedLocationPoiList(<span class="keyword">true</span>);  <span class="comment">//获取附近 poi</span></span><br><span class="line">        option.setIsNeedAddress(<span class="keyword">true</span>);  <span class="comment">//需要详细位置</span></span><br><span class="line">        option.setCoorType(<span class="string">"bd09ll"</span>);   <span class="comment">//百度的编码</span></span><br><span class="line">        option.setScanSpan(<span class="number">1000</span>*<span class="number">3</span>); <span class="comment">//3秒 一次</span></span><br><span class="line">        option.setIsNeedLocationDescribe(<span class="keyword">true</span>); <span class="comment">//位置语义化</span></span><br><span class="line">        client.setLocOption(option);    <span class="comment">//设置参数</span></span><br><span class="line">        client.registerLocationListener(locationListener);  <span class="comment">//注册获取位置监听</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放 位置对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 孟祥超 on 2016.12.15 14:23:04</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (locationHelper == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        client.unRegisterLocationListener(locationListener);</span><br><span class="line">        locationHelper = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接受广播并更新UI"><a href="#接受广播并更新UI" class="headerlink" title="接受广播并更新UI"></a>接受广播并更新UI</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">//获取到 位置信息</span></span><br><span class="line">    <span class="keyword">private</span> BroadcastReceiver locationChangeReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            BDLocation location =intent.getParcelableExtra(<span class="string">"location"</span>);</span><br><span class="line">            <span class="keyword">if</span> (location == <span class="keyword">null</span> || TextUtils.isEmpty(location.getAddrStr()))&#123;</span><br><span class="line">                letterCreateAddress.setText(<span class="string">"没有定位的外星球....."</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.i(TAG, <span class="string">"onReceive: address ="</span>+location.getAddrStr());</span><br><span class="line">            letterCreateAddress.setText(location.getAddrStr());</span><br><span class="line">            List&lt;Poi&gt; pois = location.getPoiList();</span><br><span class="line">            <span class="keyword">if</span> (pois != <span class="keyword">null</span> &amp;&amp; pois.size() != <span class="number">0</span>)&#123;</span><br><span class="line">                nearbyAddress = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Poi poi :pois)&#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"onReceive: poi ="</span>+poi.getName());</span><br><span class="line">                nearbyAddress.add(poi.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在项目中已经测试可用；这里做个总结</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用github+hexo 搭建个人博客]]></title>
      <url>http://blog.skymxc.com/2016/12/04/buildBlogs/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc总结</strong> 转载注明：<a href="https://sky-mxc.github.io/2016/09/29/buildBlogs" target="_blank" rel="noopener">https://sky-mxc.github.io/2016/09/29/buildBlogs</a></p>
</blockquote>
<h1 id="githubPages-hexo-搭建个人博客"><a href="#githubPages-hexo-搭建个人博客" class="headerlink" title="githubPages + hexo 搭建个人博客"></a>githubPages + hexo 搭建个人博客</h1><blockquote>
<p>hexo是基于git和Node.js的 必须先安装 git和Node.js;</p>
</blockquote>
<h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><blockquote>
<p>Node.js 下载地址 <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a> 选择好安装路径之后一路 next就可以了;<br>检测是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p>
<p>查看 npm是否安装 以前的版本没有集成npm，新版本已经集成了npn<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -version</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/checkNode.png" alt="image"></p>
<h2 id="hexo-安装"><a href="#hexo-安装" class="headerlink" title="hexo 安装"></a>hexo 安装</h2><blockquote>
<p>关于hexo 的安装 在官网有很详细的教程 ：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p>
<p>安装 hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/安装hexo.png" alt="image"></p>
<blockquote>
<p>检测安装是否成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/checkHexo.png" alt=""></p>
<blockquote>
<p>指定一个文件夹 必须是空目录 配置hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="/images/github+hexo/initHexo.png" alt="image"><br><img src="/images/github+hexo/initHexo2.png" alt="image"></p>
<blockquote>
<p>安装完成后会生成一些文件 具体目录的用途 官网说的很清楚</p>
<ul>
<li>_config.yml   网站的配置信息。大部分的参数在这里配置</li>
<li>package.json    应用程序的信息</li>
<li>scaffolds  <strong>模板</strong> 文件夹</li>
<li>source     资源文件夹 存放 资源 如图片之类的；除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li>
<li>themes   主题文件夹  Hexo很久主题生成静态页面</li>
</ul>
<p>剩下的就是配置了 主要是在 _config.yml中配置 怎么配置 官网也解释的跟清楚了。这里说一下主要的，详情移步官网查看:<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration.html</a></p>
</blockquote>
<ul>
<li>title 网站标题</li>
<li>subtitle 子标题</li>
<li>description  网站描述</li>
<li>language  使用语言</li>
<li>author 你的名字</li>
</ul>
<p><img src="/images/github+hexo/settingHexo.png" alt="image"></p>
<blockquote>
<p>到这里基本上本地已经配置完了 现在可以 测试一下了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 生成静态文件 生成文件在public 目录下</span><br><span class="line">$ hexo s # 启动本地预览 hexo s --debug 命令可以用来调试</span><br></pre></td></tr></table></figure>
<p><img src="/images/github+hexo/serverHexo.png" alt="image"><br><img src="/images/github+hexo/hexoTest0.png" alt="image"></p>
<h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><blockquote>
<p>首先在github上建一个repository 名字格式：[your_user_name.github.io]</p>
<p>例如我的  sky-mxc.github.io</p>
</blockquote>
<p><img src="/images/github+hexo/github仓库.png" alt=""></p>
<blockquote>
<p>要发布到 github 还得下载 一个组件( hexo-deployer-git) 执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p><em>还需要修改 _config.yml  ;参考官网得说明</em><br><img src="/images/github+hexo/发布到github前的配置.png" alt=""></p>
<p><strong>我的配置如下：</strong><br><img src="/images/github+hexo/我的发布配置.png" alt=""></p>
<p>配置完之后 就可以发布到 github上了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d  #发布</span><br></pre></td></tr></table></figure></p>
<p>发布完成之后 就可输入网址查看了 这里贴一下我的吧：<a href="https://sky-mxc.github.io" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<p><img src="/images/github+hexo/发布完成0.png" alt=""></p>
<blockquote>
<p><strong>这里就基本搭建完成了</strong> </p>
<p>常用 命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清理之前的内容</span><br><span class="line">hexo g # 生成静态文件</span><br><span class="line">hexo d #部署</span><br><span class="line">hexo s # 启动本地服务 ，可以通过 http://localhost:4000查看</span><br><span class="line">hexo s --debug # 使用debug模式启动服务</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><blockquote>
<p>感觉默认主题有点low 关于主题的选择 这里贴个连接 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p>
<p>我要更换的主题：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p>
<p>在要theme 目录下 clone<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>clone完成后 修改 _config.yml 将theme 的值修改为 next</p>
<p><img src="/images/github+hexo/修改主题.png" alt=""></p>
<blockquote>
<p>具体看官网配置：<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[相机和相册选取图片并剪裁]]></title>
      <url>http://blog.skymxc.com/2016/11/03/SelectPhoto/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong> 总结 转载注明<a href="https://sky-mxc.github.io/2016/11/03/SelectPhoto" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="图片的选择"><a href="#图片的选择" class="headerlink" title="图片的选择"></a>图片的选择</h1><blockquote>
<p>这两天做头像模块的时候，使用到了相册，相机，剪裁，自定义圆形图片；这里做个总结吧</p>
</blockquote>
<p>这里关于权限的处理 之前已经做过总结了，就不再写了 <a href="https://sky-mxc.github.io/2016/10/08/permission" target="_blank" rel="noopener">https://sky-mxc.github.io/2016/10/08/permission</a></p>
<ul>
<li>相册选取</li>
<li>相机选取</li>
<li>剪裁</li>
<li>自定义圆形图片</li>
</ul>
<h2 id="相册选取"><a href="#相册选取" class="headerlink" title="相册选取"></a>相册选取</h2><blockquote>
<p>图库选取之后获得的是这个图片的路径，<br>我的实现方法是通过ContentResovler来获取路径，存储在文件夹里，然后启动剪裁程序去剪裁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行图库选取图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokePhoto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Log.i(TAG, <span class="string">"invokePhoto: "</span>);</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK);</span><br><span class="line">    intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,<span class="string">"image/*"</span>);</span><br><span class="line">    startActivityForResult(intent,PHOTO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取图片路径 存储并启动剪裁 ，存储文件的代码就不贴了，都是那一套<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String projection = MediaStore.Images.Media.DATA;</span><br><span class="line">Cursor cursor = getContentResolver().query(data.getData(), <span class="keyword">new</span> String[]&#123;projection&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">    String path = cursor.getString(cursor.getColumnIndex(projection));</span><br><span class="line">    Log.i(TAG, <span class="string">"onActivityResult: photoPath="</span> + path);</span><br><span class="line">    startPhotoZoom(Uri.fromFile(FileUtil.saveHeadImg(path)));</span><br><span class="line">&#125;</span><br><span class="line">cursor.close();</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="相机选取"><a href="#相机选取" class="headerlink" title="相机选取"></a>相机选取</h2><blockquote>
<p>在启动相机的时候 传入一个文件uri（和刚才相册临时存储的文件路径一致，方便使用），在拍照完毕，直接去读取该图片 并执行剪裁 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行拍照</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String state = Environment.getExternalStorageState();</span><br><span class="line">    <span class="keyword">if</span>(state.equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(FileUtil.getHeadImage()));</span><br><span class="line">        startActivityForResult(intent, CAMERA);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"检测不到SD卡，无法使用"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="剪裁"><a href="#剪裁" class="headerlink" title="剪裁"></a>剪裁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开系统图片裁剪功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPhotoZoom</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.android.camera.action.CROP"</span>);</span><br><span class="line">    intent.setDataAndType(uri,<span class="string">"image/*"</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"crop"</span>,<span class="keyword">true</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"aspectX"</span>,<span class="number">1</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"aspectY"</span>,<span class="number">1</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"outputX"</span>,<span class="number">200</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"outputY"</span>,<span class="number">200</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"scale"</span>,<span class="keyword">true</span>); <span class="comment">//黑边</span></span><br><span class="line">    intent.putExtra(<span class="string">"scaleUpIfNeeded"</span>,<span class="keyword">true</span>); <span class="comment">//黑边</span></span><br><span class="line">    intent.putExtra(<span class="string">"return-data"</span>,<span class="keyword">true</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"noFaceDetection"</span>,<span class="keyword">true</span>);</span><br><span class="line">    startActivityForResult(intent,ZOOM);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>剪裁后获取</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Bitmap bmp = data.getParcelableExtra(<span class="string">"data"</span>);</span><br><span class="line">    headImg.setImageBitmap(bmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义圆形图片"><a href="#自定义圆形图片" class="headerlink" title="自定义圆形图片"></a>自定义圆形图片</h2><p>对于这个实现方式想到了两种，看连接<br><a href="https://sky-mxc.github.io/2016/11/03/customCircleImageView" target="_blank" rel="noopener">https://sky-mxc.github.io/2016/11/03/customCircleImageView</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义圆形图片控件]]></title>
      <url>http://blog.skymxc.com/2016/11/03/customCircleImageView/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc</strong> 总结 转载注明<a href="https://sky-mxc.github.io/2016/11/03/customCircleImageView" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="自定义圆形ImageView"><a href="#自定义圆形ImageView" class="headerlink" title="自定义圆形ImageView"></a>自定义圆形ImageView</h1><p>圆形ImageView在头像显示用的比较普遍了，今天对于实现圆形ImageView做个总结；</p>
<p>主要思路是 重写 onDraw() ;方法有两个：</p>
<ul>
<li>使用paint的Shader(着色器)将图片印在一个圆的画板上</li>
<li>使用Bitmap创建一个空的Canvas(画板)，在画板上画一个圆和显示的图片，paint图像混合模式显示</li>
</ul>
<h2 id="着色器-方式"><a href="#着色器-方式" class="headerlink" title="着色器 方式"></a>着色器 方式</h2><h2 id="不带边框"><a href="#不带边框" class="headerlink" title="不带边框"></a>不带边框</h2><blockquote>
<p>思路</p>
</blockquote>
<ul>
<li>将图片压缩到和控件的大小一致</li>
<li>创建Bitmap 着色器</li>
<li>创建画笔并设置着色器</li>
<li>使用带有着色器的画笔在画板上画圆 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawShader</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    Drawable mDrawable = getDrawable();</span><br><span class="line">    <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</span><br><span class="line">        Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</span><br><span class="line">        <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//图片缩放，参数2 目标宽度，参数3目标高度，参数4 是否过滤</span></span><br><span class="line">        bmp = Bitmap.createScaledBitmap(bmp,getWidth(),getHeight(),<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//着色器</span></span><br><span class="line">        Shader shader = <span class="keyword">new</span> BitmapShader(bmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class="line">        paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setShader(shader);</span><br><span class="line">        canvas.drawCircle(getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果</p>
</blockquote>
<p><img src="\images\Android\CircleImageView\shader_0.png" alt="无边框效果"></p>
<h2 id="加边框"><a href="#加边框" class="headerlink" title="加边框"></a>加边框</h2><p>有时候我们需要为头像加上一个圆的边框显得更好看一点，其实这个也很好实现，在绘制图片之前先绘制一个带有颜色的圆，根据边框的大小，将图片缩小一点，这样就将边框显示出来了。</p>
<h3 id="画边框"><a href="#画边框" class="headerlink" title="画边框"></a>画边框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">paint.setColor(outColor);</span><br><span class="line">paint.setStyle(Paint.Style.FILL);</span><br><span class="line">canvas.drawCircle(getWidth()/<span class="number">2</span>,getHeight()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,paint);</span><br></pre></td></tr></table></figure>
<h3 id="绘制图片-将边框大小空出来-getWidth-outWidth-2-2"><a href="#绘制图片-将边框大小空出来-getWidth-outWidth-2-2" class="headerlink" title="绘制图片 将边框大小空出来 (getWidth()-outWidth*2)/2"></a>绘制图片 将边框大小空出来 <code>(getWidth()-outWidth*2)/2</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawShader</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    Drawable mDrawable = getDrawable();</span><br><span class="line">    <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</span><br><span class="line">        Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</span><br><span class="line">        <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//图片缩放，参数2 目标宽度，参数3目标高度，参数4 是否过滤</span></span><br><span class="line">        bmp = Bitmap.createScaledBitmap(bmp,getWidth(),getHeight(),<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//着色器</span></span><br><span class="line">        Shader shader = <span class="keyword">new</span> BitmapShader(bmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class="line">        paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setShader(shader);</span><br><span class="line">        canvas.drawCircle(getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,(getWidth()-outWidth*<span class="number">2</span>)/<span class="number">2</span>,paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果</p>
</blockquote>
<p><img src="\images\Android\CircleImageView\shader_1.png" alt="边框效果"></p>
<h3 id="着色器方式全部代码"><a href="#着色器方式全部代码" class="headerlink" title="着色器方式全部代码"></a>着色器方式全部代码</h3><h3 id="自定义属性-边框颜色和宽度"><a href="#自定义属性-边框颜色和宽度" class="headerlink" title="自定义属性 边框颜色和宽度"></a>自定义属性 边框颜色和宽度</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleImageView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"out_width"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>&gt;</span><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"out_color"</span> <span class="attr">format</span>=<span class="string">"color"</span>&gt;</span><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="重写-onDraw-绘制图片"><a href="#重写-onDraw-绘制图片" class="headerlink" title="重写 onDraw() 绘制图片"></a>重写 onDraw() 绘制图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.skymxc.lesson_36_view_override;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapShader;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PorterDuff;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PorterDuffXfermode;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Shader;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.BitmapDrawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by sky-mxc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CircleImageView"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outWidth = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> outColor = Color.RED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint paint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        initAttrs(attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line"><span class="comment">//        canvas.drawColor(Color.YELLOW);</span></span><br><span class="line">        paint.setColor(outColor);</span><br><span class="line">        paint.setStyle(Paint.Style.FILL);</span><br><span class="line">        canvas.drawCircle(getWidth()/<span class="number">2</span>,getHeight()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,paint);</span><br><span class="line">        drawShader(canvas);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawShader</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        Drawable mDrawable = getDrawable();</span><br><span class="line">        <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</span><br><span class="line">            Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</span><br><span class="line">            <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//图片缩放，参数2 目标宽度，参数3目标高度，参数4 是否过滤</span></span><br><span class="line">            bmp = Bitmap.createScaledBitmap(bmp,getWidth(),getHeight(),<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//着色器</span></span><br><span class="line">            Shader shader = <span class="keyword">new</span> BitmapShader(bmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class="line">            paint = <span class="keyword">new</span> Paint();</span><br><span class="line">            paint.setShader(shader);</span><br><span class="line">            canvas.drawCircle(getWidth()/<span class="number">2</span>,getWidth()/<span class="number">2</span>,(getWidth()-outWidth*<span class="number">2</span>)/<span class="number">2</span>,paint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAttrs</span><span class="params">(AttributeSet attrs)</span></span>&#123;</span><br><span class="line">        TypedArray array = getContext().obtainStyledAttributes(attrs,R.styleable.CircleImageView);</span><br><span class="line">        <span class="keyword">int</span> len =  array.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> attr = array.getIndex(i);</span><br><span class="line">            <span class="keyword">switch</span> (attr)&#123;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.CircleImageView_out_color:</span><br><span class="line">                    <span class="keyword">this</span>.outColor = array.getColor(attr,Color.GREEN);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.CircleImageView_out_width:</span><br><span class="line">                    <span class="keyword">this</span>.outWidth = (<span class="keyword">int</span>) array.getDimension(attr,<span class="number">2</span>);</span><br><span class="line">                    Log.i(TAG, <span class="string">"initAttrs: outWidth="</span>+<span class="keyword">this</span>.outWidth);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用图片混合模式显示"><a href="#使用图片混合模式显示" class="headerlink" title="　使用图片混合模式显示"></a>　使用图片混合模式显示</h2><blockquote>
<p>创建 Bitmap 使用图片混合模式 将图片和圆形交叉显示</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> Bitmap <span class="title">getCircleBitmap</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Drawable mDrawable = getDrawable();</span><br><span class="line">        <span class="keyword">if</span> (mDrawable == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mDrawable <span class="keyword">instanceof</span> BitmapDrawable)&#123;</span><br><span class="line">            Bitmap bmp = ((BitmapDrawable)mDrawable).getBitmap();</span><br><span class="line">            <span class="keyword">if</span> (bmp == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            paint  = <span class="keyword">new</span> Paint();</span><br><span class="line">            paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//创建空的位图</span></span><br><span class="line">            Bitmap output = Bitmap.createBitmap(getWidth(),getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">            <span class="comment">//创建画板，以位图进行创建</span></span><br><span class="line">            Canvas canvas= <span class="keyword">new</span> Canvas(output);</span><br><span class="line">            <span class="comment">//Bitmap就成了 透明的图片</span></span><br><span class="line">            canvas.drawColor(Color.TRANSPARENT);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//画一个圆形 和图像大小一致</span></span><br><span class="line">            paint.setColor(Color.WHITE);</span><br><span class="line">            canvas.drawCircle(output.getWidth()/<span class="number">2</span>,output.getHeight()/<span class="number">2</span>,output.getWidth()/<span class="number">2</span>,paint);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            //paint 相交模式 必须在 两者中间定义  显示交叉的地方  ;前面是 dst;后面是 src</span></span><br><span class="line">            paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //绘制 Bitmap</span></span><br><span class="line">            Rect src = <span class="keyword">new</span> Rect(<span class="number">0</span>,<span class="number">0</span>,bmp.getWidth(),bmp.getHeight());</span><br><span class="line">            RectF dst = <span class="keyword">new</span> RectF(<span class="number">0</span>,<span class="number">0</span>,output.getWidth(),output.getHeight());</span><br><span class="line">            canvas.drawBitmap(bmp,src,dst,paint);</span><br><span class="line">            <span class="keyword">return</span>  output;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">      Bitmap bmp=  getCircleBitmap();</span><br><span class="line">       canvas.drawBitmap(bmp,<span class="number">0</span>,<span class="number">0</span>,paint);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于这种方式的实现主要在于 paint 的交叉模式； PorterDuffXfermode</p>
</blockquote>
<p>实现的方式有很多种 目前是两种.  未完待续。。。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebView最基本的使用]]></title>
      <url>http://blog.skymxc.com/2016/10/24/WebView/</url>
      <content type="html"><![CDATA[<h1 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h1><blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/24/WebView" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
<p>Android内置webkit内核的高性能浏览器,而WebView则是在这个基础上进行封装后的一个 控件,WebView直译网页视图,我们可以简单的看作一个可以嵌套到界面上的一个浏览器控件！<br>在  版本之后内核换成了 chrome 内核，但是 对外的API并没有更换</p>
</blockquote>
<h2 id="相关的类和方法"><a href="#相关的类和方法" class="headerlink" title="相关的类和方法"></a>相关的类和方法</h2><h3 id="WebChromeClient"><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h3><blockquote>
<p>主要处理 对话框，网站title，icon 加载进度 等;侧重于对 内容的处理</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>onJsAlert(WebView view,String url,String message,JsResult result)</td>
<td style="text-align:left">对js中alert对话框的处理</td>
</tr>
<tr>
<td>onJsConfirm(WebView view,String url,String message,JsResult result)</td>
<td style="text-align:left">对js中confirm对话框的处理</td>
</tr>
<tr>
<td>onJsPrompt(WebView view,String url,String message,String defaultValue,JsPromptResult result)</td>
<td style="text-align:left">对js中 Prompt对话框的处理</td>
</tr>
<tr>
<td>onProgressChanged(WebView view,int newProgress)</td>
<td style="text-align:left">当加载进度发生变化时调用</td>
</tr>
<tr>
<td>onReceivedIcon(WebView view, Bitmap icon)</td>
<td style="text-align:left">获得网页的icon</td>
</tr>
<tr>
<td>onReceivedTitle(WebView view,String title)</td>
<td style="text-align:left">获取网页的标题</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意点： 在对话框处理完之后要对网页做出回应确认处理完成(<code>result.confirm();</code>)不让网页就会卡在 对话框那个地方 ，无法再次进行相应</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WebChromeClient chromeClient = <span class="keyword">new</span> WebChromeClient()&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//网页加载进度显示</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</span><br><span class="line">         Log.i(TAG, <span class="string">"onProgressChanged: progress="</span>+newProgress);</span><br><span class="line">         <span class="keyword">if</span> (newProgress!=<span class="number">100</span>)&#123;</span><br><span class="line">             pb.setVisibility(View.VISIBLE);</span><br><span class="line">             pb.setProgress(newProgress);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             pb.setVisibility(View.GONE);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</span><br><span class="line">         Toast.makeText(MainActivity.<span class="keyword">this</span>, message, Toast.LENGTH_SHORT).show();</span><br><span class="line">         <span class="comment">//确认交互完成 提交结果 勿忘</span></span><br><span class="line">         result.confirm();</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h3><blockquote>
<p>主要处理WebView的各种请求通知； 侧重于对<em>浏览器</em>本身事件重写</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>onPageStared(WebView view,String url)</td>
<td style="text-align:left">通知主程序网页开始加载</td>
</tr>
<tr>
<td>onPageFinished(WebView view,String url,Bitmap favicon)</td>
<td style="text-align:left">通知主程序网页加载完毕</td>
</tr>
<tr>
<td>doUpdateVisitedHistory(WebView view,String url,boolean isReload)</td>
<td style="text-align:left">更新历史记录</td>
</tr>
<tr>
<td>onLoadResource(WebView view,String url)</td>
<td style="text-align:left">通知主程序即将加载指定url的资源</td>
</tr>
<tr>
<td>onScaleChanged(WebView view,float oldScale,float newScale)</td>
<td style="text-align:left">WebView的缩放改变时调用</td>
</tr>
<tr>
<td>shouldOverrideKeyEvent(WebView view,KeyEvent event)</td>
<td style="text-align:left">控制WebView是否处理按键事件，如果返回true则处理，返回false则不处理</td>
</tr>
<tr>
<td>shouldOverrideUrlLoading(WebView view,String url)</td>
<td style="text-align:left">控制对新加载的url的处理;例如在本view打开，返回true说明 处理 ，返回false说明不处理;</td>
</tr>
<tr>
<td>onReceivedError(WebView view,int errorCode,String description,String failingUrl)</td>
<td style="text-align:left">遇到不可恢复的错误信息时调用</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意点：</strong><br><code>shouldOverrideUrlLoading(WebView view,String url)</code> 在 API 21中过时； 替代方法为<code>shouldOverrideUrlLoading(WebView view, WebResourceRequest request)</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主要处理WebView的各种请求通知 侧重于 对 浏览器本身事件重写</span></span><br><span class="line"><span class="keyword">private</span> WebViewClient viewClient = <span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"shouldOverrideUrlLoading: url="</span>+url);</span><br><span class="line">        <span class="comment">//当打开一个新的 url 时在本view打开，不跳转至浏览器</span></span><br><span class="line">        view.loadUrl(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="WebSettings"><a href="#WebSettings" class="headerlink" title="WebSettings"></a>WebSettings</h3><blockquote>
<p>WebView相关配置的设置，比如setJavaScriptEnabled()设置是否允许JS脚本执行 部分方法如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>setUseWideViewPort(boolean enabled)</td>
<td style="text-align:left">是否支持viewPort</td>
</tr>
<tr>
<td>setLoadWithOverviewMode(boolean enabled)</td>
<td style="text-align:left">自适应屏幕</td>
</tr>
<tr>
<td>setSupportZoom(boolean enabled)</td>
<td style="text-align:left">是否支持缩放</td>
</tr>
<tr>
<td>setBuiltInZoomControls(boolean enabled)</td>
<td style="text-align:left">目前没测试</td>
</tr>
<tr>
<td>setDisplayZoomControls(boolean enabled)</td>
<td style="text-align:left">是否支持缩放控件</td>
</tr>
<tr>
<td>setDefaultFontSize(int size)</td>
<td style="text-align:left">设置默认字体大小</td>
</tr>
<tr>
<td>setDefaultTextEncodingName(String encoding)</td>
<td style="text-align:left">默认字符编码可用来解决中文乱码问题</td>
</tr>
<tr>
<td>setJavaScriptEnabled(boolean enabled)</td>
<td style="text-align:left">是否支持js交互</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持js交互</span></span><br><span class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置默认编码方式</span></span><br><span class="line">webView.getSettings().setDefaultTextEncodingName(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line"> webView.getSettings().setDefaultFontSize(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<h3 id="WebView-自身的常用方法"><a href="#WebView-自身的常用方法" class="headerlink" title="WebView 自身的常用方法"></a>WebView 自身的常用方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>loadUrl(String url)</td>
<td style="text-align:left">加载指定的url</td>
</tr>
<tr>
<td>loadData(String data,String mimeType,String encoding)</td>
<td style="text-align:left">加载指定的Data到WebView中.使用”data:”作为标记头,该方法不能加载网络数据.其中mimeType为数据类型如:textml,image/jpeg. encoding为字符的编码方式</td>
</tr>
<tr>
<td>loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)</td>
<td style="text-align:left">loadData的升级版 可以以baseUrl为标准路径加载相应的文件等</td>
</tr>
<tr>
<td>getSettings()</td>
<td style="text-align:left">返回一个WebSettings对象,用来控制WebView的属性设置</td>
</tr>
<tr>
<td>setWebViewClient(WebViewClient client)</td>
<td style="text-align:left">为WebView指定一个WebViewClient对象</td>
</tr>
<tr>
<td>setWebChromeClient(WebChromeClient client)</td>
<td style="text-align:left">为WebView制定一个 WebChromeClient对象</td>
</tr>
<tr>
<td>setBackgroundColor(int color)</td>
<td style="text-align:left">设置WebView的背景颜色</td>
</tr>
<tr>
<td>setOnScrollChangeListener(View.OnScrollChangeListener changeListener)</td>
<td style="text-align:left">滚动条滚动监听，在API 23 加入</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意点：</strong> <em>WebView 背景色 需要代码进行设置 ；xml属性不好使；</em></p>
<p>加载指定的Url <code>loadUrl()</code>;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//url</span></span><br><span class="line">webView.loadUrl(<span class="string">"http://baidu.com"</span>);</span><br></pre></td></tr></table></figure></p>
<p>加载网页代码 <code>loadData()</code>;如果出现中文乱码问题 需要修改 mimeType 为<code>text/html;charset=utf-8</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载网页代码</span></span><br><span class="line">webView.loadData(<span class="string">"&lt;h1&gt;title&lt;/h1&gt;"</span>,<span class="string">"text/html"</span>,<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure></p>
<p>基于一个url加载代码 <code>loadDataWithBaseURL()</code>不需要考虑中文乱码问题<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载 以url为基准的数据 比loadData 更加强大</span></span><br><span class="line"><span class="comment">//parameter1 ：代码内容中相对地址的基准路径</span></span><br><span class="line"><span class="comment">//parameter2 ：网页代码</span></span><br><span class="line"><span class="comment">//parameter3 ：数据的内容类型</span></span><br><span class="line"><span class="comment">//parameter4 : 编码</span></span><br><span class="line"><span class="comment">//parameter5 ：上一个页面地址</span></span><br><span class="line">webView.loadDataWithBaseURL(<span class="string">"http://www.baidu.com"</span>,<span class="string">"&lt;html&gt;&lt;h1&gt;title&lt;/h1&gt;this is content&lt;/html&gt;"</span>,<span class="string">"text/html"</span>,<span class="string">"utf-8"</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>加载 assets 目录下网页</strong></p>
<ul>
<li><p>目录结构</p>
<p> <img src="\images\Android\WebView\loadData目录.jpg" alt="目录结构"></p>
</li>
<li><p>html  代码</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>节操<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">onclick</span>=<span class="string">"del(this)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>贞操<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">onclick</span>=<span class="string">"del(this)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>css</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="selector-tag">table</span>&#123;</span><br><span class="line">   <span class="attribute">border</span>:double <span class="number">2px</span> <span class="number">#ccc</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>js</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">delBt</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> result = confirm(<span class="string">"确定删除吗？"</span>);</span><br><span class="line">   alert(<span class="string">"===="</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载html文件</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  加载 assets目录下文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InputStream  is =<span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">         is = getAssets().open(<span class="string">"index.html"</span>);</span><br><span class="line">         reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (reader.ready())&#123;</span><br><span class="line">            sb.append(reader.readLine().trim());</span><br><span class="line">        &#125;</span><br><span class="line">        Log.i(TAG, <span class="string">"getIndex: html="</span>+sb.toString());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="keyword">if</span> (is!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                     is.close();</span><br><span class="line">                 &#125;</span><br><span class="line">                <span class="keyword">if</span> (reader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>loadDataWithBaseURL</code>加载html网页<blockquote>
<p>因为使用外部样式 需要使用 loadDataWithBaseUrl() 因为这个可以使用相对基准路径 可以将assets目录作为 基准目录；html 根据基准目录加载响应的css</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> String data = getIndex();</span><br><span class="line">webView.loadDataWithBaseURL(<span class="string">"file:///android_asset/"</span>,data,<span class="string">"text/html"</span>,<span class="string">"utf-8"</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<pre><code>注意点：
     路径的格式  ：file:///android_asset/
</code></pre><ul>
<li><p>开启 js交互</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//支持js交互</span></span><br><span class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//背景色</span></span><br><span class="line">webView.setBackgroundColor(Color.GRAY);</span><br></pre></td></tr></table></figure>
</li>
<li><p>效果</p>
<blockquote>
<p> 可以看到 css文件 加载到了 边框已经显示出来了</p>
</blockquote>
<p> <img src="\images\Android\WebView\load_0.png" alt="效果">;</p>
<blockquote>
<p>原始的 网页confirm 确认框</p>
</blockquote>
<p> <img src="E:\Study\hexo\source\images\Android\WebView\load_1.png" alt="效果">;</p>
<blockquote>
<p>处理原始网页confirm 改为 AlertDialog对话框</p>
</blockquote>
<pre><code>//处理JavaScript confirm 对话框
@Override
public boolean onJsConfirm(WebView view, String url, String message, final JsResult result) {
    new AlertDialog.Builder(MainActivity.this)
        .setTitle(&quot;确认提示&quot;)
        .setMessage(message)
        .setNegativeButton(&quot;Ok&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                result.confirm();
            }
        })
        .setNeutralButton(&quot;cancel&quot;, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                result.cancel();
            }
        })
        .show();
    return true;
}
</code></pre><p>  <img src="E:\Study\hexo\source\images\Android\WebView\load_3.png" alt="效果">;</p>
<blockquote>
<p>对 alert 对话框进行处理 改为 Toast显示</p>
</blockquote>
<pre><code>            @Override
public boolean onJsAlert(WebView view, String url, String message, JsResult result) {
    Toast.makeText(MainActivity.this, message, Toast.LENGTH_SHORT).show();
    //确认交互完成 提交结果 勿忘
    result.confirm();
    return true;
}
</code></pre></li>
</ul>
<p><img src="\images\Android\WebView\laod_2.png" alt="效果">;</p>
<h2 id="获取网站的-title-ico信息"><a href="#获取网站的-title-ico信息" class="headerlink" title="获取网站的 title ico信息"></a>获取网站的 title ico信息</h2><blockquote>
<p>重写 <code>WebChromeClient</code>内部方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chromeClient = <span class="keyword">new</span> WebChromeClient()&#123;</span><br><span class="line">    <span class="comment">//获取 title</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span></span>&#123;</span><br><span class="line">        tvTitle.setText(title);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取 icon</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedIcon</span><span class="params">(WebView view, Bitmap icon)</span> </span>&#123;</span><br><span class="line">        ImgIcon.setImageBitmap(icon);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="\images\Android\WebView\getTitleAndIcon.png" alt="效果">;</p>
<h2 id="WebView-的滚动监听"><a href="#WebView-的滚动监听" class="headerlink" title="WebView 的滚动监听"></a>WebView 的滚动监听</h2><blockquote>
<p>在API 23 加入了滚动监听的 get/set方法 ；<br>在API 23之前需要重写 WebView的  <code>protected void onScrollChanged(final int l, final int t, final int oldl,final int oldt){}</code>然后再对外提供一个接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//滚动条监听</span></span><br><span class="line">webView.setOnScrollChangeListener(<span class="keyword">new</span> View.OnScrollChangeListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollChange</span><span class="params">(View v, <span class="keyword">int</span> scrollX, <span class="keyword">int</span> scrollY, <span class="keyword">int</span> oldScrollX, <span class="keyword">int</span> oldScrollY)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                Log.e(TAG, "onScrollChange: scrollX="+scrollX);</span></span><br><span class="line"><span class="comment">//                Log.e(TAG, "onScrollChange: oldScrollX="+oldScrollX);</span></span><br><span class="line">        Log.e(TAG, <span class="string">"onScrollChange: scrollY="</span>+scrollY);</span><br><span class="line"><span class="comment">//                Log.e(TAG, "onScrollChange: oldScrollY="+oldScrollY);</span></span><br><span class="line">        <span class="keyword">if</span> (scrollY&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            floatButton.setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            floatButton.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">        dy = scrollX;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于滚动条的设置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">webView.setHorizontalScrollBarEnabled(<span class="keyword">false</span>);  <span class="comment">//水平滚动条不显示</span></span><br><span class="line">webView.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY); <span class="comment">//WebView内部显示</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>回到顶部 实现 使用 方法 <code>scrollTo(x,y);</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">floatButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            Log.i(TAG, <span class="string">"onClick: dy="</span>+dy);</span><br><span class="line">            webView.scrollTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">            floatButton.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="网页自适应"><a href="#网页自适应" class="headerlink" title="网页自适应"></a>网页自适应</h2><blockquote>
<p>必须两个都写上, 缺一不可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">settings.setUseWideViewPort(<span class="keyword">true</span>);    <span class="comment">//支持 viewport</span></span><br><span class="line">settings.setLoadWithOverviewMode(<span class="keyword">true</span>);   <span class="comment">//自适应屏幕</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="\images\Android\WebView\scaleBefore.png" alt="效果">;<br><img src="\images\Android\WebView\scaleBehind.png" alt="效果">;</p>
<h2 id="支持缩放网页隐蔽缩放控件"><a href="#支持缩放网页隐蔽缩放控件" class="headerlink" title="支持缩放网页隐蔽缩放控件"></a>支持缩放网页隐蔽缩放控件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保留缩放功能 隐藏缩放控件</span></span><br><span class="line">settings.setBuiltInZoomControls(<span class="keyword">true</span>);</span><br><span class="line">settings.setDisplayZoomControls(<span class="keyword">false</span>);</span><br><span class="line">settings.setSupportZoom(<span class="keyword">true</span>);        <span class="comment">//支持缩放</span></span><br></pre></td></tr></table></figure>
<h2 id="回退键实现-返回网页回退-而不退出程序"><a href="#回退键实现-返回网页回退-而不退出程序" class="headerlink" title="回退键实现 返回网页回退 而不退出程序"></a>回退键实现 返回网页回退 而不退出程序</h2><blockquote>
<p>重写 <code>onBackPressed()</code> 通过 <code>canGoBack()</code>判断是否能够回退 ，通过 <code>goBack()</code>实现回退 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断 WebView 是否可以回退</span></span><br><span class="line">    <span class="keyword">if</span> (webView.canGoBack())&#123;</span><br><span class="line">        webView.goBack();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"onBackPressed: currentTimeMillis="</span>+System.currentTimeMillis());</span><br><span class="line">            Log.e(TAG, <span class="string">"onBackPressed: exit="</span>+exit);</span><br><span class="line">            Log.e(TAG, <span class="string">"onBackPressed: currentTimeMillis- exit="</span>+(System.currentTimeMillis()-exit));</span><br><span class="line">        <span class="keyword">if</span> (System.currentTimeMillis()-exit &gt;<span class="number">2000</span>)&#123;</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"再按一次退出"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            exit= System.currentTimeMillis();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onBackPressed();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="与js交互-js调用本地API"><a href="#与js交互-js调用本地API" class="headerlink" title="与js交互 js调用本地API"></a>与js交互 js调用本地API</h2><h2 id="调用js-function"><a href="#调用js-function" class="headerlink" title="调用js function"></a>调用js function</h2><h1 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h1><blockquote>
<p>参考文章： <a href="http://www.runoob.com/w3cnote/android-tutorial-webview.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/android-tutorial-webview.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android的广播]]></title>
      <url>http://blog.skymxc.com/2016/10/16/Broadcast/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/16/Broadcast/" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h1><p>在Android中 Broadcast是一种 广泛运用在引用程序之间传输信息的机制。<br>而BroadcastReceiver 是对发送出来的Broadcaset进行过滤接受并响应的一类组件。<br>如果不需发送广播到别的应用 使用 LocalBroadcastManger就可以了。</p>
<h2 id="发送和接收流程"><a href="#发送和接收流程" class="headerlink" title="发送和接收流程"></a>发送和接收流程</h2><p>发送和接受的过程：</p>
<ol>
<li>发送<br>首先在需要发送信息的地方 ，把要发送的信息和用于过滤的信息（如action 和 category）封装进intent对象，然后调用 Context.sendBroadcast() 、sendOrderBroadcast()或sendStickBroadcast()方法，把intent对象以广播的形式发送出去</li>
<li>接收<br>当intent发送后，所有已经注册的BroadcastReceiver会检查注册时的IntentFilter是否与发送的intent匹配。若匹配就会调用BroadcastReceiver的onReceiver() 方法。所以 我们定义一个BroadcastReceiver的时候必须实现onReceiver()方法</li>
<li>Note：<br>若在使用sendBroadcast()的方法时指定了接受权限，则只有在AndroidManifest.xml文件中声明了对应权限的BroadcastReceiver才能就收到；<br>同样的，如果在注册BroadcastReceiver时指定了可接受的Broadcast的权限，则只有在包的AndroidManifest.xml中用标签声明了。拥有此权限的Context对象所发送的Broadcast才能被这个BroadcastReceiver所接收。</li>
</ol>
<blockquote>
<p><em>虽然 广播的发送和接受都是通过intent类，但是广播intent完全和 启动activity的intent不同。<br>BroadcastReceiver是无法看到启动activity的intent的。同样的，当你发送一个Broadcast Intent 是不会去发现或启动一个activity的。<br>两者是完全不同的。启动activity的intent是属于前台用户可以看到的操作，而 Broadcat Intent是后台操作 。通常用户是看不到 的。</em></p>
</blockquote>
<hr>
<h2 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h2><blockquote>
<p>两大类 广播类型 ：</p>
</blockquote>
<ol>
<li>Normal broadcasts(普通广播) :使用 Context.sendBroadcast ;完全是异步操作，广播发出后广播的所有接受者通常都在同一时间运行并得到结果，但是顺序不固定。这样效率是很高的但是 接收器的结果并不能影响其他的接受者</li>
<li>Orderd broadcasts(有序广播) :同步操作一次发送到一个接受者 ，按照预先声明的顺序依次接受，（-1000~1000）优先级高的优先接受到广播，优先级高的可以更改广播或者完全终止这个广播（abortBroadcast()），那优先级低的接受者将不能接受到</li>
</ol>
<p><img src="\images\Android\broadcast\Type.png" alt="两大类型"></p>
<hr>
<h2 id="接收广播"><a href="#接收广播" class="headerlink" title="接收广播"></a>接收广播</h2><blockquote>
<p>使用broadcastsReceiver 接受广播，定义自己的广播接收器 只需继承BroadcastsReceiver；<br>    广播接收器创建完毕后需要注册才能接受到。注册分为两种 动态和静态；如果发送的广播附带有权限 ，那接受者必须有相应的权限才能接受到</p>
<ul>
<li>在BroadcastReceiver中一般是用来启动 某个activity或者启动某个服务，不允许执行耗时操作，也不允许开线程，最好是操作不要超过10秒。*</li>
</ul>
</blockquote>
<h3 id="定义-接收器-接收网络变化"><a href="#定义-接收器-接收网络变化" class="headerlink" title="定义 接收器  接收网络变化"></a>定义 接收器  接收网络变化</h3><blockquote>
<p>继承 <code>BroadcastReceiver</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by sky-mxc</span></span><br><span class="line"><span class="comment"> * 网络状态改变接收器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"NetworkReceiver"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG,<span class="string">"=====网络状态改变了"</span>);</span><br><span class="line">        Toast.makeText(context,<span class="string">"网络状态改变了"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h3><blockquote>
<p>静态注册：在manifest文件  使用 <receiver> 标签注册 ，并在标签内设置过滤器(intentFilter) 什么时候都可以接受到广播，只要应用程序安装了 就是注册了，如果有广播就能接受 但是规定有部分广播 静态注册无法接受 例如屏幕的关闭和点亮广播。 </receiver></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".receiver.NetworkReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--priority 默认0--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h3><blockquote>
<p> 动态注册： 动态的在代码中定义。先定义设置好一个IntentFilter对象。然后在需要注册时调用Context.registerReceiver()，如果取消就调用Context.unregisterReceiver()方法。（动态注册的BroadcastReceiver在context被销毁后也会被干死）</p>
<p>使用 <code>context.registerReceiver()</code> 注册</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">receiver = <span class="keyword">new</span> NetworkReceiver();</span><br><span class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</span><br><span class="line">intentFilter.setPriority(<span class="number">600</span>);</span><br><span class="line">registerReceiver(receiver,intentFilter);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>取消注册 <code>context.unregisterReceiver();</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    unregisterReceiver(receiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="\images\Android\broadcast\注册类型.png" alt="注册类型"></p>
<hr>
<h2 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h2><h3 id="发送普通广播"><a href="#发送普通广播" class="headerlink" title="发送普通广播"></a>发送普通广播</h3><blockquote>
<p>使用方法 <code>sendBroadcast()</code> 发送广播。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送普通广播</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.mxc.example.broadcast.normal"</span>);</span><br><span class="line">intent.putExtra(<span class="string">"type"</span>,<span class="string">"normal"</span>);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>接收发送的广播</p>
</blockquote>
<p>Manifest文件注册</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".receiver.MyReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.mxc.example.broadcast.normal"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接收发送的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyReceiver"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG,<span class="string">"==action:"</span>+intent.getAction()+<span class="string">"===time:"</span>+ SystemClock.currentThreadTimeMillis());</span><br><span class="line">        Log.i(TAG,<span class="string">"==type:"</span>+intent.getStringExtra(<span class="string">"type"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h3><p>使用 <code>sendOrderedBroadcast()</code> 如果接受者不需要权限 设置为null即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent orderIntent = <span class="keyword">new</span> Intent(<span class="string">"com.mxc.example.broadcast.order"</span>);</span><br><span class="line">orderIntent.putExtra(<span class="string">"type"</span>,<span class="string">"order"</span>);</span><br><span class="line"><span class="comment">//不添加权限</span></span><br><span class="line">sendOrderedBroadcast(orderIntent,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></p>
<p>可以通过 <code>priority</code> 属性来设置接受者的优先级，优先级的接受者可以 终止广播的发送或者 添加额外的数据或者修改 发送的广播数据</p>
<blockquote>
<p>终止 广播<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (intent.getAction().equals(<span class="string">"com.mxc.example.broadcast.order"</span>))&#123;</span><br><span class="line">    <span class="comment">//终止广播</span></span><br><span class="line">    abortBroadcast();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>添加或者修改数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加额外的结果</span></span><br><span class="line">Bundle b = getResultExtras(<span class="keyword">true</span>);<span class="comment">//获取数据 如果没有就创建</span></span><br><span class="line">b.putString(<span class="string">"result"</span>,<span class="string">"MyReceiver"</span>);</span><br><span class="line">setResultExtras(b);</span><br></pre></td></tr></table></figure></p>
<p>获取 额外的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.e(TAG,<span class="string">"==result:"</span>+getResultExtras(<span class="keyword">true</span>).getString(<span class="string">"result"</span>));</span><br></pre></td></tr></table></figure></p>
<p>Log 信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I/MyReceiver: ==action:com.mxc.example.broadcast.order===time:390</span><br><span class="line">I/MyReceiver: ==type:order</span><br><span class="line">I/SecondReceiver: ==action:com.mxc.example.broadcast.order===time:391</span><br><span class="line">I/SecondReceiver: ==type:order</span><br><span class="line">E/SecondReceiver: ==result:MyReceiver</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="本地广播"><a href="#本地广播" class="headerlink" title="本地广播"></a>本地广播</h2><blockquote>
<p>本地广播和广播的操作几乎是一致的不过是使用  LocalBroadcastManager 来管理的；发送的注册都是    <code>LocalBroadcastManager</code>实例来管理</p>
<p>本地广播和 广播一样  分为 异步广播和同步广播 </p>
</blockquote>
<h3 id="发送本地广播"><a href="#发送本地广播" class="headerlink" title="发送本地广播"></a>发送本地广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent localIntent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcast.local.async"</span>);</span><br><span class="line">manager.sendBroadcast(localIntent);</span><br><span class="line"><span class="comment">//发送 同步的（有序）的广播</span></span><br><span class="line"><span class="comment">//manager.sendBroadcastSync(localIntent);</span></span><br></pre></td></tr></table></figure>
<h3 id="接收本地广播"><a href="#接收本地广播" class="headerlink" title="接收本地广播"></a>接收本地广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">manager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line">receiver = <span class="keyword">new</span> LocalReceiver();</span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(<span class="string">"com.example.broadcast.local.async"</span>);</span><br><span class="line">manager.registerReceiver(receiver,filter);</span><br></pre></td></tr></table></figure>
<h2 id="各种广播"><a href="#各种广播" class="headerlink" title="各种广播"></a>各种广播</h2><ul>
<li><code>&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;&gt;&lt;/action&gt;</code>  开机广播<ul>
<li><code>&lt;permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;</code> 接受的权限</li>
</ul>
</li>
<li><code>android.intent.action.SCREEN_OFF</code> 屏幕点亮   规定 只有动态注册才可以</li>
<li><code>android.intent.action.SCREEN_ON</code> 屏幕关闭  规定 只有动态注册才可以</li>
<li><code>android.net.conn.CONNECTIVITY_CHANGE</code> 网络状态改变</li>
</ul>
<blockquote>
<p>特别感谢： 本文中的图 都是从菜鸟扒的 </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager 获取当前显示的Fragment]]></title>
      <url>http://blog.skymxc.com/2016/10/11/getCurrentFragment/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/11/getCurrentFragment/" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="Viewpager-获取当前显示的fragment"><a href="#Viewpager-获取当前显示的fragment" class="headerlink" title="Viewpager 获取当前显示的fragment"></a>Viewpager 获取当前显示的fragment</h1><h2 id="使用-getSupportFragmentManager-findFragmentByTag-方法"><a href="#使用-getSupportFragmentManager-findFragmentByTag-方法" class="headerlink" title="使用 getSupportFragmentManager().findFragmentByTag()方法"></a>使用 <code>getSupportFragmentManager().findFragmentByTag()</code>方法</h2><blockquote>
<p><code>Viewpager + FragmentPagerAdapter</code> 情况下 才好使； <code>FragmentPagerAdapter</code> 有一个特点 凡是加载过的Fragment 都会被保留,既然Fragment不会被销毁，那我们就可以使用<code>findFragmentByTag()</code> 方法找到它；但问题是动态创建的话 tag的设置；我们知道动态加载时是可以设置tag的，但是动态创建就没法设置了;如果viewpager使用的是适配器是 FragmentPagerAdapter 的话 ，Fragment就会被设置上<code>tag</code> 根据这个<code>tag</code> 我们就可以获取到当前显示的<code>fragment</code>了；下面看看这个过程</p>
<p>新创建时 tag ==null</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   PageTab  pageTab = tabs.get(position);</span><br><span class="line">    TabFragment tab = <span class="keyword">new</span> TabFragment();</span><br><span class="line">    Log.e(TAG,<span class="string">"====getItem===新创建时的tag:=="</span>+tab.getTag());</span><br><span class="line">    tab.getArguments().putSerializable(<span class="string">"tab"</span>,pageTab);</span><br><span class="line">    <span class="comment">//取出数据 新建Fragment</span></span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Log 查看 <code>tag</code> 时为 null</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E/FileListPagerAdapter: ====getItem===新创建时的tag:==null</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将 适配器设置给Viewpager后 的<code>tag</code></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: ==findCurrentFragment==pagerId:2131492976</span><br><span class="line">E/MainActivity: ==findCurrentFragment==currentItem:0</span><br><span class="line">E/MainActivity: =======findCurrentFragment=========完整Tag===android:switcher:2131492976:0</span><br><span class="line">E/MainActivity: =======findCurrentFragment=========当前显示的Fragment 的tag===:android:switcher:2131492976:0</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 可以看到 <code>tag</code>的组成；四部分 </p>
<ul>
<li>android :   &nbsp;&nbsp;&nbsp;&nbsp;   固定部分</li>
<li>switcher :  &nbsp;&nbsp;&nbsp;&nbsp;    固定部分</li>
<li>2131492976 : &nbsp;&nbsp;&nbsp;&nbsp;  ViewPager 的id</li>
<li>0     :     &nbsp;&nbsp;&nbsp;&nbsp;    ViewPager 当前显示的itemPostion</li>
</ul>
<p>既然<code>FragmentPagerAdapter</code>的特点是保存fragment状态。  就可以利用这个特点通过 <code>findFragmentByTag()</code> 找到这个Fragment</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Viewpager + FragmentPagerAdapter 情况下 获取 当前显示的Fragment,只能找已经加载过的Fragment</span></span><br><span class="line">Fragment fragment =  getSupportFragmentManager().findFragmentByTag(<span class="string">"android:switcher:"</span>+pager.getId()+<span class="string">":"</span>+pager.getCurrentItem());</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="重写适配器的-setPrimaryItem-方法"><a href="#重写适配器的-setPrimaryItem-方法" class="headerlink" title="重写适配器的 setPrimaryItem()方法 ;"></a>重写适配器的 <code>setPrimaryItem()</code>方法 ;</h2><blockquote>
<p>这个方法在每次viewpager滑动后都会被调用 而 object参数就是显示的Fragment ；可以在适配器中定义个变量 <code>currentFragment</code> 每次改变时都会获取到显示的Fragment</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrimaryItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</span><br><span class="line">    currentFragment = (TabFragment) object;</span><br><span class="line">    <span class="keyword">super</span>.setPrimaryItem(container, position, object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方式有一个缺陷 <code>setPrimaryItem()</code>是在 <code>viewpager</code>的滑动监听执行完后才会调用的；所以在 换的个滑动监听中获取当前显示的Fragment 是不对的</p>
</blockquote>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[6.0 运行时权限处理]]></title>
      <url>http://blog.skymxc.com/2016/10/08/permission/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明出处：<a href="https://sky-mxc.github.io/2016/10/08/permission" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="6-0-运行时权限处理"><a href="#6-0-运行时权限处理" class="headerlink" title="6.0 运行时权限处理"></a>6.0 运行时权限处理</h1><blockquote>
<p>在6.0以前 权限都是在安装时授权的，如果用户不授权就无法安装；<br>Android从6.0（API 23）开始 使用运行时权限，而不是像以前那样安装时授权。当你需要某些权限时，系统会向用户去申请权限。用户可以随时取消授权给你的权限。<br>6.0中权限分为两类 普通权限和危险权限，普通权限在AndroidManifest 文件中注册就可以得到，对于能获得用户隐私的权限属于危险权限。在使用的时候必须用户授权才能使用。例如 拍照，录音 sd卡的操作，危险权限被分为很多组，只要一组中的其中一项被授权 Android 就会将这一组的权限打包都授权给你app</p>
</blockquote>
<p><img src="\images\Android\permission\permission0.png" alt="image"></p>
<h2 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h2><blockquote>
<p>危险权限被分为了9组</p>
</blockquote>
<pre><code>Permission Group    Permissions

CALENDAR    • READ_CALENDAR 
            • WRITE_CALENDAR

CAMERA            • CAMERA

CONTACTS    • READ_CONTACTS
            • WRITE_CONTACTS
            • GET_ACCOUNTS

LOCATION    • ACCESS_FINE_LOCATION
            • ACCESS_COARSE_LOCATION
MICROPHONE    • RECORD_AUDIO

PHONE       • READ_PHONE_STATE
            • CALL_PHONE
            • READ_CALL_LOG
            • WRITE_CALL_LOG
            • ADD_VOICEMAIL
            • USE_SIP
            • PROCESS_OUTGOING_CALLS

SENSORS             • BODY_SENSORS

    SMS            • SEND_SMS
            • RECEIVE_SMS
            • READ_SMS
            • RECEIVE_WAP_PUSH
            • RECEIVE_MMS

STORAGE    • READ_EXTERNAL_STORAGE
        • WRITE_EXTERNAL_STORAGE
</code></pre><h2 id="普通权限"><a href="#普通权限" class="headerlink" title="普通权限"></a>普通权限</h2><pre><code>  • ACCESS_LOCATION_EXTRA_COMMANDS  
• ACCESS_NETWORK_STATE
• ACCESS_NOTIFICATION_POLICY
• ACCESS_WIFI_STATE
• BLUETOOTH
• BLUETOOTH_ADMIN
• BROADCAST_STICKY
• CHANGE_NETWORK_STATE
• CHANGE_WIFI_MULTICAST_STATE
• CHANGE_WIFI_STATE
• DISABLE_KEYGUARD
• EXPAND_STATUS_BAR
• GET_PACKAGE_SIZE
• INSTALL_SHORTCUT
• INTERNET
• KILL_BACKGROUND_PROCESSES
• MODIFY_AUDIO_SETTINGS
• NFC
• READ_SYNC_SETTINGS
• READ_SYNC_STATS
• RECEIVE_BOOT_COMPLETED
• REORDER_TASKS
• REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
• REQUEST_INSTALL_PACKAGES
• SET_ALARM
• SET_TIME_ZONE
• SET_WALLPAPER
• SET_WALLPAPER_HINTS
• TRANSMIT_IR
• UNINSTALL_SHORTCUT
• USE_FINGERPRINT
• VIBRATE
• WAKE_LOCK
    • WRITE_SYNC_SETTINGS
</code></pre><h2 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h2><h3 id="targetSdkVerion"><a href="#targetSdkVerion" class="headerlink" title="targetSdkVerion"></a>targetSdkVerion</h3><blockquote>
<p>申请权限之前必须先说一下tartgetSdkVersion ，目标sdk版本，一般定义在build.gradle文件中。<br>    如果 targetSDKVersion 是22 安装好之后 Android系统就知道这个App在系统API22一下都测试过了并且能正确运行的，假如这个App运行在了Android6.0系统上，Android就会对这个App很”照顾“，兼容它正确运行。6.0系统会把App申请的权限都默认给这个App。<br>但是 ，在6.0系统 ，用户可随时撤销授权给app的权限 ，即使系统默认都授权给你，用户也可以取消掉。这时就没权限了。所以即使是targetSDKVersion &lt; 23 也不是就万事大吉了。Android为我们提供了android.support.v4.content.PermissionChecker 来检测是否具有某些权限</p>
<p>判断 targetSdkVersion</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查targetSDKVersion 是否在 23以上</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkTargetSdkVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PackageInfo info= <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        info = getPackageManager().getPackageInfo(getPackageName(),<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> targetSdk=  info.applicationInfo.targetSdkVersion;</span><br><span class="line">    log(<span class="string">"TargetSdkVersion:"</span>+targetSdk);</span><br><span class="line">    <span class="keyword">if</span> (targetSdk&gt;=Build.VERSION_CODES.M)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h3><blockquote>
<p>在去请求权限之前 应该先检查一下系统 的版本 如果系统版本在6.0以上再去请求权限，如果不在就不去请求，直接使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查系统版本是否在6.0或者6.0以上</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Build.VERSION.SDK_INT 当前系统版本</span></span><br><span class="line">    <span class="comment">//Build.VERSION_CODES.M 6.0版本</span></span><br><span class="line">    <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;=Build.VERSION_CODES.M)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>PermissionChecker.checkSelfPermission()</strong> 方法就是用于检查App自身有没有某一个权限 此方法适用于 targetSdkVersion &lt; 23</p>
<p> <strong>context.checkSelfPermission()</strong>  适用于 targetSDKVersion &gt;=23</p>
<p>返回结果有三种 状态</p>
<ul>
<li>PermissionChecker.PERMISSION_GRANTED; //有权限</li>
<li>PermissionChecker.PERMISSION_DENIED ; //无权限</li>
<li>PermissionChecker.PERMISSION_DENIED_APP_OP;//无权限</li>
</ul>
<p>PermissionChecker.PERMISSION_DENIED 和 PermissionChecker.PERMISSION_DENIED_APP_OP 的区别:</p>
<ul>
<li>targetSDKVersion 小于23没有权限就返回 PermissionChecker.PERMISSION_DENIED_APP_OP</li>
<li>targetSdkVersion23或者以上的返回 PermissionChecker.PERMISSION_DENIED</li>
</ul>
</blockquote>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测targetSDKVersion 是否在23以上</span></span><br><span class="line"><span class="keyword">if</span> (checkTargetSdkVersion())&#123;</span><br><span class="line">    <span class="comment">//targetSDKVersion &gt;=23</span></span><br><span class="line">    <span class="comment">//检查是否具有读取短信的权限</span></span><br><span class="line">    result = checkSelfPermission(permission);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//targetSDKVersion &lt;23</span></span><br><span class="line">    <span class="comment">//检查是否具有读取短信的权限</span></span><br><span class="line">    result= PermissionChecker.checkSelfPermission(<span class="keyword">this</span>,permission);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="请求权限-1"><a href="#请求权限-1" class="headerlink" title="请求权限"></a>请求权限</h3><blockquote>
<p>使用 requestPermissions() 方法去请求权限 参数有两个 权限数组 和请求码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestPermissions(<span class="keyword">new</span> String[]&#123;<span class="string">"android.permission.READ_SMS"</span>&#125;,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在请求权限之前最好是跟用户解释清楚为什么要使用这个权限 ，用时候用户并不清楚为什么使用权限 就会被拒绝，如果一个权限被请求一次以上 在系统申请权限的Dialog会出现一个不再提醒的复选框 那怎么判断 用户是否勾选了这个 不再提醒呢 ，Android提供了 shouldShowRequestPermissionRationale() 方法;</p>
<p>这个方法 在 第一次请求的时候 和 在用户勾选了不再提醒时  返回false ，其他均返回true</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次请求就返回false 拒绝过返回true 或者 用户选择不再提示返回false</span></span><br><span class="line"><span class="keyword">boolean</span> answer=  shouldShowRequestPermissionRationale(permission);</span><br><span class="line">log(<span class="string">"shouldShowRequestPermissionRationale :"</span>+answer);</span><br><span class="line"><span class="keyword">if</span> (!answer)&#123;</span><br><span class="line">    <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).setTitle(<span class="string">"权限说明"</span>)</span><br><span class="line">            .setMessage(<span class="string">"此功能需要读取短信的权限，没有权限无法使用此功能。请在稍后授权后使用"</span>)</span><br><span class="line">            .setNegativeButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.M)</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .setNeutralButton(<span class="string">"取消"</span>,<span class="keyword">null</span>)</span><br><span class="line">            .show();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="\images\Android\permission\PermissionDescription.png" alt="image"></p>
<hr>
<h2 id="处理用户响应"><a href="#处理用户响应" class="headerlink" title="处理用户响应"></a>处理用户响应</h2><blockquote>
<p>重写 activity的 onRequestPermissionsResult() 的方法 处理权限的响应</p>
<p>权限的申请是可以多个权限一块申请的 ，所以 响应结果也是 数组和 请求的权限数组对应</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  申请权限的响应</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestCode 请求码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permissions 权限数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> grantResults 结果数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> SMS:</span><br><span class="line">          LogCheckResult(grantResults[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (grantResults.length&gt;<span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>]==PermissionChecker.PERMISSION_GRANTED)&#123;</span><br><span class="line">                <span class="comment">//TODO 读取短信</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                tv.setText(getSmsInPhone());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权失败"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整的短信读取权限申请-流程"><a href="#完整的短信读取权限申请-流程" class="headerlink" title="完整的短信读取权限申请 流程"></a>完整的短信读取权限申请 流程</h2><blockquote>
<p>请求权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求短信权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.M)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 权限</span></span><br><span class="line">        <span class="keyword">final</span> String permission = <span class="string">"android.permission.READ_SMS"</span>;</span><br><span class="line">    <span class="comment">//检查当前系统版本是否在6.0以上</span></span><br><span class="line">    <span class="keyword">if</span> (checkVersion())&#123;</span><br><span class="line">        <span class="keyword">int</span> result =-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//检测targetSDKVersion 是否在23以上</span></span><br><span class="line">            <span class="keyword">if</span> (checkTargetSdkVersion())&#123;</span><br><span class="line">                <span class="comment">//targetSDKVersion &gt;=23</span></span><br><span class="line">                <span class="comment">//检查是否具有读取短信的权限</span></span><br><span class="line">                result = checkSelfPermission(permission);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//targetSDKVersion &lt;23</span></span><br><span class="line">                <span class="comment">//检查是否具有读取短信的权限</span></span><br><span class="line">                result= PermissionChecker.checkSelfPermission(<span class="keyword">this</span>,permission);</span><br><span class="line">            &#125;</span><br><span class="line">            LogCheckResult(result);</span><br><span class="line">            <span class="keyword">if</span>(result==PermissionChecker.PERMISSION_GRANTED)&#123;</span><br><span class="line">                <span class="comment">//已经有了权限</span></span><br><span class="line">                <span class="comment">//TODO 读取短信</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                tv.setText(getSmsInPhone());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//没有权限</span></span><br><span class="line">                <span class="comment">//TODO 请求权限</span></span><br><span class="line">                <span class="comment">// 第一次请求就返回false 拒绝过返回true 或者 用户选择不再提示返回false</span></span><br><span class="line">              <span class="keyword">boolean</span> answer=  shouldShowRequestPermissionRationale(permission);</span><br><span class="line">                log(<span class="string">"shouldShowRequestPermissionRationale :"</span>+answer);</span><br><span class="line">                <span class="keyword">if</span> (!answer)&#123;</span><br><span class="line">                    <span class="keyword">new</span> AlertDialog.Builder(<span class="keyword">this</span>).setTitle(<span class="string">"权限说明"</span>)</span><br><span class="line">                            .setMessage(<span class="string">"此功能需要读取短信的权限，没有权限无法使用此功能。请在稍后授权后使用"</span>)</span><br><span class="line">                            .setNegativeButton(<span class="string">"确定"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">                                <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.M)</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">                                    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                            .setNeutralButton(<span class="string">"取消"</span>,<span class="keyword">null</span>)</span><br><span class="line">                            .show();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;,SMS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//无需请求</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">        tv.setText(getSmsInPhone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>响应处理</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> SMS:</span><br><span class="line">          LogCheckResult(grantResults[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (grantResults.length&gt;<span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>]==PermissionChecker.PERMISSION_GRANTED)&#123;</span><br><span class="line">                <span class="comment">//TODO 读取短信</span></span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权成功"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                tv.setText(getSmsInPhone());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">"读取短信授权失败"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>短信读取 代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSmsInPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log(<span class="string">"开始读取短信"</span>);</span><br><span class="line">    <span class="keyword">final</span> String SMS_URI_ALL = <span class="string">"content://sms/"</span>;</span><br><span class="line">    <span class="keyword">final</span> String SMS_URI_INBOX = <span class="string">"content://sms/inbox"</span>;</span><br><span class="line">    <span class="keyword">final</span> String SMS_URI_SEND = <span class="string">"content://sms/sent"</span>;</span><br><span class="line">    <span class="keyword">final</span> String SMS_URI_DRAFT = <span class="string">"content://sms/draft"</span>;</span><br><span class="line">    <span class="keyword">final</span> String SMS_URI_OUTBOX = <span class="string">"content://sms/outbox"</span>;</span><br><span class="line">    <span class="keyword">final</span> String SMS_URI_FAILED = <span class="string">"content://sms/failed"</span>;</span><br><span class="line">    <span class="keyword">final</span> String SMS_URI_QUEUED = <span class="string">"content://sms/queued"</span>;</span><br><span class="line"></span><br><span class="line">    StringBuilder smsBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Uri uri = Uri.parse(SMS_URI_ALL);</span><br><span class="line">        String[] projection = <span class="keyword">new</span> String[] &#123; <span class="string">"_id"</span>, <span class="string">"address"</span>, <span class="string">"person"</span>, <span class="string">"body"</span>, <span class="string">"date"</span>, <span class="string">"type"</span> &#125;;</span><br><span class="line">        Cursor cur = getContentResolver().query(uri, projection, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"date desc"</span>);      <span class="comment">// 获取手机内部短信</span></span><br><span class="line">        log(<span class="string">"cursor:"</span>+cur.getCount());</span><br><span class="line">        <span class="keyword">if</span> (cur.moveToFirst()) &#123;</span><br><span class="line">            <span class="keyword">int</span> index_Address = cur.getColumnIndex(<span class="string">"address"</span>);</span><br><span class="line">            <span class="keyword">int</span> index_Person = cur.getColumnIndex(<span class="string">"person"</span>);</span><br><span class="line">            <span class="keyword">int</span> index_Body = cur.getColumnIndex(<span class="string">"body"</span>);</span><br><span class="line">            <span class="keyword">int</span> index_Date = cur.getColumnIndex(<span class="string">"date"</span>);</span><br><span class="line">            <span class="keyword">int</span> index_Type = cur.getColumnIndex(<span class="string">"type"</span>);</span><br><span class="line"></span><br><span class="line">            do &#123;</span><br><span class="line">                String strAddress = cur.getString(index_Address);</span><br><span class="line">                <span class="keyword">int</span> intPerson = cur.getInt(index_Person);</span><br><span class="line">                String strbody = cur.getString(index_Body);</span><br><span class="line">                <span class="keyword">long</span> longDate = cur.getLong(index_Date);</span><br><span class="line">                <span class="keyword">int</span> intType = cur.getInt(index_Type);</span><br><span class="line"></span><br><span class="line">                SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">                Date d = <span class="keyword">new</span> Date(longDate);</span><br><span class="line">                String strDate = dateFormat.format(d);</span><br><span class="line"></span><br><span class="line">                String strType = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">if</span> (intType == <span class="number">1</span>) &#123;</span><br><span class="line">                    strType = <span class="string">"接收"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intType == <span class="number">2</span>) &#123;</span><br><span class="line">                    strType = <span class="string">"发送"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    strType = <span class="string">"null"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                smsBuilder.append(<span class="string">"[ "</span>);</span><br><span class="line">                smsBuilder.append(strAddress + <span class="string">", "</span>);</span><br><span class="line">                smsBuilder.append(intPerson + <span class="string">", "</span>);</span><br><span class="line">                smsBuilder.append(strbody + <span class="string">", "</span>);</span><br><span class="line">                smsBuilder.append(strDate + <span class="string">", "</span>);</span><br><span class="line">                smsBuilder.append(strType);</span><br><span class="line">                smsBuilder.append(<span class="string">" ]\n\n"</span>);</span><br><span class="line">            &#125; <span class="keyword">while</span> (cur.moveToNext());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!cur.isClosed()) &#123;</span><br><span class="line">                cur.close();</span><br><span class="line">                cur = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            smsBuilder.append(<span class="string">"no result!"</span>);</span><br><span class="line">        &#125; <span class="comment">// end if</span></span><br><span class="line"></span><br><span class="line">        smsBuilder.append(<span class="string">"getSmsInPhone has executed!"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLiteException ex) &#123;</span><br><span class="line">        log(<span class="string">"SQLiteException in getSmsInPhone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> smsBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>读取短信的代码参考这位大神的代码：<a href="http://blog.csdn.net/ithomer/article/details/7328321" target="_blank" rel="noopener">http://blog.csdn.net/ithomer/article/details/7328321</a></p>
<p>关于这次的Demo，github 地址： <a href="https://github.com/sky-mxc/AndroidDemo/tree/master/permission" target="_blank" rel="noopener">https://github.com/sky-mxc/AndroidDemo/tree/master/permission</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Animation]]></title>
      <url>http://blog.skymxc.com/2016/10/05/Animation/</url>
      <content type="html"><![CDATA[<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><ul>
<li><p>帧动画</p>
</li>
<li><p>补间动画</p>
</li>
<li><p>属性动画</p>
</li>
<li><p>Interpolator</p>
</li>
</ul>
<h2 id="帧动画-FrameAnimation"><a href="#帧动画-FrameAnimation" class="headerlink" title="帧动画 FrameAnimation"></a>帧动画 FrameAnimation</h2><blockquote>
<p>其实就是一个Drawable ，将一系列的图片联合起来顺序的播放。形成动画效果。</p>
</blockquote>
<p>帧动画本质就是一些图片的集合，要播放这个动画就必须将一系列的图片全部加载进内存中，所以帧动画的图片不易过大。</p>
<h3 id="创建drawable文件"><a href="#创建drawable文件" class="headerlink" title="创建drawable文件"></a>创建drawable文件</h3><ul>
<li><p>oneshot  ：是否只播放一次，</p>
</li>
<li><p>drawable ：一帧的图片</p>
</li>
<li><p>duration ：一帧播放的时间 毫秒单位</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">android:oneshot</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_01"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_02"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_03"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_04"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_5"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@mipmap/a_6"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用刚才的drawable文件做背景"><a href="#使用刚才的drawable文件做背景" class="headerlink" title="使用刚才的drawable文件做背景"></a>使用刚才的drawable文件做背景</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/image"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:adjustViewBounds</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@drawable/drawable_frame"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:clickable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:onClick</span>=<span class="string">"onClick"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="播放动画"><a href="#播放动画" class="headerlink" title="播放动画"></a>播放动画</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//FrameAnimation  帧动画</span></span><br><span class="line"></span><br><span class="line">((AnimationDrawable)image.getBackground()).start();</span><br></pre></td></tr></table></figure>
<p><img src="E:\Study\hexo\source/images/Android/animation/frameAnimation.gif" alt="image"></p>
<hr>
<h2 id="补间动画-tweenAnimation"><a href="#补间动画-tweenAnimation" class="headerlink" title="补间动画 tweenAnimation"></a>补间动画 tweenAnimation</h2><blockquote>
<pre><code>主要是对view的内容完成一系列的图形变换(缩放，透明，旋转，平移）来实现动画效果。
</code></pre></blockquote>
<pre><code>具体来说就是 预先定义一些指令 ，这些指令指定了图形变换的类型，触发时间，持续时间。指令可以预先定义在xml文件中也可以源代码的方式定义。程序沿着时间线执行这些指令就可以实现动画效果。

Android中提供了 Animation，Interpolator，Transformation 等类具体实现Tween动画，

Animation类及其子类是动画的核心模块，它实现了 各种动画效果如 平移 旋转 缩放 改变透明度等等。

Tween动画的每一帧都根据Interpolator对view的内容做一次图像变换，因此Animation的核心工作是做变换（transformation）；
</code></pre><p>Animation是基类 ，它记录了动画的通用属性和方法。主要的属性包括动画持续时间、重复次数、Interpolator等。</p>
<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ul>
<li><p>duration    ：动画时间  毫秒</p>
</li>
<li><p>infinite  ：无限次</p>
</li>
<li><p>fillAfter    是否停顿在最后一针</p>
</li>
<li><p>repeatMode  重复模式  值：restart 重新开始   reserve 反复</p>
</li>
<li><p>repeatCount ：重复次数</p>
</li>
<li><p>startOffset  ：开始延迟时间</p>
</li>
</ul>
<h3 id="常用Animation子类："><a href="#常用Animation子类：" class="headerlink" title="常用Animation子类："></a>常用Animation子类：</h3><ul>
<li><p>AlphaAnimation   改变Alpha值</p>
</li>
<li><p>TranslationAnimation  平移动画</p>
</li>
<li><p>RotateAnimation 旋转动画</p>
</li>
<li><p>ScaleAnimation 缩放动画</p>
</li>
<li><p>AnimationSet 动画集合</p>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p>补间动画 既可以使用 xml文件预先定义 也可以使用代码动态创建;</p>
<p>使用xml文件定义必须在 res/anim/目录下创建 文件;</p>
<p>可以使用 AnimationUtils的静态方法 loadAnimation()将动画文件加载</p>
</blockquote>
<h4 id="AlphaAnimation-透明度改变动画"><a href="#AlphaAnimation-透明度改变动画" class="headerlink" title="AlphaAnimation  透明度改变动画"></a>AlphaAnimation  透明度改变动画</h4><h5 id="定义-AlphaAnimation-文件"><a href="#定义-AlphaAnimation-文件" class="headerlink" title="定义 AlphaAnimation 文件"></a>定义 AlphaAnimation 文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alpha</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromAlpha</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toAlpha</span>=<span class="string">"0.1"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatCount</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatMode</span>=<span class="string">"reverse"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">alpha</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="加载-动画文件并播放"><a href="#加载-动画文件并播放" class="headerlink" title="加载 动画文件并播放"></a>加载 动画文件并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//AlphaAnimation xml定义</span></span><br><span class="line"></span><br><span class="line">AlphaAnimation alphaAnimation = (AlphaAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_alpha);</span><br><span class="line"></span><br><span class="line">view.startAnimation(alphaAnimation);</span><br></pre></td></tr></table></figure>
<h5 id="代码创建"><a href="#代码创建" class="headerlink" title="代码创建"></a>代码创建</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//AlphaAnimation 代码创建</span></span><br><span class="line"></span><br><span class="line">AlphaAnimation alphaAnimation1 = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.1f</span>,<span class="number">0.8f</span>);</span><br><span class="line"></span><br><span class="line">alphaAnimation1.setDuration(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">alphaAnimation1.setStartOffset(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">alphaAnimation1.setFillAfter(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">alphaAnimation1.setRepeatCount(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">alphaAnimation1.setRepeatMode(Animation.REVERSE);</span><br><span class="line"></span><br><span class="line">view.startAnimation(alphaAnimation1);</span><br></pre></td></tr></table></figure>
<h4 id="TranslationAnimation-平移动画"><a href="#TranslationAnimation-平移动画" class="headerlink" title="TranslationAnimation 平移动画"></a>TranslationAnimation 平移动画</h4><blockquote>
<ul>
<li><p>fromXDelta  X轴开始坐标</p>
</li>
<li><p>toXDelta    X轴结束坐标</p>
</li>
<li><p>fromYDelta  Y 轴开始坐标</p>
</li>
<li><p>toYDelta    Y轴结束坐标</p>
</li>
</ul>
</blockquote>
<p>&gt;</p>
<h5 id="定义动画文件"><a href="#定义动画文件" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">translate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromXDelta</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toXDelta</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatMode</span>=<span class="string">"reverse"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatCount</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fillBefore</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromYDelta</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toYDelta</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">translate</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="加载动画并播放"><a href="#加载动画并播放" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TranslateAnimation translateAnimation = (TranslateAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_translation);</span><br><span class="line"></span><br><span class="line">view.startAnimation(translateAnimation);</span><br></pre></td></tr></table></figure>
<h5 id="代码创建动画"><a href="#代码创建动画" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TranslateAnimation translateAnimation1 = <span class="keyword">new</span> TranslateAnimation(-<span class="number">10</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">translateAnimation1.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</span><br><span class="line"></span><br><span class="line">translateAnimation1.setDuration(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">view.startAnimation(translateAnimation1);</span><br></pre></td></tr></table></figure>
<h4 id="RotateAnimation-旋转动画"><a href="#RotateAnimation-旋转动画" class="headerlink" title="RotateAnimation 旋转动画"></a>RotateAnimation 旋转动画</h4><blockquote>
<ul>
<li><p>fromDegrees:起始角度    </p>
</li>
<li><p>toDegrees:到达角度</p>
</li>
<li><p>pivotX:X轴中心点    </p>
</li>
<li><p>pivotY:Y轴中心点     </p>
</li>
</ul>
</blockquote>
<p><strong>中心点取值模式：</strong></p>
<blockquote>
<ul>
<li><p>固定像素    50</p>
</li>
<li><p>相对于自身    50%</p>
</li>
<li><p>相对于父容器    50%p</p>
</li>
</ul>
</blockquote>
<h5 id="定义动画文件-1"><a href="#定义动画文件-1" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rotate</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toDegrees</span>=<span class="string">"90"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromDegrees</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fillAfter</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">rotate</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="加载动画并播放-1"><a href="#加载动画并播放-1" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RotateAnimation rotate = (RotateAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_rotate);</span><br><span class="line"></span><br><span class="line">view.startAnimation(rotate);</span><br></pre></td></tr></table></figure>
<h5 id="代码创建动画-1"><a href="#代码创建动画-1" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//在右上角中心，0-180度</span></span><br><span class="line"></span><br><span class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//（100，100）像素位中心</span></span><br><span class="line"></span><br><span class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">180</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//相对于自身一半为中心</span></span><br><span class="line"></span><br><span class="line">RotateAnimation rotate = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>, <span class="number">180</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>沿中心旋转 45°</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RotateAnimation rotateAnimation = <span class="keyword">new</span> RotateAnimation(<span class="number">0</span>,<span class="number">45</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">rotateAnimation.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</span><br><span class="line"></span><br><span class="line">rotateAnimation.setDuration(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">rotateAnimation.setFillAfter(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">view.startAnimation(rotateAnimation);</span><br></pre></td></tr></table></figure>
<h4 id="ScaleAnimation-缩放动画"><a href="#ScaleAnimation-缩放动画" class="headerlink" title="ScaleAnimation 缩放动画"></a>ScaleAnimation 缩放动画</h4><blockquote>
<ul>
<li><p>fromXScale:X轴起始缩放值        </p>
</li>
<li><p>fromYScale:Y轴起始缩放值</p>
</li>
<li><p>toXScale:X轴到达缩放值            </p>
</li>
<li><p>toYScale:Y轴到达缩放值</p>
</li>
<li><p>缩放值可以是缩放倍数，也可以是缩放到具体尺寸</p>
</li>
</ul>
</blockquote>
<h5 id="定义动画文件-2"><a href="#定义动画文件-2" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">scale</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromXScale</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toXScale</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fromYScale</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:toYScale</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:pivotX</span>=<span class="string">"50%"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">scale</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="加载动画并播放-2"><a href="#加载动画并播放-2" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ScaleAnimation scale = (ScaleAnimation) AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_scale);</span><br><span class="line"></span><br><span class="line">view.startAnimation(scale);</span><br></pre></td></tr></table></figure>
<h5 id="代码创建动画-2"><a href="#代码创建动画-2" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ScaleAnimation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">ScaleAnimation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ScaleAnimation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>,Animation.RELATIVE_TO_PARENT, <span class="number">0.5f</span>,Animation.RELATIVE_TO_PARENT, <span class="number">0.5f</span>);</span><br></pre></td></tr></table></figure>
<h4 id="AnimationSet-动画集合"><a href="#AnimationSet-动画集合" class="headerlink" title="AnimationSet 动画集合"></a>AnimationSet 动画集合</h4><h5 id="定义动画文件-3"><a href="#定义动画文件-3" class="headerlink" title="定义动画文件"></a>定义动画文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rotate</span> <span class="attr">android:pivotX</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromDegrees</span>=<span class="string">"-180"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toDegrees</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">scale</span> <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:pivotY</span>=<span class="string">"50%"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXScale</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXScale</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromYScale</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toYScale</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="加载动画并播放-3"><a href="#加载动画并播放-3" class="headerlink" title="加载动画并播放"></a>加载动画并播放</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Animation animation = AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.anim_set);</span><br><span class="line"></span><br><span class="line">view.startAnimation(animation);</span><br></pre></td></tr></table></figure>
<h5 id="代码创建动画-3"><a href="#代码创建动画-3" class="headerlink" title="代码创建动画"></a>代码创建动画</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//子动画是否共用差值器</span></span><br><span class="line"></span><br><span class="line">AnimationSet set = <span class="keyword">new</span> AnimationSet(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">set.addAnimation(<span class="keyword">new</span> RotateAnimation(-<span class="number">180</span>,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">set.addAnimation(<span class="keyword">new</span> ScaleAnimation(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,Animation.RELATIVE_TO_SELF, <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>));</span><br><span class="line"></span><br><span class="line">set.setDuration(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">set.setFillAfter(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">view.startAnimation(set);</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Interpolator"><a href="#Interpolator" class="headerlink" title="Interpolator"></a>Interpolator</h2><blockquote>
<p> Interpolator 被用来修饰动画效果，定义动画的变化率，可以使存在的动画效果accelerated(加速)，decelerated(减速),repeated(重复),bounced(弹跳)等。</p>
<p>常用的差值器</p>
</blockquote>
<ul>
<li><p>LinearIntepolator 匀速效果</p>
</li>
<li><p>DecelerateInterpolator  减速效果</p>
</li>
<li><p>Accelerateinterpolator  加速效果</p>
</li>
<li><p>CycleInterpolator     循环效果</p>
</li>
<li><p>BouncedInterpolator   弹跳效果</p>
</li>
</ul>
<hr>
<h2 id="Property-Animation-属性动画"><a href="#Property-Animation-属性动画" class="headerlink" title="Property Animation 属性动画"></a>Property Animation 属性动画</h2><blockquote>
<p>属性动画的用处有很多很多，我就列几个常用的方式把；具体参考官网文档：<a href="https://developer.android.com/guide/topics/graphics/prop-animation.html" target="_blank" rel="noopener">https://developer.android.com/guide/topics/graphics/prop-animation.html</a></p>
<p>补间动画并不能改变view真实的位置，只是形式上的位置改变。而属性动画会将view的真实位置改变。</p>
<p>属性动画定义必须在 res/animator目录下</p>
</blockquote>
<h3 id="ValueAnimation"><a href="#ValueAnimation" class="headerlink" title="ValueAnimation"></a>ValueAnimation</h3><blockquote>
<p>valueType 常用三种取值：</p>
<ul>
<li><p>intType整数值、</p>
</li>
<li><p>floatType浮点值、</p>
</li>
<li><p>colorType颜色值、</p>
</li>
</ul>
</blockquote>
<h4 id="定义动画文件-4"><a href="#定义动画文件-4" class="headerlink" title="定义动画文件"></a>定义动画文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">animator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueFrom</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueTo</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueType</span>=<span class="string">"intType"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/linear"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">animator</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="加载动画-并添加-动画监听"><a href="#加载动画-并添加-动画监听" class="headerlink" title="加载动画 并添加 动画监听"></a>加载动画 并添加 动画监听</h4><blockquote>
<p>属性动画 就是在 监听中去改变控件的属性的值 ，让控件 位置和形态的属性都发生真正的变化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                ValueAnimator animator = (ValueAnimator) AnimatorInflater.loadAnimator(<span class="keyword">this</span>,R.animator.animator_value);</span><br><span class="line"></span><br><span class="line">                animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//intType</span></span><br><span class="line"></span><br><span class="line">                      <span class="keyword">int</span> value= (<span class="keyword">int</span>) animation.getAnimatedValue();</span><br><span class="line"></span><br><span class="line">                        image.setTranslationY(value);</span><br><span class="line"></span><br><span class="line">                      <span class="comment">//  image.setTranslationX(value);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">//floatType</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                        float alpha = (float) animation.getAnimatedValue();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                        image.setAlpha(alpha);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="代码创建-1"><a href="#代码创建-1" class="headerlink" title="代码创建"></a>代码创建</h4><blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//   ValueAnimator valueAnimator = ValueAnimator.ofFloat(1f,0.5f,0f);</span></span><br><span class="line"></span><br><span class="line">PropertyValuesHolder alphaHolder = PropertyValuesHolder.ofFloat(<span class="string">"alpha"</span>,<span class="number">1f</span>,<span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">PropertyValuesHolder widthHolder = PropertyValuesHolder.ofInt(<span class="string">"width"</span>,<span class="number">1</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">PropertyValuesHolder rotateHolder = PropertyValuesHolder.ofFloat(<span class="string">"rotate"</span>,<span class="number">0</span>,<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">ValueAnimator valueAnimator = ValueAnimator.ofPropertyValuesHolder(alphaHolder,widthHolder,rotateHolder);</span><br><span class="line"></span><br><span class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//                       float value= (float) animation.getAnimatedValue();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                        image.setAlpha(value);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">float</span> alpha= (<span class="keyword">float</span>) animation.getAnimatedValue(<span class="string">"alpha"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = (<span class="keyword">int</span>) animation.getAnimatedValue(<span class="string">"width"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> rotate = (<span class="keyword">float</span>) animation.getAnimatedValue(<span class="string">"rotate"</span>);</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">"MainActivity"</span>,<span class="string">"alpha:"</span>+alpha);</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">"MainActivity"</span>,<span class="string">"width:"</span>+width);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        image.setAlpha(alpha);</span><br><span class="line"></span><br><span class="line">       image.setMaxWidth(width);</span><br><span class="line"></span><br><span class="line">        image.setMinimumWidth(width);</span><br><span class="line"></span><br><span class="line">        image.setRotation(rotate);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">valueAnimator.setDuration(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">valueAnimator.start();</span><br></pre></td></tr></table></figure>
<h3 id="ObjectAnimator"><a href="#ObjectAnimator" class="headerlink" title="ObjectAnimator"></a>ObjectAnimator</h3><blockquote>
<p>大部分属性都和ValueAnimator相同，只多了对要控制改变的控件的属性的声明</p>
<p>propertyName：要控制的控件的属性名;</p>
<p>动画会直接修改制定属性名的属性</p>
<p>需要注意：设置了getter/setter方法的属性才能生效</p>
</blockquote>
<h4 id="定义动画文件-5"><a href="#定义动画文件-5" class="headerlink" title="定义动画文件"></a>定义动画文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:propertyName</span>=<span class="string">"rotation"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueFrom</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueTo</span>=<span class="string">"45"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    rotation</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        rotationY</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        rotationX</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">objectAnimator</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="加载动画并设置播放动画的对象"><a href="#加载动画并设置播放动画的对象" class="headerlink" title="加载动画并设置播放动画的对象"></a>加载动画并设置播放动画的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectAnimator object = (ObjectAnimator) AnimatorInflater.loadAnimator(<span class="keyword">this</span>,R.animator.animator_object);</span><br><span class="line"></span><br><span class="line">object.setTarget(image);</span><br><span class="line"></span><br><span class="line">object.start();</span><br></pre></td></tr></table></figure>
<h4 id="代码创建动画-4"><a href="#代码创建动画-4" class="headerlink" title="代码创建动画"></a>代码创建动画</h4><blockquote>
<p>凡是 有get/set方法的属性都可以设置值</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(image,"alpha",1f,0.2f);</span></span><br><span class="line"></span><br><span class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofInt(view,<span class="string">"backgroundColor"</span>, Color.RED,Color.YELLOW,Color.BLUE,Color.GREEN);</span><br><span class="line"></span><br><span class="line">objectAnimator.setDuration(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">objectAnimator.setInterpolator(<span class="keyword">new</span> BounceInterpolator());</span><br><span class="line"></span><br><span class="line">objectAnimator.start();</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>完整代码github地址：<a href="https://github.com/sky-mxc/AndroidDemo/tree/master/animation" target="_blank" rel="noopener">https://github.com/sky-mxc/AndroidDemo/tree/master/animation</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ContentProvider]]></title>
      <url>http://blog.skymxc.com/2016/10/03/ContentProvider/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<h1 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h1><blockquote>
<p>内容提供者，应用程序间的数据交互，是为存储和获取数据提供的统一接口。<br>Contentprovider为应用间数据交互提供了安全的环境，它允许把自己的应用数据开放给其他应用进行 CRUD。怎么样进行操作可以自己规定，不用担心权限的问题。</p>
</blockquote>
<p><br></p>
<blockquote>
<p>当然如果不想被被人读取自己应用的数据就不需要这个内容提供者。<br><br><br>ContentResolver来访问和操作我们的数据。<br>ContentResolver 通过我们注册的uri就可以找到我们开放的数据。</p>
</blockquote>
<p>关于uri 参考这篇文章：<a href="http://blog.csdn.net/dlutbrucezhang/article/details/8917303" target="_blank" rel="noopener">http://blog.csdn.net/dlutbrucezhang/article/details/8917303</a></p>
<h2 id="创建一个ContentProvider"><a href="#创建一个ContentProvider" class="headerlink" title="创建一个ContentProvider"></a>创建一个ContentProvider</h2><blockquote>
<p>创建自己的内容提供程序 只需继承ContentProvider即可。<br>这里就以insert 和 query 为例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.skymxc.demo.contentprovider.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ContentProvider;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentUris;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.content.UriMatcher;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by sky-mxc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DBHelper dbHelper;</span><br><span class="line">    <span class="keyword">private</span> UriMatcher uriMatcher;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匹配结果是一张表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STUDENTS = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//匹配结果是一个条数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STUDENT = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//一般是包名 避免重复</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORITY = <span class="string">"com.skymxc.demo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dbHelper = <span class="keyword">new</span> DBHelper(getContext());</span><br><span class="line">        <span class="comment">//初始化 uri匹配者   UriMatcher.NO_MATCH：匹配不上时返回</span></span><br><span class="line">        uriMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加能够匹配的uri格式 参数1authorities 匹配住机。  参数2 匹配路径   参数3 code ： match success  return this code；</span></span><br><span class="line">        <span class="comment">// 代表这个uri 操作的是一个表，匹配码是 STUDENTS</span></span><br><span class="line">        uriMatcher.addURI(AUTHORITY,<span class="string">"student"</span>, STUDENTS);</span><br><span class="line">        <span class="comment">//代表这个uri 操作的是一条数据 匹配成功后返回 STUDENT</span></span><br><span class="line">        uriMatcher.addURI(AUTHORITY,<span class="string">"student/#"</span>,STUDENT);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查询操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projection 要查询的列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> condition 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 查询参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sortOrder 排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String condition, String[] values, String sortOrder)</span> </span>&#123;</span><br><span class="line">        Cursor cursor =<span class="keyword">null</span>;</span><br><span class="line">        SQLiteDatabase db= dbHelper.getDB();</span><br><span class="line">        <span class="comment">//匹配这个uri 要查询一张表还是 某条数据</span></span><br><span class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> STUDENT:</span><br><span class="line">                <span class="comment">//查询某条数据  ContentUris  :工具类 可以解析出id</span></span><br><span class="line">                <span class="keyword">long</span> id= ContentUris.parseId(uri);</span><br><span class="line">                String where =<span class="string">"_id ="</span>+id+<span class="string">" "</span>;</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(condition))&#123;</span><br><span class="line">                    where+= <span class="string">" and "</span>+condition;</span><br><span class="line">                &#125;</span><br><span class="line">               cursor= db.query(DBHelper.TABLE_NAME,projection,where,values,<span class="keyword">null</span>,<span class="keyword">null</span>,sortOrder);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STUDENTS:</span><br><span class="line">                <span class="comment">//查询一张表</span></span><br><span class="line">                cursor = db.query(DBHelper.TABLE_NAME,projection,condition,values,<span class="keyword">null</span>,<span class="keyword">null</span>,sortOrder);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"match fail 。uri:"</span>+uri+<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        String type=<span class="string">"unKnow"</span>;</span><br><span class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> STUDENT:</span><br><span class="line">                type=<span class="string">"vnd.android.cursor.item/student"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STUDENTS:</span><br><span class="line">                type= <span class="string">"vnd.android.cursor.dir/student"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</span><br><span class="line">        SQLiteDatabase db = dbHelper.getDB();</span><br><span class="line">        <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</span><br><span class="line">            <span class="keyword">case</span> STUDENT:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STUDENTS:</span><br><span class="line">                db.insert(DBHelper.TABLE_NAME,<span class="string">"_id"</span>,values);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>创建完之后还需要在manifest文件中注册 才能被其他应用看到，通过 <provider>元素注册一个内容提供者</provider></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    android:exported 设置此provider是否可以被其他应用使用。</span></span><br><span class="line"><span class="comment">    android:readPermission 该provider的读权限的标识</span></span><br><span class="line"><span class="comment">    android:writePermission 该provider的写权限标识</span></span><br><span class="line"><span class="comment">    android:permission provider读写权限标识</span></span><br><span class="line"><span class="comment">    android:grantUriPermissions 临时权限标识</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">"com.skymxc.demo"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".util.StudentProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>关于临时权限标识 grantUriPermissions :true时，意味着该provider下所有数据均可被临时使用；false时，则反之，但可以通过设置<grant-uri-permission>标签来指定哪些路径可以被临时使用。这么说可能还是不容易理解，我们举个例子，比如你开发了一个邮箱应用，其中含有附件需要第三方应用打开，但第三方应用又没有向你申请该附件的读权限，但如果你设置了此标签，则可以在start第三方应用时，传入FLAG_GRANT_READ_URI_PERMISSION或FLAG_GRANT_WRITE_URI_PERMISSION来让第三方应用临时具有读写该数据的权限。</grant-uri-permission></strong><br><br></p>
<blockquote>
<p>到这里 一个简单的内容提供者就创建完成了</p>
</blockquote>
<hr>
<h2 id="ContentResolver"><a href="#ContentResolver" class="headerlink" title="ContentResolver"></a>ContentResolver</h2><blockquote>
<p>可以看做是客户端 与ContentProvider 对应 ，ContentProvider 负责提供数据操作接口 ，ContentResolver 可以调用ContentProvider的数据接口对数据进行操作</p>
</blockquote>
<p>为了测试上面定义的ContentProvider  ，另创建一个Module 进行读取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ContentResolver resolver= getContentResolver() ;</span><br><span class="line">    String uriStr =<span class="string">"content://com.skymxc.demo/student"</span>;</span><br><span class="line">   Cursor cursor= resolver.query(Uri.parse(uriStr),<span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>,<span class="string">"name"</span>,<span class="string">"age"</span>&#125;,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="string">"age"</span>);</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"============student==================\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cursor !=<span class="keyword">null</span> &amp;&amp;cursor.moveToNext())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> id = cursor.getLong(cursor.getColumnIndex(<span class="string">"_id"</span>));</span><br><span class="line">            String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</span><br><span class="line">            <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(<span class="string">"age"</span>));</span><br><span class="line">            sb.append(<span class="string">"==="</span>+id+<span class="string">"===\n"</span>);</span><br><span class="line">            sb.append(<span class="string">"name:"</span>+name+<span class="string">"\n"</span>);</span><br><span class="line">            sb.append(<span class="string">"age:"</span>+age+<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    sb.append(<span class="string">"============================"</span>);</span><br><span class="line">        tv.setText(sb.toString());</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)&#123;</span><br><span class="line">        cursor.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>insert<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String name = etName.getText().toString();</span><br><span class="line">    String  age = etAge .getText().toString();</span><br><span class="line"></span><br><span class="line">    ContentResolver resolver = getContentResolver();</span><br><span class="line">    String uriStr=<span class="string">"content://com.skymxc.demo/student"</span>;</span><br><span class="line">    ContentValues cv = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    cv.put(<span class="string">"name"</span>,name);</span><br><span class="line">    cv.put(<span class="string">"age"</span>,age);</span><br><span class="line">    resolver.insert(Uri.parse(uriStr),cv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ContentResolver 还可以用来操作 短信,联系人，多媒体等 数据，这里写个读取短信的实例</p>
<p>读取短信的权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_SMS"</span>/&gt;</span></span><br><span class="line">&gt;`</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">querySms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] projection = <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>,<span class="string">"address"</span>,<span class="string">"person"</span>,<span class="string">"body"</span>,<span class="string">"type"</span>&#125;;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"短信数据=============\n"</span>);</span><br><span class="line">    ContentResolver resolver= getContentResolver();</span><br><span class="line">    Cursor cursor = resolver.query(Uri.parse(<span class="string">"content://sms/"</span>),projection,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">while</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToNext())&#123;</span><br><span class="line">        sb.append(<span class="string">"id:"</span>+cursor.getInt(cursor.getColumnIndex(<span class="string">"_id"</span>)));</span><br><span class="line">        sb.append(<span class="string">"\naddress:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"address"</span>)));</span><br><span class="line">        sb.append(<span class="string">"\nperson:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"person"</span>)));</span><br><span class="line">        sb.append(<span class="string">"\nbody:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"body"</span>)));</span><br><span class="line">        sb.append(<span class="string">"\ntype:"</span>+cursor.getString(cursor.getColumnIndex(<span class="string">"type"</span>)));</span><br><span class="line">        sb.append(<span class="string">"\n================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tv.setText(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="ContentObserver"><a href="#ContentObserver" class="headerlink" title="ContentObserver"></a>ContentObserver</h2><blockquote>
<p>内容观察者，可以给某些数据注册观察者，当数据改变时做出有些操作</p>
<p>初始化观察者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ContentObserver  observer = <span class="keyword">new</span> ContentObserver(<span class="keyword">new</span> Handler()) &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">(<span class="keyword">boolean</span> selfChange)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onChange(selfChange);</span><br><span class="line">       Log.e(<span class="string">"MainActivity"</span>,<span class="string">"======数据改变了==="</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p>
<p>注册观察者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Uri uri = Uri.parse(<span class="string">"content://"</span>+StudentProvider.AUTHORITY+<span class="string">"/student"</span>);</span><br><span class="line"><span class="comment">//为student 注册观察者</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parameter1 观察的uri</span></span><br><span class="line"><span class="comment"> * parameter2 uri的后代是否连带 观察</span></span><br><span class="line"><span class="comment"> * parameter3 observer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getContentResolver().registerContentObserver(uri,<span class="keyword">true</span>,observer);</span><br></pre></td></tr></table></figure></p>
<p>内容改变时 通知观察者</p>
</blockquote>
<p>系统会首先查找 uri 扫描（手机上）所有的注册的observer 的uri  匹配之后执行 observer的onChange 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</span><br><span class="line">    SQLiteDatabase db = dbHelper.getDB();</span><br><span class="line">    <span class="keyword">int</span> line=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (uriMatcher.match(uri))&#123;</span><br><span class="line">        <span class="keyword">case</span> STUDENT:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> STUDENTS:</span><br><span class="line">          line= (<span class="keyword">int</span>) db.insert(DBHelper.TABLE_NAME,<span class="string">"_id"</span>,values);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (line&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        getContext().getContentResolver().notifyChange(uri,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当在另一个应用插入数据时 change()调用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: ======数据改变了===</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ACTION_SEND]]></title>
      <url>http://blog.skymxc.com/2016/10/01/ACTION-SEND/</url>
      <content type="html"><![CDATA[<hr>
<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/10/01/ACTION-SEND" target="_blank" rel="noopener">https://sky-mxc.github.io</a></p>
</blockquote>
<hr>
<h1 id="不使用第三方-SDK-实现简单分享"><a href="#不使用第三方-SDK-实现简单分享" class="headerlink" title="不使用第三方 SDK 实现简单分享"></a>不使用第三方 SDK 实现简单分享</h1><blockquote>
<p>现在在Android系统中进行分享，主要有两种手段，一种是通过系统自带的来启动分享功能；第二种是通过第三方的SDK插件进行分享；今天先来看看系统自带的分享功能:Intent.ACTOIN_SEND;</p>
<ul>
<li>分享文本</li>
<li>分享图片+文本 （QQ和微信不支持，只能将图片和文本分两次分享，目前来看只有新浪微博支持）</li>
<li>分享多图片 （和上面一样 ，目前只有新浪微博可以同时分享图片和文本）</li>
<li>分享图片+文本至微信朋友圈 </li>
<li>检查是否有intent要启动的activity</li>
</ul>
</blockquote>
<h2 id="分享存文本内容"><a href="#分享存文本内容" class="headerlink" title="分享存文本内容"></a>分享存文本内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">share</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单分享</span></span><br><span class="line"><span class="comment">     * 让用户去选择分享平台</span></span><br><span class="line"><span class="comment">     * 只分享简单的文子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String context = etContext.getText().toString();</span><br><span class="line">    intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line">    intent.setType(<span class="string">"text/plain"</span>);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_TEXT,context);</span><br><span class="line">    <span class="keyword">if</span>(hasApplication(intent))&#123;</span><br><span class="line">        <span class="comment">//没有默认选项 可以自定义dialog标题</span></span><br><span class="line">        startActivity(Intent.createChooser(intent,<span class="string">"分享一下"</span>));</span><br><span class="line">        <span class="comment">//系统默认主题</span></span><br><span class="line">        <span class="comment">//   startActivity(intent);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在分享之前可以先查看一下手机上是否有分享平台，如果没有就给出提示可以增加用户友好度，通过 PackageManager的queryIntentActivities()查看是否有匹配intent的Activity<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否存在intent要启动的Activity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasApplication</span><span class="params">(Intent intent)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询是否有该intent要启动的Activity</span></span><br><span class="line">    List&lt;ResolveInfo&gt; resolveInfos= getPackageManager().queryIntentActivities(intent,<span class="number">0</span>);</span><br><span class="line">    log(resolveInfos.size()+<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span>  resolveInfos.size()&gt;<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另外 使用  Intent.createChooser()可以避免出现默认程序的可能，还可以定义弹出框的标题 ，友好程度更好一些,下面看一下两者的区别</p>
<blockquote>
<p>系统默认的主题( startActivity(intent))<br><img src="\images\Android\share_ACTION_SEND\system.png" alt="系统默认"><br><strong>使用 Intent.createChooser()</strong><br><img src="\images\Android\share_ACTION_SEND\createChooser.png" alt="Intent.createChooser()"></p>
</blockquote>
<hr>
<h2 id="分享文本-图片"><a href="#分享文本-图片" class="headerlink" title="分享文本+图片"></a>分享文本+图片</h2><blockquote>
<p>图片和文本一起分享 目前我测试的只有微博好使 ，QQ和微信 都只能分享图片，不接受文本<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分享图片 和文本</span></span><br><span class="line"><span class="comment"> * QQ 微信 不能图片和文本一起分享</span></span><br><span class="line"><span class="comment"> * 微博可以实现图片和文本一起分享</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shareChooser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String context = etContext.getText().toString();</span><br><span class="line"></span><br><span class="line">    intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line">    intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_TEXT,context);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_STREAM,uri);</span><br><span class="line">    <span class="keyword">if</span> (hasApplication(intent))&#123;</span><br><span class="line">        startActivity(Intent.createChooser(intent,<span class="string">"选择要分享到的平台吧"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="分享多张图片"><a href="#分享多张图片" class="headerlink" title="分享多张图片"></a>分享多张图片</h2><blockquote>
<p>和上面一样 我测试 只有微博能同时分享图片和文本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分享多个图片</span></span><br><span class="line"><span class="comment"> * 目前来看 只有微博能同时分享文本和内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sharePhototMult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Uri&gt; uris =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    uris.add(uri);</span><br><span class="line">    uris.add(uri);</span><br><span class="line">    intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND_MULTIPLE);</span><br><span class="line">    intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_TEXT,<span class="string">"分享内容测试"</span>);</span><br><span class="line">    intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);</span><br><span class="line">    <span class="keyword">if</span>(hasApplication(intent))&#123;</span><br><span class="line">        startActivity(Intent.createChooser(intent,<span class="string">"选择分享平台"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="分享-图片-文本到微信朋友圈"><a href="#分享-图片-文本到微信朋友圈" class="headerlink" title="分享 图片+文本到微信朋友圈"></a>分享 图片+文本到微信朋友圈</h2><blockquote>
<p>这个方式可以实现 图片+ 文本同时分享</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分享图片去微信朋友圈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sharePhotoToWX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String wxPackage = <span class="string">"com.tencent.mm"</span>;</span><br><span class="line">    <span class="keyword">if</span> (checkPackage(wxPackage))&#123;</span><br><span class="line">        intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line"></span><br><span class="line">        intent.setClassName(wxPackage,<span class="string">"com.tencent.mm.ui.tools.ShareToTimeLineUI"</span>);</span><br><span class="line">        intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"Kdescription"</span>,<span class="string">"朋友圈分享测试"</span>);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_STREAM,uri);</span><br><span class="line">        startActivity(intent);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"微信不存在"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="检查是否有隐式intent要启动的activity"><a href="#检查是否有隐式intent要启动的activity" class="headerlink" title="检查是否有隐式intent要启动的activity"></a>检查是否有隐式intent要启动的activity</h2><blockquote>
<p>有时候使用 隐式分享 ，并不知道是否存在分享平台 ，就可以通过以下代码测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否存在intent要启动的Activity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intent</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasApplication</span><span class="params">(Intent intent)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询是否有该intent要启动的Activity</span></span><br><span class="line">    List&lt;ResolveInfo&gt; resolveInfos= getPackageManager().queryIntentActivities(intent,<span class="number">0</span>);</span><br><span class="line">    log(resolveInfos.size()+<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span>  resolveInfos.size()&gt;<span class="number">0</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity]]></title>
      <url>http://blog.skymxc.com/2016/09/30/activity/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/09/30/activity" target="_blank" rel="noopener">https://sky-mxc.github.io/2016/09/30/activity</a></p>
</blockquote>
<h1 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h1><ul>
<li>什么是Activity</li>
<li>创建Activity</li>
<li>启动Activity</li>
<li>保存Activity状态</li>
<li>Activity的生命周期</li>
</ul>
<hr>
<h2 id="acitivyt-是什么"><a href="#acitivyt-是什么" class="headerlink" title="acitivyt 是什么"></a>acitivyt 是什么</h2><blockquote>
<p>引用官方的说法：<br><em>是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。 每个 Activity 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上</em></p>
</blockquote>
<h2 id="创建Activity"><a href="#创建Activity" class="headerlink" title="创建Activity"></a>创建Activity</h2><p>要创建Activity 必须继承自Activity或者Activity的子类。在Activity的各个生命阶段实现对应的方法；</p>
<blockquote>
<p>其中重要的两个方法:</p>
<p>onCreate() ,系统在创建Activity时调用此方法；在此方法实现视图绑定；一些 控件的初始化</p>
<p>onPuase();  用户离开当前Activity调用的第一个方法 ，</p>
<p>创建完成后必须在Manifest文件中 声明此Activity 系统才会知道有这个Activity</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".ExampleActivity"</span> /&gt;</span></span><br><span class="line">      ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>如果有需要也可以为此Activity添加IntentFilter(IntentFilter稍后我会再做总结),以供外部程序来启动，一般同一应用中不会用到隐式启动。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".AActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>最简单的Activity 只绑定了一个视图<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="启动Activity"><a href="#启动Activity" class="headerlink" title="启动Activity"></a>启动Activity</h2><blockquote>
<p>可以通过一个intent 来启动 一个Activity ,关于intent稍后会做总结</p>
</blockquote>
<h3 id="明确目标启动"><a href="#明确目标启动" class="headerlink" title="明确目标启动"></a>明确目标启动</h3><p>在明确的指导要启动的Activity的时候可以显示使用intent来启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(this, SignInActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>
<h3 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h3><p>如果需要传递数据，可以在intent中放入数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_SEND);</span><br><span class="line">intent.putExtra(<span class="string">"origin"</span>, <span class="string">"哈哈"</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<p>获取数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent();<span class="comment">//获取启动此activity的intent</span></span><br><span class="line">String origin = intent.getStringExtra(<span class="string">"origin"</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="不明确启动目标"><a href="#不明确启动目标" class="headerlink" title="不明确启动目标"></a>不明确启动目标</h3><p>在不明确要启动的Activity的时候 可以在intent中添加关于启动目标的描述和类型,系统会过滤所有的Activity的intentFilter来匹配 ；一般 在同一个应用中不必使用隐式Intent；</p>
<blockquote>
<p>例如 我在为A Activity添加这样的IntentFilter：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".AActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.action.x2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.skymxc.catagory.c2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>要启动上面的Activity可以这样写 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Intent in = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">////要执行的动作的描述 所有的action中 有一个匹配行</span></span><br><span class="line">in.setAction(<span class="string">"com.skymxc.action.x2"</span>);</span><br><span class="line"><span class="comment">//附加信息的描述 这里的描述只要在intentFilter中声明了就能匹配上，</span></span><br><span class="line"><span class="comment">// 如果有一项未声明则匹配不上，如果intentFilter中没有可以不添加，会使用默认的category</span></span><br><span class="line">in.addCategory(<span class="string">"com.skymxc.catagory.c2"</span>);</span><br><span class="line"><span class="comment">//对数据进行描述 C中定义了协议为 file</span></span><br><span class="line">in.setDataAndType(Uri.parse(<span class="string">"http://"</span>),<span class="string">"audio/13"</span>);</span><br><span class="line"><span class="keyword">if</span> (in.resolveActivity(getPackageManager())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//启动</span></span><br><span class="line">    startActivity(in);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>,<span class="string">"系统中不存在可以执行此操作的程序"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="为某个结果启动一个Activity"><a href="#为某个结果启动一个Activity" class="headerlink" title="为某个结果启动一个Activity"></a>为某个结果启动一个Activity</h3><p>如果启动一个Activit只为获得某个结果 可以 使用 startActivityForResult() 来启动一个Activity ，在获得结果后会回调 方法：onActivityResult();</p>
<blockquote>
<p>去图库获取图片 第二个参数是请求码 在onActivityResult()中区分结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent1 = <span class="keyword">new</span> Intent(Intent.ACTION_PICK);</span><br><span class="line">intent1.setData(MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</span><br><span class="line"><span class="comment">//为了结果去启动一个Activity</span></span><br><span class="line">startActivityForResult(intent1,<span class="number">50</span>);</span><br></pre></td></tr></table></figure></p>
<p>onActivityResult()中获取到取得的图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestCode 启动时的 requestCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resultCode 跳转的activity给的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 跳转的activity给的 返回的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">if</span> (requestCode== <span class="number">50</span> &amp;&amp; resultCode ==RESULT_OK &amp;&amp; data != <span class="keyword">null</span>)&#123;</span><br><span class="line">       Uri uri = data.getData(); <span class="comment">//返回是标识符指定图片所在的位置的统一资源标识符</span></span><br><span class="line">        img.setImageURI(uri);  <span class="comment">//设置给 ImageView</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="保存Activity的状态"><a href="#保存Activity的状态" class="headerlink" title="保存Activity的状态"></a>保存Activity的状态</h2><p>当用户 离开Activity去往另一个Activity时；Activity会被压入返回栈，如果内存不够就会被销毁 ，当Activity被销毁后其中的数据当然就没了，如果需要保留这些数据可调用 方法 onSaveInstanceState()方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState, PersistableBundle outPersistentState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存入数据</span></span><br><span class="line">   outState.putBoolean(<span class="string">"checked"</span>,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当此Activity被创建时 就能取出数据了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">boolean</span> checked = savedInstanceState.getBoolean(<span class="string">"checked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><p>看一张图描述了整个Activity由生到死的一套回调方法<br><img src="\images\Android\activity\activitlifcycle.png" alt="生命周期"></p>
<h3 id="回调方法说明"><a href="#回调方法说明" class="headerlink" title="回调方法说明"></a>回调方法说明</h3><blockquote>
<p>先说一下上图的方法：</p>
<ul>
<li>onCreate() :创建Activity ，可以在这里进行初始一些视图和数据 </li>
<li>onStart():   启动Activity ，这里你就可以看到 这个activity了</li>
<li>onResume(): 调用这个方法前 只能看到Activity 并不能进行交互 ，执行完此方法才可以进行交互 ，整个Activity就彻底的运行起来了</li>
<li>onPause()   :停止用户交互 你可以看到 但是 不能交互了  比如 启动另一个透明的Dialog Activity 你可以看到原本的Activity ，但是已经失去了焦点 ，无法交互</li>
<li>onStop() ：当前Activity被覆盖时调用 例如 当前activity1跳往到activity2 ，activity就会把activity1覆盖，这时就调用了此方法</li>
<li>onRestart();  重新启动</li>
<li>onDestroy():activity再结束前调用的最后一个方法;这里可以进行一些释放资源的操作</li>
</ul>
</blockquote>
<h3 id="三种阶段"><a href="#三种阶段" class="headerlink" title="三种阶段"></a>三种阶段</h3><blockquote>
<ul>
<li>完整生命周期：<br> 从调用的第一个方法 onCreate()  到最后调用一个的方法onDestroy()  ，在onCreate()方法中可以进行一些全局的配置，UI的引用，数据的初始化，也可以从savedInstanceState中读取 保存在设备中或者执行reCreate方法前保存的数据等前提savedInstanceSate不为null，在onDestroy(）方法中可以 释放资源等</li>
</ul>
<ul>
<li><p>可视周期：在执行onStart()和onStop(）之间  在这期间 你可以在屏幕上看到这个Activity但是 不能再前台跟用户交互 。只能看，可以理解为于禁用状态</p>
</li>
<li><p>前台周期：在执行onResume() 和 onPause() 之间，在这期间，用户就可以在前台和activity交互了。</p>
</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>关于这里提到的intent ，intentFilter 我会在之后总结。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[seekbar]]></title>
      <url>http://blog.skymxc.com/2016/09/30/SeekBar/</url>
      <content type="html"><![CDATA[<h1 id="SeekBar-可拖动进度条"><a href="#SeekBar-可拖动进度条" class="headerlink" title="SeekBar 可拖动进度条"></a>SeekBar 可拖动进度条</h1><blockquote>
<p><strong>sky-mxc 总结</strong> 转载注明:<a href="https://sky-mxc.github.io/2016/09/30/SeekBar" target="_blank" rel="noopener">https://sky-mxc.github.io/2016/09/30/SeekBar</a></p>
</blockquote>
<ul>
<li>常用属性</li>
<li>常用方法</li>
<li>自定义样式</li>
</ul>
<h2 id="常用的属性"><a href="#常用的属性" class="headerlink" title="常用的属性"></a>常用的属性</h2><ul>
<li>max            最大值</li>
<li>progress        进度值</li>
<li>secondaryProgress        第二进度条</li>
<li>progressDrawable        进度图片</li>
<li>thumb        拖拽按钮</li>
<li>thumbOffset        拖拽按钮位置补偿</li>
<li>maxHeight/maxWidth        最大宽高</li>
<li>minHeight/minWidth        最小宽高</li>
</ul>
<blockquote>
<p>可通过 maxHeight ，minHeight 控制 高度</p>
</blockquote>
<hr>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ul>
<li>setProgress()        设置进度值</li>
<li>getProgress()        获取进度值</li>
<li>setSecondaryProgress()        设置第二进度值</li>
<li>getSecondaryProgress()        获取第二进度值</li>
<li>setSeekBarChangeListener()        设置seekbar拖动改变监听</li>
</ul>
<hr>
<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><ul>
<li>自定义 背景</li>
<li>自定义进度样式</li>
<li>自定义滑块</li>
</ul>
<blockquote>
<p>自定义背景和进度样式 这里使用简单的shape图片 通过 progressDrawable 属性设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/background"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#353b35"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/progress"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#10b410"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>自定义滑块 通过 属性thumb 设置 这里也是通过shape图形绘制，滑块的高度 是可以自定义的 在这里就可以设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--按下--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#b31395"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:width</span>=<span class="string">"20dp"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_focused</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#362d35"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:width</span>=<span class="string">"20dp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> &gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#362d35"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"10dp"</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">android:width</span>=<span class="string">"20dp"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>高度通过 minHeight maxHeight 设置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/seek_bar_0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:max</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progress</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxHeight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:minHeight</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:thumb</span>=<span class="string">"@drawable/selector_seek_thumb_bg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progressDrawable</span>=<span class="string">"@drawable/selector_seekbar_bg"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>实例图<br><img src="\images\Android\SeekBar\Seekbar.png" alt="实例图"></p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
